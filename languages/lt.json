{
    "bitbybit.draw.drawAnyAsyncNoReturn": "piešti bet ką asinchroniškai be grąžinimo",
    "bitbybit": "bitbybit",
    "draw": "piešti",
    "drawAnyAsyncNoReturn": "piešti bet ką asinchroniškai be grąžinimo",
    "bitbybit.draw.drawAnyAsyncNoReturn_description": "piešia bet kokią geometriją nieko negrąžindamas",
    "draw async": "piešti asinchroniškai",
    "entity": "objektas",
    "Entity": "objektas",
    "options": "parinktys",
    "DrawOptions": "piešimo parinktys",
    "babylonMesh": "babylon tinklas",
    "BABYLON.Mesh | BABYLON.LinesMesh": "babylon tinklas arba linijų tinklas",
    "bitbybit.draw.drawAnyAsync": "piešti bet ką asinchroniškai",
    "drawAnyAsync": "piešti bet ką asinchroniškai",
    "bitbybit.draw.drawAnyAsync_description": "piešia bet kokią geometriją ir grąžina babylon tinklą",
    "bitbybit.draw.drawAnyNoReturn": "piešti bet ką be grąžinimo",
    "drawAnyNoReturn": "piešti bet ką be grąžinimo",
    "bitbybit.draw.drawAnyNoReturn_description": "piešia sinchroninę geometriją, netaikoma occt ar jscad formoms",
    "draw sync": "piešti sinchroniškai",
    "bitbybit.draw.drawAny": "piešti bet ką",
    "drawAny": "piešti bet ką",
    "bitbybit.draw.drawAny_description": "piešia sinchroninę geometriją, netaikoma occt ar jscad formoms",
    "bitbybit.draw.drawGridMeshNoReturn": "piešti tinklo tinklą be grąžinimo",
    "drawGridMeshNoReturn": "piešti tinklo tinklą be grąžinimo",
    "bitbybit.draw.drawGridMeshNoReturn_description": "piešia tinklo tinklą ant žemės orientacijai palengvinti",
    "grid": "tinklas",
    "width": "plotis",
    "number": "skaičius",
    "height": "aukštis",
    "subdivisions": "padalinimai",
    "majorUnitFrequency": "pagrindinio vieneto dažnis",
    "minorUnitVisibility": "mažo vieneto matomumas",
    "gridRatio": "tinklo santykis",
    "opacity": "skaidrumas",
    "backFaceCulling": "galinio paviršiaus pašalinimas",
    "boolean": "loginis",
    "mainColor": "pagrindinė spalva",
    "Base.Color": "bazinė spalva",
    "secondaryColor": "antrinė spalva",
    "bitbybit.draw.drawGridMesh": "piešti tinklo tinklą",
    "drawGridMesh": "piešti tinklo tinklą",
    "bitbybit.draw.drawGridMesh_description": "piešia tinklo tinklą ant žemės orientacijai palengvinti",
    "bitbybit.draw.optionsSimple": "paprastos parinktys",
    "optionsSimple": "paprastos parinktys",
    "bitbybit.draw.optionsSimple_description": "nustato piešimo parinktis pagrindinei geometrijai, pvz., taškams ir linijoms",
    "colours": "spalvos",
    "string | string[]": "eilutė arba eilutės masyvas",
    "size": "dydis",
    "updatable": "atnaujinamas",
    "hidden": "paslėptas",
    "bitbybit.draw.optionsOcctShape": "occt formos parinktys",
    "optionsOcctShape": "occt formos parinktys",
    "bitbybit.draw.optionsOcctShape_description": "nustato piešimo parinktis occt formoms, pvz., briaunoms ir kietosioms medžiagoms",
    "faceOpacity": "paviršiaus skaidrumas",
    "edgeOpacity": "briaunos skaidrumas",
    "edgeColour": "briaunos spalva",
    "faceColour": "paviršiaus spalva",
    "vertexColour": "viršūnės spalva",
    "faceMaterial": "paviršiaus medžiaga",
    "Base.Material": "bazinė medžiaga",
    "edgeWidth": "briaunos plotis",
    "vertexSize": "viršūnės dydis",
    "drawEdges": "piešti briaunas",
    "drawFaces": "piešti paviršius",
    "drawVertices": "piešti viršūnes",
    "precision": "tikslumas",
    "drawEdgeIndexes": "piešti briaunų indeksus",
    "edgeIndexHeight": "briaunos indekso aukštis",
    "edgeIndexColour": "briaunos indekso spalva",
    "drawFaceIndexes": "piešti paviršių indeksus",
    "faceIndexHeight": "paviršiaus indekso aukštis",
    "faceIndexColour": "paviršiaus indekso spalva",
    "bitbybit.draw.optionsOcctShapeSimple": "paprastos occt formos parinktys",
    "optionsOcctShapeSimple": "paprastos occt formos parinktys",
    "bitbybit.draw.optionsOcctShapeSimple_description": "nustato paprastas piešimo parinktis occt formoms",
    "bitbybit.draw.optionsOcctShapeMaterial": "occt formos medžiagos parinktys",
    "optionsOcctShapeMaterial": "occt formos medžiagos parinktys",
    "bitbybit.draw.optionsOcctShapeMaterial_description": "nustato piešimo parinktis su pasirinktine paviršiaus medžiaga occt formoms",
    "any": "bet koks",
    "bitbybit.draw.optionsManifoldShapeMaterial": "manifold geometrijos medžiagos parinktys",
    "optionsManifoldShapeMaterial": "manifold geometrijos medžiagos parinktys",
    "bitbybit.draw.optionsManifoldShapeMaterial_description": "nustato piešimo parinktis manifold geometrijai",
    "crossSectionColour": "pjūvio spalva",
    "crossSectionWidth": "pjūvio plotis",
    "crossSectionOpacity": "pjūvio skaidrumas",
    "computeNormals": "apskaičiuoti normalias",
    "bitbybit.draw.optionsBabylonNode": "babylon mazgo parinktys",
    "optionsBabylonNode": "babylon mazgo parinktys",
    "bitbybit.draw.optionsBabylonNode_description": "nustato piešimo parinktis babylon js mazgams",
    "colorX": "spalva x",
    "colorY": "spalva y",
    "colorZ": "spalva z",
    "bitbybit.babylon.mesh.dispose": "pašalinti tinklą",
    "babylon": "babylon",
    "mesh": "tinklas",
    "dispose": "pašalinti",
    "bitbybit.babylon.mesh.dispose_description": "pašalina nupieštą tinklą iš scenos",
    "memory": "atmintis",
    "BABYLON.Mesh": "babylon tinklas",
    "bitbybit.babylon.mesh.updateDrawn": "atnaujinti nupieštą",
    "updateDrawn": "atnaujinti nupieštą",
    "bitbybit.babylon.mesh.updateDrawn_description": "atnaujina babylon js tinklą jo nepašalinant",
    "updates": "atnaujinimai",
    "position": "pozicija",
    "Base.Point3": "bazinis taškas 3",
    "rotation": "sukimas",
    "Base.Vector3": "bazinis vektorius 3",
    "scaling": "mastelis",
    "bitbybit.babylon.mesh.setVisibility": "nustatyti matomumą",
    "setVisibility": "nustatyti matomumą",
    "bitbybit.babylon.mesh.setVisibility_description": "keičia babylon js tinklo matomumą",
    "visibility": "matomumas",
    "includeChildren": "įtraukti vaikus",
    "bitbybit.babylon.mesh.hide": "paslėpti",
    "hide": "paslėpti",
    "bitbybit.babylon.mesh.hide_description": "paslepia tinklą",
    "bitbybit.babylon.mesh.show": "parodyti",
    "show": "parodyti",
    "bitbybit.babylon.mesh.show_description": "parodo tinklą",
    "bitbybit.babylon.mesh.setParent": "nustatyti tėvą",
    "setParent": "nustatyti tėvą",
    "bitbybit.babylon.mesh.setParent_description": "keičia nupiešto tinklo tėvą",
    "set": "nustatyti",
    "BABYLON.Mesh | BABYLON.InstancedMesh | BABYLON.AbstractMesh": "babylon tinklas arba instancinis tinklas arba abstraktus tinklas",
    "parentMesh": "tėvo tinklas",
    "bitbybit.babylon.mesh.getParent": "gauti tėvą",
    "getParent": "gauti tėvą",
    "bitbybit.babylon.mesh.getParent_description": "gauna nupiešto tinklo tėvą",
    "get": "gauti",
    "bitbybit.babylon.mesh.setCheckCollisions": "nustatyti susidūrimų tikrinimą",
    "setCheckCollisions": "nustatyti susidūrimų tikrinimą",
    "bitbybit.babylon.mesh.setCheckCollisions_description": "keičia nupiešto tinklo susidūrimų tikrinimo savybę",
    "checkCollisions": "tikrinti susidūrimus",
    "bitbybit.babylon.mesh.getCheckCollisions": "gauti susidūrimų tikrinimą",
    "getCheckCollisions": "gauti susidūrimų tikrinimą",
    "bitbybit.babylon.mesh.getCheckCollisions_description": "gauna nupiešto tinklo susidūrimų tikrinimo savybę",
    "bitbybit.babylon.mesh.setPickable": "nustatyti pasirenkamumą",
    "setPickable": "nustatyti pasirenkamumą",
    "bitbybit.babylon.mesh.setPickable_description": "keičia nupiešto tinklo pasirenkamumo savybę",
    "pickable": "pasirenkamas",
    "bitbybit.babylon.mesh.enablePointerMoveEvents": "įjungti žymeklio judėjimo įvykius",
    "enablePointerMoveEvents": "įjungti žymeklio judėjimo įvykius",
    "bitbybit.babylon.mesh.enablePointerMoveEvents_description": "leidžia tinklą pasirinkti žymeklio judėjimo įvykiais, reikalauja daug išteklių",
    "bitbybit.babylon.mesh.disablePointerMoveEvents": "išjungti žymeklio judėjimo įvykius",
    "disablePointerMoveEvents": "išjungti žymeklio judėjimo įvykius",
    "bitbybit.babylon.mesh.disablePointerMoveEvents_description": "leidžia tinklui ignoruoti žymeklio judėjimo įvykius",
    "bitbybit.babylon.mesh.getPickable": "gauti pasirenkamumą",
    "getPickable": "gauti pasirenkamumą",
    "bitbybit.babylon.mesh.getPickable_description": "gauna nupiešto tinklo pasirenkamumo savybę",
    "bitbybit.babylon.mesh.getMeshesWhereNameContains": "gauti tinklus, kurių pavadinime yra",
    "getMeshesWhereNameContains": "gauti tinklus, kurių pavadinime yra",
    "bitbybit.babylon.mesh.getMeshesWhereNameContains_description": "gauna tinklus, kurių pavadinimuose yra nurodytas tekstas",
    "name": "pavadinimas",
    "string": "eilutė",
    "bitbybit.babylon.mesh.getChildMeshes": "gauti vaikų tinklus",
    "getChildMeshes": "gauti vaikų tinklus",
    "bitbybit.babylon.mesh.getChildMeshes_description": "gauna vaikų tinklus",
    "directDescendantsOnly": "tik tiesioginiai palikuonys",
    "bitbybit.babylon.mesh.getMeshesOfId": "gauti tinklus pagal id",
    "getMeshesOfId": "gauti tinklus pagal id",
    "bitbybit.babylon.mesh.getMeshesOfId_description": "gauna tinklus pagal id",
    "id": "id",
    "bitbybit.babylon.mesh.getMeshOfId": "gauti tinklą pagal id",
    "getMeshOfId": "gauti tinklą pagal id",
    "bitbybit.babylon.mesh.getMeshOfId_description": "gauna tinklą pagal id",
    "bitbybit.babylon.mesh.getMeshOfUniqueId": "gauti tinklą pagal unikalų id",
    "getMeshOfUniqueId": "gauti tinklą pagal unikalų id",
    "bitbybit.babylon.mesh.getMeshOfUniqueId_description": "gauna tinklą pagal unikalų id",
    "uniqueId": "unikalus id",
    "bitbybit.babylon.mesh.mergeMeshes": "sujungti tinklus",
    "mergeMeshes": "sujungti tinklus",
    "bitbybit.babylon.mesh.mergeMeshes_description": "sujungia kelis tinklus į vieną",
    "edit": "redaguoti",
    "arrayOfMeshes": "tinklų masyvas",
    "BABYLON.Mesh[]": "babylon tinklų masyvas",
    "disposeSource": "pašalinti šaltinį",
    "allow32BitsIndices": "leisti 32 bitų indeksus",
    "meshSubclass": "tinklo subklasė",
    "subdivideWithSubMeshes": "padalinti su sub-tinklais",
    "multiMultiMaterials": "daugkartinės medžiagos",
    "bitbybit.babylon.mesh.convertToFlatShadedMesh": "konvertuoti į plokščią tinklą",
    "convertToFlatShadedMesh": "konvertuoti į plokščią tinklą",
    "bitbybit.babylon.mesh.convertToFlatShadedMesh_description": "konvertuoja tinklą į plokščią tinklą",
    "bitbybit.babylon.mesh.clone": "klonuoti",
    "clone": "klonuoti",
    "bitbybit.babylon.mesh.clone_description": "klonuoja tinklą",
    "bitbybit.babylon.mesh.cloneToPositions": "klonuoti į pozicijas",
    "cloneToPositions": "klonuoti į pozicijas",
    "bitbybit.babylon.mesh.cloneToPositions_description": "klonuoja tinklą į kelias pozicijas",
    "positions": "pozicijos",
    "Base.Point3[]": "bazinių taškų masyvas",
    "bitbybit.babylon.mesh.setId": "nustatyti id",
    "setId": "nustatyti id",
    "bitbybit.babylon.mesh.setId_description": "keičia nupiešto tinklo id",
    "bitbybit.babylon.mesh.getId": "gauti id",
    "getId": "gauti id",
    "bitbybit.babylon.mesh.getId_description": "gauna nupiešto tinklo id",
    "bitbybit.babylon.mesh.getUniqueId": "gauti unikalų id",
    "getUniqueId": "gauti unikalų id",
    "bitbybit.babylon.mesh.getUniqueId_description": "gauna nupiešto tinklo unikalų id",
    "bitbybit.babylon.mesh.setName": "nustatyti pavadinimą",
    "setName": "nustatyti pavadinimą",
    "bitbybit.babylon.mesh.setName_description": "keičia nupiešto tinklo pavadinimą",
    "bitbybit.babylon.mesh.getVerticesAsPolygonPoints": "gauti viršūnes kaip daugiakampio taškus",
    "getVerticesAsPolygonPoints": "gauti viršūnes kaip daugiakampio taškus",
    "bitbybit.babylon.mesh.getVerticesAsPolygonPoints_description": "gauna viršūnes kaip daugiakampio taškus tinklo konstravimui, reikalinga trianguliacija",
    "bitbybit.babylon.mesh.getName": "gauti pavadinimą",
    "getName": "gauti pavadinimą",
    "bitbybit.babylon.mesh.getName_description": "gauna babylon tinklo pavadinimą",
    "bitbybit.babylon.mesh.setMaterial": "nustatyti medžiagą",
    "setMaterial": "nustatyti medžiagą",
    "bitbybit.babylon.mesh.setMaterial_description": "keičia nupiešto tinklo medžiagą",
    "material": "medžiaga",
    "BABYLON.Material": "babylon medžiaga",
    "bitbybit.babylon.mesh.getMaterial": "gauti medžiagą",
    "getMaterial": "gauti medžiagą",
    "bitbybit.babylon.mesh.getMaterial_description": "gauna babylon tinklo medžiagą",
    "bitbybit.babylon.mesh.getPosition": "gauti poziciją",
    "getPosition": "gauti poziciją",
    "bitbybit.babylon.mesh.getPosition_description": "gauna poziciją kaip tašką iš babylon js tinklo",
    "bitbybit.babylon.mesh.getAbsolutePosition": "gauti absoliučią poziciją",
    "getAbsolutePosition": "gauti absoliučią poziciją",
    "bitbybit.babylon.mesh.getAbsolutePosition_description": "gauna absoliučią poziciją pasaulyje kaip tašką iš babylon js tinklo",
    "bitbybit.babylon.mesh.getRotation": "gauti sukimą",
    "getRotation": "gauti sukimą",
    "bitbybit.babylon.mesh.getRotation_description": "gauna babylon js tinklo sukimo vektorių",
    "bitbybit.babylon.mesh.getScale": "gauti mastelį",
    "getScale": "gauti mastelį",
    "bitbybit.babylon.mesh.getScale_description": "gauna babylon js tinklo mastelio vektorių",
    "bitbybit.babylon.mesh.moveForward": "judėti pirmyn",
    "moveForward": "judėti pirmyn",
    "bitbybit.babylon.mesh.moveForward_description": "judina babylon js tinklą pirmyn vietinėje erdvėje",
    "move": "judėti",
    "distance": "atstumas",
    "bitbybit.babylon.mesh.moveBackward": "judėti atgal",
    "moveBackward": "judėti atgal",
    "bitbybit.babylon.mesh.moveBackward_description": "judina babylon js tinklą atgal vietinėje erdvėje",
    "bitbybit.babylon.mesh.moveUp": "judėti aukštyn",
    "moveUp": "judėti aukštyn",
    "bitbybit.babylon.mesh.moveUp_description": "judina babylon js tinklą aukštyn vietinėje erdvėje",
    "bitbybit.babylon.mesh.moveDown": "judėti žemyn",
    "moveDown": "judėti žemyn",
    "bitbybit.babylon.mesh.moveDown_description": "judina babylon js tinklą žemyn vietinėje erdvėje",
    "bitbybit.babylon.mesh.moveRight": "judėti dešinėn",
    "moveRight": "judėti dešinėn",
    "bitbybit.babylon.mesh.moveRight_description": "judina babylon js tinklą dešinėn vietinėje erdvėje",
    "bitbybit.babylon.mesh.moveLeft": "judėti kairėn",
    "moveLeft": "judėti kairėn",
    "bitbybit.babylon.mesh.moveLeft_description": "judina babylon js tinklą kairėn vietinėje erdvėje",
    "bitbybit.babylon.mesh.yaw": "pasukti aplink y ašį",
    "yaw": "pasukti aplink y ašį",
    "bitbybit.babylon.mesh.yaw_description": "suka babylon js tinklą aplink vietinę y ašį",
    "rotate": "sukti",
    "bitbybit.babylon.mesh.pitch": "pasukti aplink x ašį",
    "pitch": "pasukti aplink x ašį",
    "bitbybit.babylon.mesh.pitch_description": "suka babylon js tinklą aplink vietinę x ašį",
    "bitbybit.babylon.mesh.roll": "pasukti aplink z ašį",
    "roll": "pasukti aplink z ašį",
    "bitbybit.babylon.mesh.roll_description": "suka babylon js tinklą aplink vietinę z ašį",
    "bitbybit.babylon.mesh.rotateAroundAxisWithPosition": "sukti aplink ašį su pozicija",
    "rotateAroundAxisWithPosition": "sukti aplink ašį su pozicija",
    "bitbybit.babylon.mesh.rotateAroundAxisWithPosition_description": "suka tinklą aplink ašį ir poziciją pagal kampą",
    "axis": "ašis",
    "angle": "kampas",
    "bitbybit.babylon.mesh.setPosition": "nustatyti poziciją",
    "setPosition": "nustatyti poziciją",
    "bitbybit.babylon.mesh.setPosition_description": "atnaujina babylon js tinklo arba instancinio tinklo poziciją",
    "BABYLON.Mesh | BABYLON.InstancedMesh": "babylon tinklas arba instancinis tinklas",
    "bitbybit.babylon.mesh.setRotation": "nustatyti sukimą",
    "setRotation": "nustatyti sukimą",
    "bitbybit.babylon.mesh.setRotation_description": "atnaujina babylon js tinklo arba instancinio tinklo sukimą",
    "bitbybit.babylon.mesh.setScale": "nustatyti mastelį",
    "setScale": "nustatyti mastelį",
    "bitbybit.babylon.mesh.setScale_description": "atnaujina babylon js tinklo arba instancinio tinklo mastelį",
    "scale": "mastelis",
    "bitbybit.babylon.mesh.intersectsMesh": "kertasi su tinklu",
    "intersectsMesh": "kertasi su tinklu",
    "bitbybit.babylon.mesh.intersectsMesh_description": "tikrina, ar tinklas kertasi su kitu tinklu",
    "intersects": "kertasi",
    "babylonMesh2": "babylon tinklas 2",
    "precise": "tikslus",
    "includeDescendants": "įtraukti palikuonis",
    "bitbybit.babylon.mesh.intersectsPoint": "kertasi su tašku",
    "intersectsPoint": "kertasi su tašku",
    "bitbybit.babylon.mesh.intersectsPoint_description": "tikrina, ar tinklas kertasi su tašku",
    "point": "taškas",
    "bitbybit.babylon.mesh.createMeshInstanceAndTransformNoReturn": "tinklo instancija ir transformuoti be grąžinimo",
    "createMeshInstanceAndTransformNoReturn": "tinklo instancija ir transformuoti be grąžinimo",
    "bitbybit.babylon.mesh.createMeshInstanceAndTransformNoReturn_description": "sukuria tinklo instanciją su vaikais optimizuotam atvaizdavimui, be grąžinimo",
    "instance": "instancija",
    "bitbybit.babylon.mesh.createMeshInstanceAndTransform": "tinklo instancija ir transformuoti",
    "createMeshInstanceAndTransform": "tinklo instancija ir transformuoti",
    "bitbybit.babylon.mesh.createMeshInstanceAndTransform_description": "sukuria tinklo instanciją su vaikais optimizuotam atvaizdavimui, grąžina tinklą",
    "bitbybit.babylon.mesh.createMeshInstance": "tinklo instancija",
    "createMeshInstance": "tinklo instancija",
    "bitbybit.babylon.mesh.createMeshInstance_description": "sukuria tinklo instanciją optimizuotam atvaizdavimui su vaikais",
    "bitbybit.babylon.gaussianSplatting.create": "gaussian splatting",
    "gaussianSplatting": "gaussian splatting",
    "create": "sukurti",
    "bitbybit.babylon.gaussianSplatting.create_description": "sukuria gaussian splatting tinklą",
    "url": "url",
    "bitbybit.babylon.gaussianSplatting.clone": "klonuoti gaussian splatting",
    "bitbybit.babylon.gaussianSplatting.clone_description": "klonuoja gaussian splatting tinklą",
    "multiply": "dauginti",
    "BABYLON.GaussianSplattingMesh": "babylon gaussian splatting tinklas",
    "bitbybit.babylon.gaussianSplatting.getSplatPositions": "gauti splat pozicijas",
    "getSplatPositions": "gauti splat pozicijas",
    "bitbybit.babylon.gaussianSplatting.getSplatPositions_description": "gauna gaussian splatting tinklo splat pozicijas",
    "bitbybit.babylon.camera.freezeProjectionMatrix": "užšaldyti projekcijos matricą",
    "camera": "kamera",
    "freezeProjectionMatrix": "užšaldyti projekcijos matricą",
    "bitbybit.babylon.camera.freezeProjectionMatrix_description": "užšaldo kameros projekcijos matricą",
    "adjust": "reguliuoti",
    "BABYLON.Camera": "babylon kamera",
    "bitbybit.babylon.camera.unfreezeProjectionMatrix": "atšildyti projekcijos matricą",
    "unfreezeProjectionMatrix": "atšildyti projekcijos matricą",
    "bitbybit.babylon.camera.unfreezeProjectionMatrix_description": "atšildo kameros projekcijos matricą",
    "bitbybit.babylon.camera.setPosition": "nustatyti poziciją",
    "bitbybit.babylon.camera.setPosition_description": "pakeičia kameros poziciją",
    "BABYLON.TargetCamera": "babylon taikinio kamera",
    "bitbybit.babylon.camera.getPosition": "gauti poziciją",
    "bitbybit.babylon.camera.getPosition_description": "gauna kameros poziciją",
    "bitbybit.babylon.camera.setTarget": "nustatyti taikinį",
    "setTarget": "nustatyti taikinį",
    "bitbybit.babylon.camera.setTarget_description": "pakeičia kameros taikinį",
    "target": "taikinys",
    "bitbybit.babylon.camera.getTarget": "gauti taikinį",
    "getTarget": "gauti taikinį",
    "bitbybit.babylon.camera.getTarget_description": "gauna kameros taikinį",
    "bitbybit.babylon.camera.setSpeed": "nustatyti greitį",
    "setSpeed": "nustatyti greitį",
    "bitbybit.babylon.camera.setSpeed_description": "pakeičia kameros greitį",
    "speed": "greitis",
    "bitbybit.babylon.camera.getSpeed": "gauti greitį",
    "getSpeed": "gauti greitį",
    "bitbybit.babylon.camera.getSpeed_description": "gauna kameros greitį",
    "bitbybit.babylon.camera.setMinZ": "nustatyti min z",
    "setMinZ": "nustatyti min z",
    "bitbybit.babylon.camera.setMinZ_description": "pakeičia kameros min z",
    "minZ": "min z",
    "bitbybit.babylon.camera.setMaxZ": "nustatyti max z",
    "setMaxZ": "nustatyti max z",
    "bitbybit.babylon.camera.setMaxZ_description": "pakeičia kameros max z",
    "maxZ": "max z",
    "bitbybit.babylon.camera.makeCameraOrthographic": "padaryti kamerą ortografine",
    "makeCameraOrthographic": "padaryti kamerą ortografine",
    "bitbybit.babylon.camera.makeCameraOrthographic_description": "nustato kamerą į ortografinį režimą",
    "orthoLeft": "ortho kairė",
    "orthoRight": "ortho dešinė",
    "orthoBottom": "ortho apačia",
    "orthoTop": "ortho viršus",
    "bitbybit.babylon.camera.makeCameraPerspective": "padaryti kamerą perspektyvine",
    "makeCameraPerspective": "padaryti kamerą perspektyvine",
    "bitbybit.babylon.camera.makeCameraPerspective_description": "nustato kamerą į perspektyvinį režimą",
    "bitbybit.babylon.camera.free.create": "laisva kamera",
    "free": "laisva",
    "bitbybit.babylon.camera.free.create_description": "sukuria laisvą kamerą",
    "bitbybit.babylon.camera.arcRotate.create": "lanko sukimosi kamera",
    "arcRotate": "lanko sukimas",
    "bitbybit.babylon.camera.arcRotate.create_description": "sukuria kamerą, kuri sukasi aplink taikinį lanko trajektorija, numatytoji bitbybit",
    "radius": "spindulys",
    "alpha": "alfa",
    "beta": "beta",
    "lowerRadiusLimit": "apatinė spindulio riba",
    "upperRadiusLimit": "viršutinė spindulio riba",
    "lowerAlphaLimit": "apatinė alfa riba",
    "upperAlphaLimit": "viršutinė alfa riba",
    "lowerBetaLimit": "apatinė beta riba",
    "upperBetaLimit": "viršutinė beta riba",
    "angularSensibilityX": "kampinė jautrumo x",
    "angularSensibilityY": "kampinė jautrumo y",
    "panningSensibility": "panoraminio jautrumo",
    "wheelPrecision": "ratuko tikslumas",
    "bitbybit.babylon.camera.target.create": "taikinio kamera",
    "bitbybit.babylon.camera.target.create_description": "sukuria taikinio kamerą",
    "bitbybit.babylon.webXr.simple.createImmersiveARExperience": "AR patyrimas",
    "webXr": "web xr",
    "simple": "paprastas",
    "createImmersiveARExperience": "AR patyrimas",
    "bitbybit.babylon.webXr.simple.createImmersiveARExperience_description": "sukuria numatytą xr patyrimą įtraukiančiame ar režime",
    "scene": "scena",
    "bitbybit.babylon.webXr.simple.createDefaultXRExperienceWithTeleportation": "numatytas XR patyrimas su teleportacija",
    "createDefaultXRExperienceWithTeleportation": "numatytas XR patyrimas su teleportacija",
    "bitbybit.babylon.webXr.simple.createDefaultXRExperienceWithTeleportation_description": "sukuria pagrindinį XR patyrimą su teleportacija",
    "groundMeshes": "žemės tinklai",
    "bitbybit.babylon.webXr.simple.createDefaultXRExperienceWithTeleportationReturn": "numatytas XR patyrimas su teleportacija ir grąžinimu",
    "createDefaultXRExperienceWithTeleportationReturn": "numatytą xr patyrimą su teleportacija ir grąžinimu",
    "bitbybit.babylon.webXr.simple.createDefaultXRExperienceWithTeleportationReturn_description": "sukuria pagrindinį xr patyrimą su teleportacija, grąžina rezultatą",
    "bitbybit.babylon.node.drawNode": "nupiešti mazgą",
    "node": "mazgas",
    "drawNode": "nupiešti mazgą",
    "bitbybit.babylon.node.drawNode_description": "nupiešia mazgą su dydžiu ir ašių spalvomis",
    "BABYLON.TransformNode": "babylon transformacijos mazgas",
    "bitbybit.babylon.node.drawNodes": "nupiešti mazgus",
    "drawNodes": "nupiešti mazgus",
    "bitbybit.babylon.node.drawNodes_description": "nupiešia kelis mazgus su dydžiu ir ašių spalvomis",
    "nodes": "mazgai",
    "BABYLON.TransformNode[]": "babylon transformacijos mazgų masyvas",
    "bitbybit.babylon.node.createNodeFromRotation": "mazgas iš sukimų",
    "createNodeFromRotation": "mazgas iš sukimų",
    "bitbybit.babylon.node.createNodeFromRotation_description": "sukuria mazgą pradžios taške su sukimais tėvo erdvėje",
    "parent": "tėvas",
    "BABYLON.TransformNode | null": "babylon transformacijos mazgas arba null",
    "origin": "pradžia",
    "bitbybit.babylon.node.createWorldNode": "pasaulio mazgas",
    "createWorldNode": "pasaulio mazgas",
    "bitbybit.babylon.node.createWorldNode_description": "sukuria mazgą su šaknimi kaip tėvu",
    "bitbybit.babylon.node.getAbsoluteForwardVector": "gauti absoliutų pirmyn vektorių",
    "getAbsoluteForwardVector": "gauti absoliutų pirmyn vektorių",
    "bitbybit.babylon.node.getAbsoluteForwardVector_description": "gauna absoliutų pirmyn vektorių pasaulio erdvėje",
    "bitbybit.babylon.node.getAbsoluteRightVector": "gauti absoliutų dešinį vektorių",
    "getAbsoluteRightVector": "gauti absoliutų dešinį vektorių",
    "bitbybit.babylon.node.getAbsoluteRightVector_description": "gauna absoliutų dešinį vektorių pasaulio erdvėje",
    "bitbybit.babylon.node.getAbsoluteUpVector": "gauti absoliutų aukštyn vektorių",
    "getAbsoluteUpVector": "gauti absoliutų aukštyn vektorių",
    "bitbybit.babylon.node.getAbsoluteUpVector_description": "gauna absoliutų aukštyn vektorių pasaulio erdvėje",
    "bitbybit.babylon.node.getAbsolutePosition": "gauti absoliučią poziciją",
    "bitbybit.babylon.node.getAbsolutePosition_description": "gauna mazgo absoliučią poziciją pasaulio erdvėje",
    "bitbybit.babylon.node.getAbsoluteRotationTransformation": "gauti absoliučią sukimų transformaciją",
    "getAbsoluteRotationTransformation": "gauti absoliučią sukimų transformaciją",
    "bitbybit.babylon.node.getAbsoluteRotationTransformation_description": "gauna absoliučius sukimus kaip transformacijos matricą (16 skaičių)",
    "bitbybit.babylon.node.getRotationTransformation": "gauti sukimų transformaciją",
    "getRotationTransformation": "gauti sukimų transformaciją",
    "bitbybit.babylon.node.getRotationTransformation_description": "gauna vietinius sukimus kaip transformacijos matricą (16 skaičių)",
    "bitbybit.babylon.node.getChildren": "gauti vaikus",
    "getChildren": "gauti vaikus",
    "bitbybit.babylon.node.getChildren_description": "gauna mazgo vaikus",
    "bitbybit.babylon.node.getParent": "gauti tėvą",
    "bitbybit.babylon.node.getParent_description": "gauna mazgo tėvą",
    "bitbybit.babylon.node.getPositionExpressedInLocalSpace": "gauti poziciją vietinėje erdvėje",
    "getPositionExpressedInLocalSpace": "gauti poziciją vietinėje erdvėje",
    "bitbybit.babylon.node.getPositionExpressedInLocalSpace_description": "gauna mazgo poziciją vietinėje erdvėje",
    "bitbybit.babylon.node.getRootNode": "gauti šaknies mazgą",
    "getRootNode": "gauti šaknies mazgą",
    "bitbybit.babylon.node.getRootNode_description": "gauna šaknies mazgą",
    "bitbybit.babylon.node.getRotation": "gauti sukimus",
    "bitbybit.babylon.node.getRotation_description": "gauna mazgo eulerio sukimus",
    "bitbybit.babylon.node.rotateAroundAxisWithPosition": "sukti aplink ašį su pozicija",
    "bitbybit.babylon.node.rotateAroundAxisWithPosition_description": "suka mazgą aplink ašį ir poziciją pagal kampą",
    "bitbybit.babylon.node.rotate": "sukti",
    "bitbybit.babylon.node.rotate_description": "suka mazgą aplink pradžią ir ašį",
    "bitbybit.babylon.node.setAbsolutePosition": "nustatyti absoliučią poziciją",
    "setAbsolutePosition": "nustatyti absoliučią poziciją",
    "bitbybit.babylon.node.setAbsolutePosition_description": "nustato mazgo absoliučią poziciją",
    "bitbybit.babylon.node.setDirection": "nustatyti kryptį",
    "setDirection": "nustatyti kryptį",
    "bitbybit.babylon.node.setDirection_description": "nustato mazgo kryptį",
    "direction": "kryptis",
    "number[]": "skaičių masyvas",
    "bitbybit.babylon.node.setParent": "nustatyti tėvą",
    "bitbybit.babylon.node.setParent_description": "nustato naują mazgo tėvą",
    "parentNode": "tėvo mazgas",
    "bitbybit.babylon.node.translate": "perkelti",
    "translate": "perkelti",
    "bitbybit.babylon.node.translate_description": "perkelia mazgą pagal krypties vektorių ir atstumą",
    "bitbybit.babylon.scene.backgroundColour": "foninė spalva",
    "backgroundColour": "foninė spalva",
    "bitbybit.babylon.scene.backgroundColour_description": "pakeičia scenos foninę spalvą 3D erdvėje",
    "environment": "aplinka",
    "colour": "spalva",
    "bitbybit.babylon.scene.activateCamera": "aktyvuoti kamerą",
    "activateCamera": "aktyvuoti kamerą",
    "bitbybit.babylon.scene.activateCamera_description": "nustato kamerą kaip aktyvią, pakeičiant dabartinę",
    "bitbybit.babylon.scene.useRightHandedSystem": "naudoti dešiniarankę sistemą",
    "useRightHandedSystem": "naudoti dešiniarankę sistemą",
    "bitbybit.babylon.scene.useRightHandedSystem_description": "perjungia į dešiniarankę koordinačių sistemą",
    "system": "sistema",
    "use": "naudoti",
    "bitbybit.babylon.scene.drawPointLightNoReturn": "nupiešti taškinį šviesos šaltinį be grąžinimo",
    "drawPointLightNoReturn": "nupiešti taškinį šviesos šaltinį be grąžinimo",
    "bitbybit.babylon.scene.drawPointLightNoReturn_description": "prideda taškinį šviesos šaltinį į sceną, be išvesties",
    "lights": "šviesos",
    "intensity": "intensyvumas",
    "diffuse": "difuzija",
    "specular": "speculiacija",
    "shadowGeneratorMapSize": "šešėlio generatoriaus žemėlapio dydis",
    "enableShadows": "įjungti šešėlius",
    "shadowDarkness": "šešėlio tamsumas",
    "shadowUsePercentageCloserFiltering": "šešėlio procentinio artumo filtravimas",
    "shadowContactHardeningLightSizeUVRatio": "šešėlio kontaktinio kietėjimo šviesos dydžio UV santykis",
    "shadowBias": "šešėlio poslinkis",
    "shadowNormalBias": "šešėlio normalės poslinkis",
    "shadowMaxZ": "maksimalus šešėlio Z",
    "shadowMinZ": "minimalus šešėlio Z",
    "bitbybit.babylon.scene.getShadowGenerators": "gauti šešėlių generatorius",
    "getShadowGenerators": "gauti šešėlių generatorius",
    "bitbybit.babylon.scene.getShadowGenerators_description": "gauna šešėlių generatorius iš bitbybit šviesų",
    "bitbybit.babylon.scene.drawPointLight": "nupiešti taškinę šviesą",
    "drawPointLight": "nupiešti taškinę šviesą",
    "bitbybit.babylon.scene.drawPointLight_description": "prideda taškinę šviesą į sceną",
    "bitbybit.babylon.scene.drawDirectionalLightNoReturn": "nupiešti kryptinę šviesą be grąžinimo",
    "drawDirectionalLightNoReturn": "nupiešti kryptinę šviesą be grąžinimo",
    "bitbybit.babylon.scene.drawDirectionalLightNoReturn_description": "prideda kryptinę šviesą į sceną, be išvesties",
    "bitbybit.babylon.scene.drawDirectionalLight": "nupiešti kryptinę šviesą",
    "drawDirectionalLight": "nupiešti kryptinę šviesą",
    "bitbybit.babylon.scene.drawDirectionalLight_description": "prideda kryptinę šviesą į sceną",
    "bitbybit.babylon.scene.getActiveCamera": "gauti aktyvią kamerą",
    "getActiveCamera": "gauti aktyvią kamerą",
    "bitbybit.babylon.scene.getActiveCamera_description": "gauna dabartinę aktyvią kamerą scenoje",
    "bitbybit.babylon.scene.adjustActiveArcRotateCamera": "reguliuoti aktyvią arc rotate kamerą",
    "adjustActiveArcRotateCamera": "reguliuoti aktyvią arc rotate kamerą",
    "bitbybit.babylon.scene.adjustActiveArcRotateCamera_description": "nustato aktyvios arc rotate kameros parametrus",
    "lookAt": "žiūrėti į",
    "bitbybit.babylon.scene.clearAllDrawn": "išvalyti viską, kas nupiešta",
    "clearAllDrawn": "išvalyti viską, kas nupiešta",
    "bitbybit.babylon.scene.clearAllDrawn_description": "pašalina visus nupieštus objektus iš 3D scenos",
    "bitbybit.babylon.scene.enableSkybox": "įjungti dangaus dėžę",
    "enableSkybox": "įjungti dangaus dėžę",
    "bitbybit.babylon.scene.enableSkybox_description": "įjungia dangaus dėžę scenoje",
    "skybox": "dangaus dėžė",
    "Base.skyboxEnum": "bazinis dangaus dėžės enumas",
    "blur": "išsiliejimas",
    "environmentIntensity": "aplinkos intensyvumas",
    "bitbybit.babylon.scene.fog": "rūkas",
    "fog": "rūkas",
    "bitbybit.babylon.scene.fog_description": "įjungia rūko režimą scenoje",
    "mode": "režimas",
    "Base.fogModeEnum": "bazinis rūko režimo enumas",
    "color": "spalva",
    "density": "tankis",
    "start": "pradžia",
    "end": "pabaiga",
    "bitbybit.babylon.transforms.rotationCenterAxis": "sukimosi centras ir ašis",
    "transforms": "transformacijos",
    "rotationCenterAxis": "sukimosi centras ir ašis",
    "bitbybit.babylon.transforms.rotationCenterAxis_description": "sukuria sukimosi transformaciją aplink centrą ir ašį",
    "center": "centras",
    "bitbybit.babylon.transforms.rotationCenterX": "sukimosi centras x",
    "rotationCenterX": "sukimosi centras x",
    "bitbybit.babylon.transforms.rotationCenterX_description": "sukuria sukimosi transformaciją aplink centrą ir x ašį",
    "bitbybit.babylon.transforms.rotationCenterY": "sukimosi centras y",
    "rotationCenterY": "sukimosi centras y",
    "bitbybit.babylon.transforms.rotationCenterY_description": "sukuria sukimosi transformaciją aplink centrą ir y ašį",
    "bitbybit.babylon.transforms.rotationCenterZ": "sukimosi centras z",
    "rotationCenterZ": "sukimosi centras z",
    "bitbybit.babylon.transforms.rotationCenterZ_description": "sukuria sukimosi transformaciją aplink centrą ir z ašį",
    "bitbybit.babylon.transforms.rotationCenterYawPitchRoll": "sukimosi centras yaw pitch roll",
    "rotationCenterYawPitchRoll": "sukimosi centras yaw pitch roll",
    "bitbybit.babylon.transforms.rotationCenterYawPitchRoll_description": "sukuria sukimosi transformaciją su yaw pitch roll",
    "bitbybit.babylon.transforms.scaleCenterXYZ": "mastelio centras xyz",
    "scaleCenterXYZ": "mastelio centras xyz",
    "bitbybit.babylon.transforms.scaleCenterXYZ_description": "sukuria mastelio transformaciją aplink centrą xyz kryptimis",
    "scaleXyz": "mastelis xyz",
    "bitbybit.babylon.transforms.scaleXYZ": "mastelis xyz",
    "scaleXYZ": "mastelis xyz",
    "bitbybit.babylon.transforms.scaleXYZ_description": "sukuria mastelio transformaciją x, y, z kryptimis",
    "bitbybit.babylon.transforms.uniformScale": "vienodas mastelis",
    "uniformScale": "vienodas mastelis",
    "bitbybit.babylon.transforms.uniformScale_description": "sukuria vienodą mastelio transformaciją",
    "bitbybit.babylon.transforms.uniformScaleFromCenter": "vienodas mastelis nuo centro",
    "uniformScaleFromCenter": "vienodas mastelis nuo centro",
    "bitbybit.babylon.transforms.uniformScaleFromCenter_description": "sukuria vienodą mastelio transformaciją nuo centro",
    "bitbybit.babylon.transforms.translationXYZ": "transliacija xyz",
    "translationXYZ": "transliacija xyz",
    "bitbybit.babylon.transforms.translationXYZ_description": "sukuria transliacijos transformaciją",
    "translation": "transliacija",
    "bitbybit.babylon.transforms.translationsXYZ": "transliacijos xyz",
    "translationsXYZ": "transliacijos xyz",
    "bitbybit.babylon.transforms.translationsXYZ_description": "sukuria kelias transliacijos transformacijas",
    "translations": "transliacijos",
    "Base.Vector3[]": "bazinis vektorius 3 masyvas",
    "bitbybit.babylon.io.loadAssetIntoScene": "įkelti turtą į sceną",
    "io": "įvestis/išvestis",
    "loadAssetIntoScene": "įkelti turtą į sceną",
    "bitbybit.babylon.io.loadAssetIntoScene_description": "importuoja tinklelį iš įkelto projekto turto",
    "load": "įkelti",
    "assetFile": "turto failas",
    "File": "failas",
    "bitbybit.babylon.io.loadAssetIntoSceneNoReturn": "įkelti turtą į sceną be grąžinimo",
    "loadAssetIntoSceneNoReturn": "įkelti turtą į sceną be grąžinimo",
    "bitbybit.babylon.io.loadAssetIntoSceneNoReturn_description": "importuoja tinklelį iš įkelto projekto turto, be išvesties",
    "bitbybit.babylon.io.loadAssetIntoSceneFromRootUrl": "įkelti turtą į sceną iš pagrindinio url",
    "loadAssetIntoSceneFromRootUrl": "įkelti turtą į sceną iš pagrindinio url",
    "bitbybit.babylon.io.loadAssetIntoSceneFromRootUrl_description": "importuoja tinklelį iš viešo interneto url, reikalingas cors",
    "rootUrl": "pagrindinis url",
    "bitbybit.babylon.io.loadAssetIntoSceneFromRootUrlNoReturn": "įkelti turtą į sceną iš pagrindinio url be grąžinimo",
    "loadAssetIntoSceneFromRootUrlNoReturn": "įkelti turtą į sceną iš pagrindinio url be grąžinimo",
    "bitbybit.babylon.io.loadAssetIntoSceneFromRootUrlNoReturn_description": "importuoja tinklelį iš viešo interneto url, be išvesties, reikalingas cors",
    "bitbybit.babylon.io.exportBabylon": "eksportuoti babylon",
    "exportBabylon": "eksportuoti babylon",
    "bitbybit.babylon.io.exportBabylon_description": "eksportuoja sceną į .babylon formatą redagavimui",
    "export": "eksportuoti",
    "fileName": "failo pavadinimas",
    "bitbybit.babylon.io.exportGLB": "eksportuoti glb",
    "exportGLB": "eksportuoti glb",
    "bitbybit.babylon.io.exportGLB_description": "eksportuoja sceną į .glb formatą, interneto standartas",
    "discardSkyboxAndGrid": "atsisakyti dangaus dėžės ir tinklelio",
    "bitbybit.babylon.io.exportMeshToStl": "eksportuoti tinklelį į stl",
    "exportMeshToStl": "eksportuoti tinklelį į stl",
    "bitbybit.babylon.io.exportMeshToStl_description": "eksportuoja tinklelį ir jo vaikus į stl",
    "bitbybit.babylon.io.exportMeshesToStl": "eksportuoti tinklelius į stl",
    "exportMeshesToStl": "eksportuoti tinklelius į stl",
    "bitbybit.babylon.io.exportMeshesToStl_description": "eksportuoja kelis tinklelius į stl",
    "meshes": "tinkleliai",
    "bitbybit.babylon.ray.createPickingRay": "pasirinkimo spindulys",
    "ray": "spindulys",
    "createPickingRay": "pasirinkimo spindulys",
    "bitbybit.babylon.ray.createPickingRay_description": "sukuria pasirinkimo spindulį iš pelės pozicijos aktyvioje kameroje",
    "bitbybit.babylon.ray.createRay": "spindulys",
    "createRay": "spindulys",
    "bitbybit.babylon.ray.createRay_description": "sukuria spindulį iš pradžios taško su kryptimi ir pasirinktu ilgiu",
    "length": "ilgis",
    "bitbybit.babylon.ray.createRayFromTo": "spindulys nuo iki",
    "createRayFromTo": "spindulys nuo iki",
    "bitbybit.babylon.ray.createRayFromTo_description": "sukuria spindulį tarp dviejų taškų",
    "from": "nuo",
    "to": "iki",
    "bitbybit.babylon.ray.getOrigin": "gauti pradžią",
    "getOrigin": "gauti pradžią",
    "bitbybit.babylon.ray.getOrigin_description": "gauna spindulio pradžios tašką",
    "BABYLON.Ray": "babylon spindulys",
    "bitbybit.babylon.ray.getDirection": "gauti kryptį",
    "getDirection": "gauti kryptį",
    "bitbybit.babylon.ray.getDirection_description": "gauna spindulio kryptį",
    "bitbybit.babylon.ray.getLength": "gauti ilgį",
    "getLength": "gauti ilgį",
    "bitbybit.babylon.ray.getLength_description": "gauna spindulio ilgį",
    "bitbybit.babylon.pick.pickWithRay": "pasirinkti su spinduliu",
    "pick": "pasirinkti",
    "pickWithRay": "pasirinkti su spinduliu",
    "bitbybit.babylon.pick.pickWithRay_description": "gauna pataikymo rezultatą iš spindulio pasirinkimo",
    "bitbybit.babylon.pick.pickWithPickingRay": "pasirinkti su pasirinkimo spinduliu",
    "pickWithPickingRay": "pasirinkti su pasirinkimo spinduliu",
    "bitbybit.babylon.pick.pickWithPickingRay_description": "pasirenka su spinduliu iš pelės pozicijos aktyvioje kameroje",
    "bitbybit.babylon.pick.getDistance": "gauti atstumą",
    "getDistance": "gauti atstumą",
    "bitbybit.babylon.pick.getDistance_description": "gauna atstumą iki objekto, jei pasirinktas",
    "get from pick info": "gauti iš pasirinkimo informacijos",
    "pickInfo": "pasirinkimo informacija",
    "BABYLON.PickingInfo": "babylon pasirinkimo informacija",
    "bitbybit.babylon.pick.getPickedMesh": "gauti pasirinktą tinklelį",
    "getPickedMesh": "gauti pasirinktą tinklelį",
    "bitbybit.babylon.pick.getPickedMesh_description": "gauna tinklelį, kuris buvo pasirinktas",
    "bitbybit.babylon.pick.getPickedPoint": "gauti pasirinktą tašką",
    "getPickedPoint": "gauti pasirinktą tašką",
    "bitbybit.babylon.pick.getPickedPoint_description": "gauna tašką, kuris buvo pasirinktas",
    "bitbybit.babylon.pick.hit": "pataikyti",
    "hit": "pataikyti",
    "bitbybit.babylon.pick.hit_description": "patikrina, ar spindulys pataikė į ką nors scenoje",
    "bitbybit.babylon.pick.getSubMeshId": "gauti sub-tinklelio id",
    "getSubMeshId": "gauti sub-tinklelio id",
    "bitbybit.babylon.pick.getSubMeshId_description": "gauna unikalų sub-tinklelio id, jei pasirinktas",
    "bitbybit.babylon.pick.getSubMeshFaceId": "gauti sub-tinklelio veido id",
    "getSubMeshFaceId": "gauti sub-tinklelio veido id",
    "bitbybit.babylon.pick.getSubMeshFaceId_description": "gauna unikalų sub-tinklelio veido id, jei pasirinktas",
    "bitbybit.babylon.pick.getBU": "gauti bu",
    "getBU": "gauti bu",
    "bitbybit.babylon.pick.getBU_description": "gauna barycentrinį u tekstūros susidūrimui",
    "bitbybit.babylon.pick.getBV": "gauti bv",
    "getBV": "gauti bv",
    "bitbybit.babylon.pick.getBV_description": "gauna tekstūros susidūrimo barycentrinį v",
    "bitbybit.babylon.pick.getPickedSprite": "gauti pasirinktą sprite",
    "getPickedSprite": "gauti pasirinktą sprite",
    "bitbybit.babylon.pick.getPickedSprite_description": "gauna pasirinktą sprite",
    "bitbybit.babylon.material.pbrMetallicRoughness.create": "pbr metallic roughness",
    "pbrMetallicRoughness": "pbr metallic roughness",
    "bitbybit.babylon.material.pbrMetallicRoughness.create_description": "sukuria pbr metallic roughness medžiagą",
    "baseColor": "pagrindinė spalva",
    "emissiveColor": "emisinė spalva",
    "metallic": "metalinis",
    "roughness": "šiurkštumas",
    "zOffset": "z poslinkis",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBaseColor": "nustatyti pagrindinę spalvą",
    "setBaseColor": "nustatyti pagrindinę spalvą",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBaseColor_description": "nustato medžiagos pagrindinę spalvą",
    "BABYLON.PBRMetallicRoughnessMaterial": "babylon pbr metallic roughness medžiaga",
    "bitbybit.babylon.material.pbrMetallicRoughness.setMetallic": "nustatyti metalinį",
    "setMetallic": "nustatyti metalinį",
    "bitbybit.babylon.material.pbrMetallicRoughness.setMetallic_description": "nustato medžiagos metalinę savybę",
    "bitbybit.babylon.material.pbrMetallicRoughness.setRoughness": "nustatyti šiurkštumą",
    "setRoughness": "nustatyti šiurkštumą",
    "bitbybit.babylon.material.pbrMetallicRoughness.setRoughness_description": "nustato medžiagos šiurkštumą",
    "bitbybit.babylon.material.pbrMetallicRoughness.setAlpha": "nustatyti alfa",
    "setAlpha": "nustatyti alfa",
    "bitbybit.babylon.material.pbrMetallicRoughness.setAlpha_description": "nustato medžiagos alfa",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBackFaceCulling": "nustatyti galinio paviršiaus pašalinimą",
    "setBackFaceCulling": "nustatyti galinio paviršiaus pašalinimą",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBackFaceCulling_description": "nustato medžiagos galinio paviršiaus pašalinimą",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBaseTexture": "nustatyti pagrindinę tekstūrą",
    "setBaseTexture": "nustatyti pagrindinę tekstūrą",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBaseTexture_description": "nustato medžiagos tekstūrą",
    "baseTexture": "pagrindinė tekstūra",
    "BABYLON.Texture": "babylon tekstūra",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBaseColor": "gauti pagrindinę spalvą",
    "getBaseColor": "gauti pagrindinę spalvą",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBaseColor_description": "gauna medžiagos pagrindinę spalvą",
    "bitbybit.babylon.material.pbrMetallicRoughness.getMetallic": "gauti metalinį",
    "getMetallic": "gauti metalinį",
    "bitbybit.babylon.material.pbrMetallicRoughness.getMetallic_description": "gauna medžiagos metalinę savybę",
    "bitbybit.babylon.material.pbrMetallicRoughness.getRoughness": "gauti šiurkštumą",
    "getRoughness": "gauti šiurkštumą",
    "bitbybit.babylon.material.pbrMetallicRoughness.getRoughness_description": "gauna medžiagos šiurkštumą",
    "bitbybit.babylon.material.pbrMetallicRoughness.getAlpha": "gauti alfa",
    "getAlpha": "gauti alfa",
    "bitbybit.babylon.material.pbrMetallicRoughness.getAlpha_description": "gauna medžiagos alfa",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBackFaceCulling": "gauti galinio paviršiaus pašalinimą",
    "getBackFaceCulling": "gauti galinio paviršiaus pašalinimą",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBackFaceCulling_description": "gauna medžiagos galinio paviršiaus pašalinimą",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBaseTexture": "gauti pagrindinę tekstūrą",
    "getBaseTexture": "gauti pagrindinę tekstūrą",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBaseTexture_description": "gauna medžiagos pagrindinę tekstūrą",
    "bitbybit.babylon.material.skyMaterial.create": "dangaus medžiaga",
    "skyMaterial": "dangaus medžiaga",
    "bitbybit.babylon.material.skyMaterial.create_description": "sukuria dangaus medžiagą",
    "luminance": "šviesumas",
    "turbidity": "drumstumas",
    "rayleigh": "rayleigh",
    "mieCoefficient": "mie koeficientas",
    "mieDirectionalG": "mie kryptinis g",
    "inclination": "polinkis",
    "azimuth": "azimutas",
    "sunPosition": "saulės padėtis",
    "useSunPosition": "naudoti saulės padėtį",
    "cameraOffset": "kameros poslinkis",
    "up": "aukštyn",
    "dithering": "dithering",
    "bitbybit.babylon.material.skyMaterial.setLuminance": "nustatyti šviesumą",
    "setLuminance": "nustatyti šviesumą",
    "bitbybit.babylon.material.skyMaterial.setLuminance_description": "nustato sky material šviesumą",
    "MATERIALS.SkyMaterial": "materials sky material",
    "bitbybit.babylon.material.skyMaterial.setTurbidity": "nustatyti drumstumą",
    "setTurbidity": "nustatyti drumstumą",
    "bitbybit.babylon.material.skyMaterial.setTurbidity_description": "nustato sky material drumstumą",
    "bitbybit.babylon.material.skyMaterial.setRayleigh": "nustatyti rayleigh",
    "setRayleigh": "nustatyti rayleigh",
    "bitbybit.babylon.material.skyMaterial.setRayleigh_description": "nustato sky material rayleigh",
    "bitbybit.babylon.material.skyMaterial.setMieCoefficient": "nustatyti mie koeficientą",
    "setMieCoefficient": "nustatyti mie koeficientą",
    "bitbybit.babylon.material.skyMaterial.setMieCoefficient_description": "nustato sky material mie koeficientą",
    "bitbybit.babylon.material.skyMaterial.setMieDirectionalG": "nustatyti mie kryptinį g",
    "setMieDirectionalG": "nustatyti mie kryptinį g",
    "bitbybit.babylon.material.skyMaterial.setMieDirectionalG_description": "nustato sky material mie kryptinį g",
    "bitbybit.babylon.material.skyMaterial.setDistance": "nustatyti atstumą",
    "setDistance": "nustatyti atstumą",
    "bitbybit.babylon.material.skyMaterial.setDistance_description": "nustato sky material atstumą",
    "bitbybit.babylon.material.skyMaterial.setInclination": "nustatyti polinkį",
    "setInclination": "nustatyti polinkį",
    "bitbybit.babylon.material.skyMaterial.setInclination_description": "nustato sky material polinkį",
    "bitbybit.babylon.material.skyMaterial.setAzimuth": "nustatyti azimutą",
    "setAzimuth": "nustatyti azimutą",
    "bitbybit.babylon.material.skyMaterial.setAzimuth_description": "nustato sky material azimutą",
    "bitbybit.babylon.material.skyMaterial.setSunPosition": "nustatyti saulės padėtį",
    "setSunPosition": "nustatyti saulės padėtį",
    "bitbybit.babylon.material.skyMaterial.setSunPosition_description": "nustato sky material saulės padėtį",
    "bitbybit.babylon.material.skyMaterial.setUseSunPosition": "nustatyti saulės padėties naudojimą",
    "setUseSunPosition": "nustatyti saulės padėties naudojimą",
    "bitbybit.babylon.material.skyMaterial.setUseSunPosition_description": "nustato sky material saulės padėties naudojimą",
    "bitbybit.babylon.material.skyMaterial.setCameraOffset": "nustatyti kameros poslinkį",
    "setCameraOffset": "nustatyti kameros poslinkį",
    "bitbybit.babylon.material.skyMaterial.setCameraOffset_description": "nustato sky material kameros poslinkį",
    "bitbybit.babylon.material.skyMaterial.setUp": "nustatyti aukštyn",
    "setUp": "nustatyti aukštyn",
    "bitbybit.babylon.material.skyMaterial.setUp_description": "nustato sky material kryptį aukštyn",
    "bitbybit.babylon.material.skyMaterial.setDithering": "nustatyti dithering",
    "setDithering": "nustatyti dithering",
    "bitbybit.babylon.material.skyMaterial.setDithering_description": "nustato sky material dithering",
    "bitbybit.babylon.material.skyMaterial.getLuminance": "gauti šviesumą",
    "getLuminance": "gauti šviesumą",
    "bitbybit.babylon.material.skyMaterial.getLuminance_description": "gauna sky material šviesumą",
    "bitbybit.babylon.material.skyMaterial.getTurbidity": "gauti drumstumą",
    "getTurbidity": "gauti drumstumą",
    "bitbybit.babylon.material.skyMaterial.getTurbidity_description": "gauna sky material drumstumą",
    "bitbybit.babylon.material.skyMaterial.getRayleigh": "gauti rayleigh",
    "getRayleigh": "gauti rayleigh",
    "bitbybit.babylon.material.skyMaterial.getRayleigh_description": "gauna sky material rayleigh",
    "bitbybit.babylon.material.skyMaterial.getMieCoefficient": "gauti mie koeficientą",
    "getMieCoefficient": "gauti mie koeficientą",
    "bitbybit.babylon.material.skyMaterial.getMieCoefficient_description": "gauna sky material mie koeficientą",
    "bitbybit.babylon.material.skyMaterial.getMieDirectionalG": "gauti mie kryptinį g",
    "getMieDirectionalG": "gauti mie kryptinį g",
    "bitbybit.babylon.material.skyMaterial.getMieDirectionalG_description": "gauna sky material mie kryptinį g",
    "bitbybit.babylon.material.skyMaterial.getDistance": "gauti atstumą",
    "bitbybit.babylon.material.skyMaterial.getDistance_description": "gauna sky material atstumą",
    "bitbybit.babylon.material.skyMaterial.getInclination": "gauti polinkį",
    "getInclination": "gauti polinkį",
    "bitbybit.babylon.material.skyMaterial.getInclination_description": "gauna sky material polinkį",
    "bitbybit.babylon.material.skyMaterial.getAzimuth": "gauti azimutą",
    "getAzimuth": "gauti azimutą",
    "bitbybit.babylon.material.skyMaterial.getAzimuth_description": "gauna sky material azimutą",
    "bitbybit.babylon.material.skyMaterial.getSunPosition": "gauti saulės padėtį",
    "getSunPosition": "gauti saulės padėtį",
    "bitbybit.babylon.material.skyMaterial.getSunPosition_description": "gauna sky material saulės padėtį",
    "bitbybit.babylon.material.skyMaterial.getUseSunPosition": "gauti saulės padėties naudojimą",
    "getUseSunPosition": "gauti saulės padėties naudojimą",
    "bitbybit.babylon.material.skyMaterial.getUseSunPosition_description": "gauna sky material saulės padėties naudojimą",
    "bitbybit.babylon.material.skyMaterial.getCameraOffset": "gauti kameros poslinkį",
    "getCameraOffset": "gauti kameros poslinkį",
    "bitbybit.babylon.material.skyMaterial.getCameraOffset_description": "gauna sky material kameros poslinkį",
    "bitbybit.babylon.material.skyMaterial.getUp": "gauti aukštyn",
    "getUp": "gauti aukštyn",
    "bitbybit.babylon.material.skyMaterial.getUp_description": "gauna sky material kryptį aukštyn",
    "bitbybit.babylon.material.skyMaterial.getDithering": "gauti dithering",
    "getDithering": "gauti dithering",
    "bitbybit.babylon.material.skyMaterial.getDithering_description": "gauna sky material dithering",
    "bitbybit.babylon.lights.shadowLight.setDirectionToTarget": "nustatyti kryptį į tikslą",
    "shadowLight": "šešėlio šviesa",
    "setDirectionToTarget": "nustatyti kryptį į taikinį",
    "bitbybit.babylon.lights.shadowLight.setDirectionToTarget_description": "nustato šešėlio šviesos kryptį",
    "BABYLON.ShadowLight": "babylon šešėlio šviesa",
    "bitbybit.babylon.lights.shadowLight.setPosition": "nustatyti poziciją",
    "bitbybit.babylon.lights.shadowLight.setPosition_description": "nustato šešėlio šviesos poziciją",
    "bitbybit.babylon.meshBuilder.createBox": "dėžė",
    "meshBuilder": "tinklo kūrėjas",
    "createBox": "dėžė",
    "bitbybit.babylon.meshBuilder.createBox_description": "sukuria dėžės tinklą",
    "create simple": "paprastas",
    "depth": "gylis",
    "sideOrientation": "šonų orientacija",
    "BabylonMesh.sideOrientationEnum": "babylon tinklo šonų orientacijos sąrašas",
    "bitbybit.babylon.meshBuilder.createCube": "kubas",
    "createCube": "kubas",
    "bitbybit.babylon.meshBuilder.createCube_description": "sukuria kubo tinklą",
    "bitbybit.babylon.meshBuilder.createSquarePlane": "kvadratinė plokštuma",
    "createSquarePlane": "kvadratinė plokštuma",
    "bitbybit.babylon.meshBuilder.createSquarePlane_description": "sukuria kvadratinio plokštumo tinklą",
    "bitbybit.babylon.meshBuilder.createSphere": "sfera",
    "createSphere": "sfera",
    "bitbybit.babylon.meshBuilder.createSphere_description": "sukuria sferos tinklą",
    "diameter": "skersmuo",
    "segments": "segmentai",
    "bitbybit.babylon.meshBuilder.createIcoSphere": "iko sfera",
    "createIcoSphere": "iko sfera",
    "bitbybit.babylon.meshBuilder.createIcoSphere_description": "sukuria iko sferos tinklą",
    "radiusX": "spindulys x",
    "radiusY": "spindulys y",
    "radiusZ": "spindulys z",
    "flat": "plokščias",
    "bitbybit.babylon.meshBuilder.createDisc": "diskas",
    "createDisc": "diskas",
    "bitbybit.babylon.meshBuilder.createDisc_description": "sukuria disko tinklą",
    "tessellation": "tinklinimas",
    "arc": "arka",
    "bitbybit.babylon.meshBuilder.createTorus": "toras",
    "createTorus": "toras",
    "bitbybit.babylon.meshBuilder.createTorus_description": "sukuria toro tinklą",
    "thickness": "storis",
    "bitbybit.babylon.meshBuilder.createTorusKnot": "toro mazgas",
    "createTorusKnot": "toro mazgas",
    "bitbybit.babylon.meshBuilder.createTorusKnot_description": "sukuria toro mazgo tinklą",
    "tube": "vamzdis",
    "radialSegments": "radialiniai segmentai",
    "tubularSegments": "vamzdiniai segmentai",
    "p": "p",
    "q": "q",
    "bitbybit.babylon.meshBuilder.createPolygon": "daugiakampis",
    "createPolygon": "daugiakampis",
    "bitbybit.babylon.meshBuilder.createPolygon_description": "sukuria daugiakampio tinklą",
    "shape": "forma",
    "holes": "skylės",
    "Base.Vector3[][]": "bazinis vektorius 3 masyvas masyvas",
    "smoothingThreshold": "lyginimo slenkstis",
    "wrap": "apvynioti",
    "bitbybit.babylon.meshBuilder.extrudePolygon": "ištempti daugiakampį",
    "extrudePolygon": "ištempti daugiakampį",
    "bitbybit.babylon.meshBuilder.extrudePolygon_description": "sukuria ištempto daugiakampio tinklą",
    "bitbybit.babylon.meshBuilder.createTube": "vamzdis",
    "createTube": "vamzdis",
    "bitbybit.babylon.meshBuilder.createTube_description": "sukuria vamzdžio tinklą",
    "path": "kelias",
    "cap": "galas",
    "bitbybit.babylon.meshBuilder.createPolyhedron": "daugiabriaunis",
    "createPolyhedron": "daugiabriaunis",
    "bitbybit.babylon.meshBuilder.createPolyhedron_description": "sukuria daugiabriaunio tinklą",
    "type": "tipas",
    "sizeX": "dydis x",
    "sizeY": "dydis y",
    "sizeZ": "dydis z",
    "custom": "pritaikytas",
    "bitbybit.babylon.meshBuilder.createGeodesic": "geodezinis",
    "createGeodesic": "geodezinis",
    "bitbybit.babylon.meshBuilder.createGeodesic_description": "sukuria geodezinio tinklą",
    "m": "m",
    "n": "n",
    "bitbybit.babylon.meshBuilder.createGoldberg": "goldbergas",
    "createGoldberg": "goldbergas",
    "bitbybit.babylon.meshBuilder.createGoldberg_description": "sukuria goldbergo tinklą",
    "bitbybit.babylon.meshBuilder.createCapsule": "kapsulė",
    "createCapsule": "kapsulė",
    "bitbybit.babylon.meshBuilder.createCapsule_description": "sukuria kapsulės tinklą",
    "orientation": "orientacija",
    "capSubdivisions": "galo padalinimai",
    "radiusTop": "viršutinis spindulys",
    "radiusBottom": "apatinis spindulys",
    "topCapSubdivisions": "viršutinio galo padalinimai",
    "bottomCapSubdivisions": "apatinio galo padalinimai",
    "bitbybit.babylon.meshBuilder.createCylinder": "cilindras",
    "createCylinder": "cilindras",
    "bitbybit.babylon.meshBuilder.createCylinder_description": "sukuria cilindro tinklą",
    "diameterTop": "viršutinis skersmuo",
    "diameterBottom": "apatinis skersmuo",
    "bitbybit.babylon.meshBuilder.createExtrudedSahpe": "ištempta forma",
    "createExtrudedSahpe": "ištemptą formą",
    "bitbybit.babylon.meshBuilder.createExtrudedSahpe_description": "sukuria ištemptos formos tinklą",
    "closeShape": "uždaryti formą",
    "closePath": "uždaryti kelią",
    "bitbybit.babylon.meshBuilder.createRibbon": "juosta",
    "createRibbon": "juosta",
    "bitbybit.babylon.meshBuilder.createRibbon_description": "sukuria juostos tinklą",
    "pathArray": "kelių masyvas",
    "closeArray": "uždaryti masyvą",
    "offset": "poslinkis",
    "bitbybit.babylon.meshBuilder.createLathe": "tekinimo forma",
    "createLathe": "tekinimo forma",
    "bitbybit.babylon.meshBuilder.createLathe_description": "sukuria tekinimo formos tinklą",
    "closed": "uždarytas",
    "bitbybit.babylon.meshBuilder.createGround": "žemė",
    "createGround": "žemė",
    "bitbybit.babylon.meshBuilder.createGround_description": "sukuria žemės tinklą",
    "subdivisionsX": "padalinimai x",
    "subdivisionsY": "padalinimai y",
    "bitbybit.babylon.meshBuilder.createRectanglePlane": "stačiakampė plokštuma",
    "createRectanglePlane": "stačiakampė plokštuma",
    "bitbybit.babylon.meshBuilder.createRectanglePlane_description": "sukuria stačiakampio plokštumo tinklą",
    "bitbybit.babylon.texture.createSimple": "paprastą tekstūrą",
    "texture": "tekstūra",
    "createSimple": "paprastą",
    "bitbybit.babylon.texture.createSimple_description": "sukuria tekstūrą iš URL su pagrindinėmis parinktimis",
    "invertY": "apversti y",
    "invertZ": "apversti z",
    "wAng": "w kampas",
    "uScale": "u mastelis",
    "vScale": "v mastelis",
    "uOffset": "u poslinkis",
    "vOffset": "v poslinkis",
    "samplingMode": "mėginių ėmimo režimas",
    "samplingModeEnum": "mėginių ėmimo režimo enum",
    "bitbybit.babylon.tools.createScreenshot": "ekrano nuotrauka",
    "tools": "įrankiai",
    "createScreenshot": "ekrano nuotrauka",
    "bitbybit.babylon.tools.createScreenshot_description": "užfiksuoja scenos ekrano nuotrauką",
    "screenshots": "ekrano nuotraukos",
    "mimeType": "MIME tipas",
    "quality": "kokybė",
    "bitbybit.babylon.tools.createScreenshotAndDownload": "ekrano nuotrauka ir atsisiųsti",
    "createScreenshotAndDownload": "ekrano nuotrauka ir atsisiųsti",
    "bitbybit.babylon.tools.createScreenshotAndDownload_description": "užfiksuoja ir atsisiunčia scenos ekrano nuotrauką",
    "bitbybit.babylon.gui.advancedDynamicTexture.createFullScreenUI": "viso ekrano vartotojo sąsają",
    "gui": "vartotojo sąsaja",
    "advancedDynamicTexture": "išplėstinė dinaminė tekstūra",
    "createFullScreenUI": "viso ekrano vartotojo sąsają",
    "bitbybit.babylon.gui.advancedDynamicTexture.createFullScreenUI_description": "sukuria viso ekrano vartotojo sąsają",
    "spaces": "erdvės",
    "foreground": "priekinis planas",
    "adaptiveScaling": "prisitaikantis mastelio keitimas",
    "bitbybit.babylon.gui.advancedDynamicTexture.createForMesh": "tinklui",
    "createForMesh": "tinklui",
    "bitbybit.babylon.gui.advancedDynamicTexture.createForMesh_description": "sukuria tekstūrą tinklui",
    "BABYLON.AbstractMesh": "babylon abstraktus tinklas",
    "supportPointerMove": "palaikyti žymeklio judėjimą",
    "onlyAlphaTesting": "tik alfa testavimas",
    "sampling": "mėginių ėmimas",
    "BabylonTexture.samplingModeEnum": "babylon tekstūros mėginių ėmimo režimo enum",
    "bitbybit.babylon.gui.control.changeControlPadding": "keisti valdiklio paraštes",
    "control": "valdiklis",
    "changeControlPadding": "keisti valdiklio paraštes",
    "bitbybit.babylon.gui.control.changeControlPadding_description": "nustato valdiklio paraštes",
    "positioning": "pozicionavimas",
    "BABYLON.GUI.Control": "babylon vartotojo sąsajos valdiklis",
    "paddingLeft": "kairioji paraštė",
    "number | string": "skaičius arba tekstas",
    "paddingRight": "dešinioji paraštė",
    "paddingTop": "viršutinė paraštė",
    "paddingBottom": "apatinė paraštė",
    "bitbybit.babylon.gui.control.changeControlAlignment": "keisti valdiklio lygiavimą",
    "changeControlAlignment": "keisti valdiklio lygiavimą",
    "bitbybit.babylon.gui.control.changeControlAlignment_description": "nustato valdiklio lygiavimą",
    "T": "t",
    "horizontalAlignment": "horizontalus lygiavimas",
    "horizontalAlignmentEnum": "horizontalus lygiavimo enum",
    "verticalAlignment": "vertikalus lygiavimas",
    "verticalAlignmentEnum": "vertikalus lygiavimo enum",
    "bitbybit.babylon.gui.control.cloneControl": "klonuoti valdiklį",
    "cloneControl": "klonuoti valdiklį",
    "bitbybit.babylon.gui.control.cloneControl_description": "klonuoja valdiklį",
    "container": "konteineris",
    "BABYLON.GUI.Container": "babylon vartotojo sąsajos konteineris",
    "host": "šeimininkas",
    "BABYLON.GUI.AdvancedDynamicTexture": "babylon išplėstinė dinaminė tekstūra",
    "bitbybit.babylon.gui.control.createControlObservableSelector": "valdiklio stebėjimo selektorius",
    "createControlObservableSelector": "valdiklio stebėjimo selektorius",
    "bitbybit.babylon.gui.control.createControlObservableSelector_description": "sukuria valdiklio stebėjimo selektorių",
    "selector": "selektorius",
    "controlObservableSelectorEnum": "valdiklio stebėjimo selektoriaus enum",
    "bitbybit.babylon.gui.control.getControlByName": "gauti valdiklį pagal pavadinimą",
    "getControlByName": "gauti valdiklį pagal pavadinimą",
    "bitbybit.babylon.gui.control.getControlByName_description": "gauna valdiklį pagal pavadinimą",
    "bitbybit.babylon.gui.control.setIsVisible": "nustatyti matomumą",
    "setIsVisible": "nustatyti matomumą",
    "bitbybit.babylon.gui.control.setIsVisible_description": "nustato valdiklio matomumą",
    "isVisible": "yra matomas",
    "bitbybit.babylon.gui.control.setIsReadonly": "nustatyti tik skaitymo režimą",
    "setIsReadonly": "nustatyti tik skaitymo režimą",
    "bitbybit.babylon.gui.control.setIsReadonly_description": "nustato valdiklio tik skaitymo režimą",
    "isReadOnly": "tik skaitymo režimas",
    "bitbybit.babylon.gui.control.setIsEnabled": "nustatyti įgalinimą",
    "setIsEnabled": "nustatyti įgalinimą",
    "bitbybit.babylon.gui.control.setIsEnabled_description": "nustato valdiklio įgalinimą",
    "isEnabled": "yra įgalintas",
    "bitbybit.babylon.gui.control.setHeight": "nustatyti aukštį",
    "setHeight": "nustatyti aukštį",
    "bitbybit.babylon.gui.control.setHeight_description": "nustato valdiklio aukštį",
    "bitbybit.babylon.gui.control.setWidth": "nustatyti plotį",
    "setWidth": "nustatyti plotį",
    "bitbybit.babylon.gui.control.setWidth_description": "nustato valdiklio plotį",
    "bitbybit.babylon.gui.control.setColor": "nustatyti spalvą",
    "setColor": "nustatyti spalvą",
    "bitbybit.babylon.gui.control.setColor_description": "nustato valdiklio spalvą",
    "bitbybit.babylon.gui.control.setFontSize": "nustatyti šrifto dydį",
    "setFontSize": "nustatyti šrifto dydį",
    "bitbybit.babylon.gui.control.setFontSize_description": "nustato valdiklio šrifto dydį",
    "fontSize": "šrifto dydis",
    "bitbybit.babylon.gui.control.getHeight": "gauti aukštį",
    "getHeight": "gauti aukštį",
    "bitbybit.babylon.gui.control.getHeight_description": "gauna valdiklio aukštį",
    "bitbybit.babylon.gui.control.getWidth": "gauti plotį",
    "getWidth": "gauti plotį",
    "bitbybit.babylon.gui.control.getWidth_description": "gauna valdiklio plotį",
    "bitbybit.babylon.gui.control.getColor": "gauti spalvą",
    "getColor": "gauti spalvą",
    "bitbybit.babylon.gui.control.getColor_description": "gauna valdiklio spalvą",
    "bitbybit.babylon.gui.control.getFontSize": "gauti šrifto dydį",
    "getFontSize": "gauti šrifto dydį",
    "bitbybit.babylon.gui.control.getFontSize_description": "gauna valdiklio šrifto dydį",
    "bitbybit.babylon.gui.control.getIsVisible": "gauti matomumą",
    "getIsVisible": "gauti matomumą",
    "bitbybit.babylon.gui.control.getIsVisible_description": "gauna valdiklio matomumą",
    "bitbybit.babylon.gui.control.getIsReadonly": "gauti tik skaitymo režimą",
    "getIsReadonly": "gauti tik skaitymo režimą",
    "bitbybit.babylon.gui.control.getIsReadonly_description": "gauna valdiklio tik skaitymo režimą",
    "bitbybit.babylon.gui.control.getIsEnabled": "gauti įgalinimą",
    "getIsEnabled": "gauti įgalinimą",
    "bitbybit.babylon.gui.control.getIsEnabled_description": "gauna valdiklio įgalinimą",
    "bitbybit.babylon.gui.container.addControls": "pridėti valdiklius",
    "addControls": "pridėti valdiklius",
    "bitbybit.babylon.gui.container.addControls_description": "prideda valdiklius į konteinerį eilės tvarka",
    "controls": "valdikliai",
    "BABYLON.GUI.Control[]": "babylon vartotojo sąsajos valdiklių masyvas",
    "clearControlsFirst": "pirmiausia išvalyti valdiklius",
    "bitbybit.babylon.gui.container.setBackground": "nustatyti foną",
    "setBackground": "nustatyti foną",
    "bitbybit.babylon.gui.container.setBackground_description": "nustato konteinerio foną",
    "background": "fonas",
    "bitbybit.babylon.gui.container.setIsReadonly": "nustatyti tik skaitymo režimą",
    "bitbybit.babylon.gui.container.setIsReadonly_description": "nustato konteinerio tik skaitymo režimą",
    "bitbybit.babylon.gui.container.getBackground": "gauti foną",
    "getBackground": "gauti foną",
    "bitbybit.babylon.gui.container.getBackground_description": "gauna konteinerio foną",
    "bitbybit.babylon.gui.container.getIsReadonly": "gauti tik skaitymo režimą",
    "bitbybit.babylon.gui.container.getIsReadonly_description": "gauna konteinerio tik skaitymo režimą",
    "bitbybit.babylon.gui.stackPanel.createStackPanel": "stulpelinį skydelį",
    "stackPanel": "stulpelinis skydelis",
    "createStackPanel": "stulpelinį skydelį",
    "bitbybit.babylon.gui.stackPanel.createStackPanel_description": "sukuria stulpelinį skydelį",
    "isVertical": "yra vertikalus",
    "spacing": "tarpai",
    "bitbybit.babylon.gui.stackPanel.setIsVertical": "nustatyti vertikalumą",
    "setIsVertical": "nustatyti vertikalumą",
    "bitbybit.babylon.gui.stackPanel.setIsVertical_description": "nustato stulpelinio skydelio vertikalumą",
    "BABYLON.GUI.StackPanel": "babylon stulpelinis skydelis",
    "bitbybit.babylon.gui.stackPanel.setSpacing": "nustatyti tarpą",
    "setSpacing": "nustatyti tarpą",
    "bitbybit.babylon.gui.stackPanel.setSpacing_description": "nustato stulpelinio skydelio tarpą",
    "bitbybit.babylon.gui.stackPanel.setWidth": "nustatyti plotį",
    "bitbybit.babylon.gui.stackPanel.setWidth_description": "nustato stulpelinio skydelio plotį",
    "bitbybit.babylon.gui.stackPanel.setHeight": "nustatyti aukštį",
    "bitbybit.babylon.gui.stackPanel.setHeight_description": "nustato stulpelinio skydelio aukštį",
    "bitbybit.babylon.gui.stackPanel.getIsVertical": "gauti vertikalumą",
    "getIsVertical": "gauti vertikalumą",
    "bitbybit.babylon.gui.stackPanel.getIsVertical_description": "gauna stulpelinio skydelio vertikalumą",
    "bitbybit.babylon.gui.stackPanel.getSpacing": "gauti tarpą",
    "getSpacing": "gauti tarpą",
    "bitbybit.babylon.gui.stackPanel.getSpacing_description": "gauna stulpelinio skydelio tarpą",
    "bitbybit.babylon.gui.stackPanel.getWidth": "gauti plotį",
    "bitbybit.babylon.gui.stackPanel.getWidth_description": "gauna stulpelinio skydelio plotį",
    "bitbybit.babylon.gui.stackPanel.getHeight": "gauti aukštį",
    "bitbybit.babylon.gui.stackPanel.getHeight_description": "gauna stulpelinio skydelio aukštį",
    "bitbybit.babylon.gui.button.createSimpleButton": "paprastą mygtuką",
    "button": "mygtukas",
    "createSimpleButton": "paprastą mygtuką",
    "bitbybit.babylon.gui.button.createSimpleButton_description": "sukuria paprastą mygtuką",
    "label": "etiketė",
    "bitbybit.babylon.gui.button.setButtonText": "nustatyti mygtuko tekstą",
    "setButtonText": "nustatyti mygtuko tekstą",
    "bitbybit.babylon.gui.button.setButtonText_description": "nustato mygtuko tekstą",
    "BABYLON.GUI.Button": "babylon mygtukas",
    "text": "tekstas",
    "bitbybit.babylon.gui.button.getButtonText": "gauti mygtuko tekstą",
    "getButtonText": "gauti mygtuko tekstą",
    "bitbybit.babylon.gui.button.getButtonText_description": "gauna mygtuko tekstą",
    "bitbybit.babylon.gui.slider.createSlider": "slankiklis",
    "slider": "slankiklis",
    "createSlider": "slankiklis",
    "bitbybit.babylon.gui.slider.createSlider_description": "sukuria slankiklį",
    "minimum": "minimumas",
    "maximum": "maksimumas",
    "value": "reikšmė",
    "step": "žingsnis",
    "displayThumb": "rodyti žymeklį",
    "bitbybit.babylon.gui.slider.changeSliderThumb": "keisti slankiklio žymeklį",
    "changeSliderThumb": "keisti slankiklio žymeklį",
    "bitbybit.babylon.gui.slider.changeSliderThumb_description": "keičia slankiklio žymeklio savybes",
    "BABYLON.GUI.Slider": "babylon gui slankiklis",
    "isThumbCircle": "ar žymeklis apskritas",
    "thumbColor": "žymeklio spalva",
    "thumbWidth": "žymeklio plotis",
    "string | number": "tekstas arba skaičius",
    "isThumbClamped": "ar žymeklis apribotas",
    "bitbybit.babylon.gui.slider.setBorderColor": "nustatyti rėmelio spalvą",
    "setBorderColor": "nustatyti rėmelio spalvą",
    "bitbybit.babylon.gui.slider.setBorderColor_description": "nustato slankiklio rėmelio spalvą",
    "borderColor": "rėmelio spalva",
    "bitbybit.babylon.gui.slider.setBackgroundColor": "nustatyti fono spalvą",
    "setBackgroundColor": "nustatyti fono spalvą",
    "bitbybit.babylon.gui.slider.setBackgroundColor_description": "nustato slankiklio fono spalvą",
    "backgroundColor": "fono spalva",
    "bitbybit.babylon.gui.slider.setMaximum": "nustatyti maksimumą",
    "setMaximum": "nustatyti maksimumą",
    "bitbybit.babylon.gui.slider.setMaximum_description": "nustato slankiklio maksimalią reikšmę",
    "bitbybit.babylon.gui.slider.setMinimum": "nustatyti minimumą",
    "setMinimum": "nustatyti minimumą",
    "bitbybit.babylon.gui.slider.setMinimum_description": "nustato slankiklio minimalią reikšmę",
    "bitbybit.babylon.gui.slider.setStep": "nustatyti žingsnį",
    "setStep": "nustatyti žingsnį",
    "bitbybit.babylon.gui.slider.setStep_description": "nustato slankiklio žingsnio reikšmę",
    "bitbybit.babylon.gui.slider.setValue": "nustatyti reikšmę",
    "setValue": "nustatyti reikšmę",
    "bitbybit.babylon.gui.slider.setValue_description": "nustato slankiklio reikšmę",
    "bitbybit.babylon.gui.slider.createSliderObservableSelector": "slankiklio stebėjimo selektorius",
    "createSliderObservableSelector": "slankiklio stebėjimo selektorius",
    "bitbybit.babylon.gui.slider.createSliderObservableSelector_description": "sukuria slankiklio stebėjimo selektorių",
    "sliderObservableSelectorEnum": "slankiklio stebėjimo selektoriaus išvardijimas",
    "bitbybit.babylon.gui.slider.getBorderColor": "gauti rėmelio spalvą",
    "getBorderColor": "gauti rėmelio spalvą",
    "bitbybit.babylon.gui.slider.getBorderColor_description": "gauna slankiklio rėmelio spalvą",
    "bitbybit.babylon.gui.slider.getBackgroundColor": "gauti fono spalvą",
    "getBackgroundColor": "gauti fono spalvą",
    "bitbybit.babylon.gui.slider.getBackgroundColor_description": "gauna slankiklio fono spalvą",
    "bitbybit.babylon.gui.slider.getMaximum": "gauti maksimumą",
    "getMaximum": "gauti maksimumą",
    "bitbybit.babylon.gui.slider.getMaximum_description": "gauna slankiklio maksimalią reikšmę",
    "bitbybit.babylon.gui.slider.getMinimum": "gauti minimumą",
    "getMinimum": "gauti minimumą",
    "bitbybit.babylon.gui.slider.getMinimum_description": "gauna slankiklio minimalią reikšmę",
    "bitbybit.babylon.gui.slider.getStep": "gauti žingsnį",
    "getStep": "gauti žingsnį",
    "bitbybit.babylon.gui.slider.getStep_description": "gauna slankiklio žingsnio reikšmę",
    "bitbybit.babylon.gui.slider.getValue": "gauti reikšmę",
    "getValue": "gauti reikšmę",
    "bitbybit.babylon.gui.slider.getValue_description": "gauna slankiklio reikšmę",
    "bitbybit.babylon.gui.slider.getThumbColor": "gauti žymeklio spalvą",
    "getThumbColor": "gauti žymeklio spalvą",
    "bitbybit.babylon.gui.slider.getThumbColor_description": "gauna slankiklio žymeklio spalvą",
    "bitbybit.babylon.gui.slider.getThumbWidth": "gauti žymeklio plotį",
    "getThumbWidth": "gauti žymeklio plotį",
    "bitbybit.babylon.gui.slider.getThumbWidth_description": "gauna slankiklio žymeklio plotį",
    "bitbybit.babylon.gui.slider.getIsVertical": "gauti ar vertikalus",
    "bitbybit.babylon.gui.slider.getIsVertical_description": "gauna ar slankiklis yra vertikalus",
    "bitbybit.babylon.gui.slider.getDisplayThumb": "gauti ar rodomas žymeklis",
    "getDisplayThumb": "gauti ar rodomas žymeklis",
    "bitbybit.babylon.gui.slider.getDisplayThumb_description": "gauna ar slankiklio žymeklis rodomas",
    "bitbybit.babylon.gui.slider.getIsThumbCircle": "gauti ar žymeklis apskritas",
    "getIsThumbCircle": "gauti ar žymeklis apskritas",
    "bitbybit.babylon.gui.slider.getIsThumbCircle_description": "gauna ar slankiklio žymeklis yra apskritas",
    "bitbybit.babylon.gui.slider.getIsThumbClamped": "gauti ar žymeklis apribotas",
    "getIsThumbClamped": "gauti ar žymeklis apribotas",
    "bitbybit.babylon.gui.slider.getIsThumbClamped_description": "gauna ar slankiklio žymeklis yra apribotas",
    "bitbybit.babylon.gui.textBlock.createTextBlock": "teksto blokas",
    "textBlock": "teksto blokas",
    "createTextBlock": "teksto blokas",
    "bitbybit.babylon.gui.textBlock.createTextBlock_description": "sukuria teksto bloką",
    "bitbybit.babylon.gui.textBlock.alignText": "lygiuoti tekstą",
    "alignText": "lygiuoti tekstą",
    "bitbybit.babylon.gui.textBlock.alignText_description": "nustato teksto lygiavimą",
    "bitbybit.babylon.gui.textBlock.setTextOutline": "nustatyti teksto kontūrą",
    "setTextOutline": "nustatyti teksto kontūrą",
    "bitbybit.babylon.gui.textBlock.setTextOutline_description": "nustato teksto kontūrą",
    "BABYLON.GUI.TextBlock": "babylon gui teksto blokas",
    "outlineWidth": "kontūro plotis",
    "outlineColor": "kontūro spalva",
    "bitbybit.babylon.gui.textBlock.setText": "nustatyti tekstą",
    "setText": "nustatyti tekstą",
    "bitbybit.babylon.gui.textBlock.setText_description": "nustato teksto bloko tekstą",
    "bitbybit.babylon.gui.textBlock.setRsizeToFit": "nustatyti dydžio pritaikymą",
    "setRsizeToFit": "nustatyti dydžio pritaikymą",
    "bitbybit.babylon.gui.textBlock.setRsizeToFit_description": "nustato dydžio pritaikymą",
    "resizeToFit": "pritaikyti dydį",
    "bitbybit.babylon.gui.textBlock.setTextWrapping": "nustatyti teksto apvyniojimą",
    "setTextWrapping": "nustatyti teksto apvyniojimą",
    "bitbybit.babylon.gui.textBlock.setTextWrapping_description": "nustato teksto apvyniojimą",
    "textWrapping": "teksto apvyniojimas",
    "boolean | BABYLON.GUI.TextWrapping": "logine reikšmė arba babylon gui teksto apvyniojimas",
    "bitbybit.babylon.gui.textBlock.setLineSpacing": "nustatyti eilučių tarpą",
    "setLineSpacing": "nustatyti eilučių tarpą",
    "bitbybit.babylon.gui.textBlock.setLineSpacing_description": "nustato teksto eilučių tarpą",
    "lineSpacing": "eilučių tarpas",
    "bitbybit.babylon.gui.textBlock.getText": "gauti tekstą",
    "getText": "gauti tekstą",
    "bitbybit.babylon.gui.textBlock.getText_description": "gauna teksto bloko tekstą",
    "bitbybit.babylon.gui.textBlock.getTextWrapping": "gauti teksto apvyniojimą",
    "getTextWrapping": "gauti teksto apvyniojimą",
    "bitbybit.babylon.gui.textBlock.getTextWrapping_description": "gauna teksto apvyniojimą",
    "bitbybit.babylon.gui.textBlock.getLineSpacing": "gauti eilučių tarpą",
    "getLineSpacing": "gauti eilučių tarpą",
    "bitbybit.babylon.gui.textBlock.getLineSpacing_description": "gauna teksto eilučių tarpą",
    "bitbybit.babylon.gui.textBlock.getOutlineWidth": "gauti kontūro plotį",
    "getOutlineWidth": "gauti kontūro plotį",
    "bitbybit.babylon.gui.textBlock.getOutlineWidth_description": "gauna teksto kontūro plotį",
    "bitbybit.babylon.gui.textBlock.getResizeToFit": "gauti pritaikymą dydžiui",
    "getResizeToFit": "gauti pritaikymą dydžiui",
    "bitbybit.babylon.gui.textBlock.getResizeToFit_description": "gauna pritaikymą dydžiui",
    "bitbybit.babylon.gui.textBlock.getTextHorizontalAlignment": "gauti teksto horizontalų lygiavimą",
    "getTextHorizontalAlignment": "gauti teksto horizontalų lygiavimą",
    "bitbybit.babylon.gui.textBlock.getTextHorizontalAlignment_description": "gauna teksto horizontalų lygiavimą",
    "bitbybit.babylon.gui.textBlock.getTextVerticalAlignment": "gauti teksto vertikalų lygiavimą",
    "getTextVerticalAlignment": "gauti teksto vertikalų lygiavimą",
    "bitbybit.babylon.gui.textBlock.getTextVerticalAlignment_description": "gauna teksto vertikalų lygiavimą",
    "bitbybit.babylon.gui.textBlock.createTextBlockObservableSelector": "teksto bloko stebėjimo selektorius",
    "createTextBlockObservableSelector": "teksto bloko stebėjimo selektorius",
    "bitbybit.babylon.gui.textBlock.createTextBlockObservableSelector_description": "sukuria teksto bloko stebėjimo selektorių",
    "textBlockObservableSelectorEnum": "teksto bloko stebėjimo selektoriaus enumas",
    "bitbybit.babylon.gui.radioButton.createRadioButton": "radijo mygtukas",
    "radioButton": "radijo mygtukas",
    "createRadioButton": "radijo mygtukas",
    "bitbybit.babylon.gui.radioButton.createRadioButton_description": "sukuria radijo mygtuką",
    "group": "grupė",
    "isChecked": "ar pažymėta",
    "checkSizeRatio": "pažymėjimo dydžio santykis",
    "bitbybit.babylon.gui.radioButton.setCheckSizeRatio": "nustatyti pažymėjimo dydžio santykį",
    "setCheckSizeRatio": "nustatyti pažymėjimo dydžio santykį",
    "bitbybit.babylon.gui.radioButton.setCheckSizeRatio_description": "nustato radijo mygtuko pažymėjimo dydžio santykį",
    "BABYLON.GUI.RadioButton": "babylon gui radijo mygtukas",
    "bitbybit.babylon.gui.radioButton.setGroup": "nustatyti grupę",
    "setGroup": "nustatyti grupę",
    "bitbybit.babylon.gui.radioButton.setGroup_description": "nustato radijo mygtuko grupę",
    "bitbybit.babylon.gui.radioButton.setBackground": "nustatyti foną",
    "bitbybit.babylon.gui.radioButton.setBackground_description": "nustato radijo mygtuko foną",
    "bitbybit.babylon.gui.radioButton.getCheckSizeRatio": "gauti pažymėjimo dydžio santykį",
    "getCheckSizeRatio": "gauti pažymėjimo dydžio santykį",
    "bitbybit.babylon.gui.radioButton.getCheckSizeRatio_description": "gauna radijo mygtuko pažymėjimo dydžio santykį",
    "bitbybit.babylon.gui.radioButton.getGroup": "gauti grupę",
    "getGroup": "gauti grupę",
    "bitbybit.babylon.gui.radioButton.getGroup_description": "gauna radijo mygtuko grupę",
    "bitbybit.babylon.gui.radioButton.getBackground": "gauti foną",
    "bitbybit.babylon.gui.radioButton.getBackground_description": "gauna radijo mygtuko foną",
    "bitbybit.babylon.gui.radioButton.createRadioButtonObservableSelector": "radijo mygtuko stebėjimo selektorius",
    "createRadioButtonObservableSelector": "radijo mygtuko stebėjimo selektorius",
    "bitbybit.babylon.gui.radioButton.createRadioButtonObservableSelector_description": "sukuria radijo mygtuko stebėjimo selektorių",
    "radioButtonObservableSelectorEnum": "radijo mygtuko stebėjimo selektoriaus enumas",
    "bitbybit.babylon.gui.checkbox.createCheckbox": "žymimasis laukelis",
    "checkbox": "žymimasis laukelis",
    "createCheckbox": "žymimasis laukelis",
    "bitbybit.babylon.gui.checkbox.createCheckbox_description": "sukuria žymimąjį laukelį",
    "bitbybit.babylon.gui.checkbox.setBackground": "nustatyti foną",
    "bitbybit.babylon.gui.checkbox.setBackground_description": "nustato žymimojo laukelio foną",
    "BABYLON.GUI.Checkbox": "babylon gui žymimasis laukelis",
    "bitbybit.babylon.gui.checkbox.setCheckSizeRatio": "nustatyti pažymėjimo dydžio santykį",
    "bitbybit.babylon.gui.checkbox.setCheckSizeRatio_description": "nustato žymimojo laukelio pažymėjimo dydžio santykį",
    "bitbybit.babylon.gui.checkbox.setIsChecked": "nustatyti ar pažymėta",
    "setIsChecked": "nustatyti ar pažymėta",
    "bitbybit.babylon.gui.checkbox.setIsChecked_description": "nustato ar žymimasis laukelis pažymėtas",
    "bitbybit.babylon.gui.checkbox.getCheckSizeRatio": "gauti pažymėjimo dydžio santykį",
    "bitbybit.babylon.gui.checkbox.getCheckSizeRatio_description": "gauna žymimojo laukelio pažymėjimo dydžio santykį",
    "bitbybit.babylon.gui.checkbox.getIsChecked": "gauti ar pažymėta",
    "getIsChecked": "gauti ar pažymėta",
    "bitbybit.babylon.gui.checkbox.getIsChecked_description": "gauna ar žymimasis laukelis pažymėtas",
    "bitbybit.babylon.gui.checkbox.getBackground": "gauti foną",
    "bitbybit.babylon.gui.checkbox.getBackground_description": "gauna žymimojo laukelio foną",
    "bitbybit.babylon.gui.checkbox.createCheckboxObservableSelector": "žymimojo laukelio stebėjimo selektorius",
    "createCheckboxObservableSelector": "žymimojo laukelio stebėjimo selektorius",
    "bitbybit.babylon.gui.checkbox.createCheckboxObservableSelector_description": "sukuria žymimojo laukelio stebėjimo selektorių",
    "checkboxObservableSelectorEnum": "žymimojo laukelio stebėjimo selektoriaus enumas",
    "bitbybit.babylon.gui.inputText.createInputText": "įvesties tekstas",
    "inputText": "įvesties tekstas",
    "createInputText": "įvesties tekstas",
    "bitbybit.babylon.gui.inputText.createInputText_description": "sukuria įvesties tekstą",
    "placeholder": "vietos rezervacija",
    "bitbybit.babylon.gui.inputText.setBackground": "nustatyti foną",
    "bitbybit.babylon.gui.inputText.setBackground_description": "nustato įvesties teksto foną",
    "BABYLON.GUI.InputText": "babylon gui įvesties tekstas",
    "bitbybit.babylon.gui.inputText.setText": "nustatyti tekstą",
    "bitbybit.babylon.gui.inputText.setText_description": "nustato įvesties tekstą",
    "bitbybit.babylon.gui.inputText.setPlaceholder": "nustatyti vietos rezervaciją",
    "setPlaceholder": "nustatyti vietos rezervaciją",
    "bitbybit.babylon.gui.inputText.setPlaceholder_description": "nustato įvesties teksto vietos rezervaciją",
    "bitbybit.babylon.gui.inputText.getBackground": "gauti foną",
    "bitbybit.babylon.gui.inputText.getBackground_description": "gauna įvesties teksto foną",
    "bitbybit.babylon.gui.inputText.getText": "gauti tekstą",
    "bitbybit.babylon.gui.inputText.getText_description": "gauna įvesties tekstą",
    "bitbybit.babylon.gui.inputText.getPlaceholder": "gauti vietos rezervaciją",
    "getPlaceholder": "gauti vietos rezervaciją",
    "bitbybit.babylon.gui.inputText.getPlaceholder_description": "gauna įvesties teksto vietos rezervaciją",
    "bitbybit.babylon.gui.inputText.createInputTextObservableSelector": "įvesties teksto stebėjimo selektorius",
    "createInputTextObservableSelector": "įvesties teksto stebėjimo selektorius",
    "bitbybit.babylon.gui.inputText.createInputTextObservableSelector_description": "sukuria įvesties teksto stebėjimo selektorių",
    "inputTextObservableSelectorEnum": "įvesties teksto stebėjimo selektoriaus enumas",
    "bitbybit.babylon.gui.colorPicker.createColorPicker": "spalvų pasirinkiklis",
    "colorPicker": "spalvų pasirinkiklis",
    "createColorPicker": "spalvų pasirinkiklis",
    "bitbybit.babylon.gui.colorPicker.createColorPicker_description": "sukuria spalvų pasirinkiklį",
    "defaultColor": "numatytoji spalva",
    "bitbybit.babylon.gui.colorPicker.setColorPickerValue": "nustatyti spalvų pasirinkiklio reikšmę",
    "setColorPickerValue": "nustatyti spalvų pasirinkiklio reikšmę",
    "bitbybit.babylon.gui.colorPicker.setColorPickerValue_description": "nustato spalvų pasirinkiklio reikšmę",
    "BABYLON.GUI.ColorPicker": "babylon gui spalvų pasirinkiklis",
    "bitbybit.babylon.gui.colorPicker.setColorPickerSize": "nustatyti spalvų pasirinkiklio dydį",
    "setColorPickerSize": "nustatyti spalvų pasirinkiklio dydį",
    "bitbybit.babylon.gui.colorPicker.setColorPickerSize_description": "nustato spalvų pasirinkiklio dydį",
    "bitbybit.babylon.gui.colorPicker.getColorPickerValue": "gauti spalvų pasirinkiklio reikšmę",
    "getColorPickerValue": "gauti spalvų pasirinkiklio reikšmę",
    "bitbybit.babylon.gui.colorPicker.getColorPickerValue_description": "gauna spalvų pasirinkiklio reikšmę",
    "bitbybit.babylon.gui.colorPicker.getColorPickerSize": "gauti spalvų pasirinkiklio dydį",
    "getColorPickerSize": "gauti spalvų pasirinkiklio dydį",
    "bitbybit.babylon.gui.colorPicker.getColorPickerSize_description": "gauna spalvų pasirinkiklio dydį",
    "bitbybit.babylon.gui.colorPicker.createColorPickerObservableSelector": "spalvų pasirinkiklio stebėjimo selektorius",
    "createColorPickerObservableSelector": "spalvų pasirinkiklio stebėjimo selektorių",
    "bitbybit.babylon.gui.colorPicker.createColorPickerObservableSelector_description": "sukuria spalvų pasirinkiklio stebėjimo selektorių",
    "colorPickerObservableSelectorEnum": "spalvų pasirinkiklio stebėjimo selektoriaus enumas",
    "bitbybit.babylon.gui.image.createImage": "vaizdas",
    "image": "vaizdas",
    "createImage": "vaizdas",
    "bitbybit.babylon.gui.image.createImage_description": "sukuria vaizdą",
    "bitbybit.babylon.gui.image.setSourceUrl": "nustatyti šaltinio URL",
    "setSourceUrl": "nustatyti šaltinio URL",
    "bitbybit.babylon.gui.image.setSourceUrl_description": "nustato vaizdo šaltinio URL",
    "BABYLON.GUI.Image": "babylon gui vaizdas",
    "bitbybit.babylon.gui.image.getSourceUrl": "gauti šaltinio URL",
    "getSourceUrl": "gauti šaltinio URL",
    "bitbybit.babylon.gui.image.getSourceUrl_description": "gauna vaizdo šaltinio URL",
    "bitbybit.babylon.gizmo.manager.createGizmoManager": "gizmo valdytoją",
    "gizmo": "gizmo",
    "manager": "valdytojas",
    "createGizmoManager": "gizmo valdyklė",
    "bitbybit.babylon.gizmo.manager.createGizmoManager_description": "sukuria gizmo valdyklę",
    "positionGizmoEnabled": "pozicijos gizmo įjungtas",
    "rotationGizmoEnabled": "sukimosi gizmo įjungtas",
    "scaleGizmoEnabled": "mastelio gizmo įjungtas",
    "boundingBoxGizmoEnabled": "ribojančio langelio gizmo įjungtas",
    "usePointerToAttachGizmos": "naudoti žymeklį gizmo prijungimui",
    "clearGizmoOnEmptyPointerEvent": "išvalyti gizmo tuščio žymeklio įvykio metu",
    "scaleRatio": "mastelio santykis",
    "attachableMeshes": "prijungiami tinklai",
    "BABYLON.AbstractMesh[]": "babylon abstract mesh masyvas",
    "bitbybit.babylon.gizmo.manager.getPositionGizmo": "gauti pozicijos gizmo",
    "getPositionGizmo": "gauti pozicijos gizmo",
    "bitbybit.babylon.gizmo.manager.getPositionGizmo_description": "gauna pozicijos gizmo",
    "gizmoManager": "gizmo valdyklė",
    "BABYLON.GizmoManager": "babylon gizmo valdyklė",
    "bitbybit.babylon.gizmo.manager.getRotationGizmo": "gauti sukimosi gizmo",
    "getRotationGizmo": "gauti sukimosi gizmo",
    "bitbybit.babylon.gizmo.manager.getRotationGizmo_description": "gauna sukimosi gizmo",
    "bitbybit.babylon.gizmo.manager.getScaleGizmo": "gauti mastelio gizmo",
    "getScaleGizmo": "gauti mastelio gizmo",
    "bitbybit.babylon.gizmo.manager.getScaleGizmo_description": "gauna mastelio gizmo",
    "bitbybit.babylon.gizmo.manager.getBoundingBoxGizmo": "gauti ribojančio langelio gizmo",
    "getBoundingBoxGizmo": "gauti ribojančio langelio gizmo",
    "bitbybit.babylon.gizmo.manager.getBoundingBoxGizmo_description": "gauna ribojančio langelio gizmo",
    "bitbybit.babylon.gizmo.manager.attachToMesh": "prijungti prie tinklo",
    "attachToMesh": "prijungti prie tinklo",
    "bitbybit.babylon.gizmo.manager.attachToMesh_description": "prijungia gizmo valdyklę prie tinklo",
    "update": "atnaujinti",
    "bitbybit.babylon.gizmo.manager.detachMesh": "atjungti tinklą",
    "detachMesh": "atjungti tinklą",
    "bitbybit.babylon.gizmo.manager.detachMesh_description": "atjungia gizmo valdyklę nuo tinklo",
    "bitbybit.babylon.gizmo.base.scaleRatio": "nustatyti mastelio santykį",
    "base": "bazė",
    "bitbybit.babylon.gizmo.base.scaleRatio_description": "nustato gizmo mastelio santykį",
    "BABYLON.IGizmo": "babylon i gizmo",
    "bitbybit.babylon.gizmo.base.getScaleRatio": "gauti mastelio santykį",
    "getScaleRatio": "gauti mastelio santykį",
    "bitbybit.babylon.gizmo.base.getScaleRatio_description": "gauna gizmo mastelio santykį",
    "bitbybit.babylon.gizmo.positionGizmo.planarGizmoEnabled": "nustatyti plokštuminį gizmo įjungimą",
    "positionGizmo": "pozicijos gizmo",
    "planarGizmoEnabled": "plokštuminis gizmo įjungtas",
    "bitbybit.babylon.gizmo.positionGizmo.planarGizmoEnabled_description": "nustato plokštuminį gizmo įjungimą",
    "BABYLON.IPositionGizmo": "babylon i pozicijos gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.snapDistance": "nustatyti užfiksavimo atstumą",
    "snapDistance": "užfiksavimo atstumas",
    "bitbybit.babylon.gizmo.positionGizmo.snapDistance_description": "nustato pozicijos gizmo užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.positionGizmo.getAttachedMesh": "gauti prijungtą tinklą",
    "getAttachedMesh": "gauti prijungtą tinklą",
    "bitbybit.babylon.gizmo.positionGizmo.getAttachedMesh_description": "gauna prijungtą tinklą",
    "bitbybit.babylon.gizmo.positionGizmo.getAttachedNode": "gauti prijungtą mazgą",
    "getAttachedNode": "gauti prijungtą mazgą",
    "bitbybit.babylon.gizmo.positionGizmo.getAttachedNode_description": "gauna prijungtą mazgą",
    "bitbybit.babylon.gizmo.positionGizmo.getXGizmo": "gauti x gizmo",
    "getXGizmo": "gauti x gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getXGizmo_description": "gauna x gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getYGizmo": "gauti y gizmo",
    "getYGizmo": "gauti y gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getYGizmo_description": "gauna y gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getZGizmo": "gauti z gizmo",
    "getZGizmo": "gauti z gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getZGizmo_description": "gauna z gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getXPlaneGizmo": "gauti x plokštumos gizmo",
    "getXPlaneGizmo": "gauti x plokštumos gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getXPlaneGizmo_description": "gauna x plokštumos gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getYPlaneGizmo": "gauti y plokštumos gizmo",
    "getYPlaneGizmo": "gauti y plokštumos gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getYPlaneGizmo_description": "gauna y plokštumos gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getZPlaneGizmo": "gauti z plokštumos gizmo",
    "getZPlaneGizmo": "gauti z plokštumos gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getZPlaneGizmo_description": "gauna z plokštumos gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getPlanarGizmoEnabled": "gauti plokštuminį gizmo įjungimą",
    "getPlanarGizmoEnabled": "gauti plokštuminį gizmo įjungimą",
    "bitbybit.babylon.gizmo.positionGizmo.getPlanarGizmoEnabled_description": "gauna plokštuminį gizmo įjungimą",
    "bitbybit.babylon.gizmo.positionGizmo.getSnapDistance": "gauti užfiksavimo atstumą",
    "getSnapDistance": "gauti užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.positionGizmo.getSnapDistance_description": "gauna užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.positionGizmo.getIsDragging": "gauti vilkimo būseną",
    "getIsDragging": "gauti vilkimo būseną",
    "bitbybit.babylon.gizmo.positionGizmo.getIsDragging_description": "gauna vilkimo būseną",
    "bitbybit.babylon.gizmo.positionGizmo.createPositionGizmoObservableSelector": "pozicijos gizmo stebėjimo selektorius",
    "createPositionGizmoObservableSelector": "pozicijos gizmo stebėjimo selektorius",
    "bitbybit.babylon.gizmo.positionGizmo.createPositionGizmoObservableSelector_description": "sukuria pozicijos gizmo stebėjimo selektorių",
    "positionGizmoObservableSelectorEnum": "pozicijos gizmo stebėjimo selektoriaus enumas",
    "bitbybit.babylon.gizmo.rotationGizmo.snapDistance": "nustatyti užfiksavimo atstumą",
    "rotationGizmo": "sukimosi gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.snapDistance_description": "nustato sukimosi gizmo užfiksavimo atstumą",
    "BABYLON.IRotationGizmo": "babylon i sukimosi gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.sensitivity": "nustatyti jautrumą",
    "sensitivity": "jautrumas",
    "bitbybit.babylon.gizmo.rotationGizmo.sensitivity_description": "nustato sukimosi gizmo jautrumą",
    "bitbybit.babylon.gizmo.rotationGizmo.getAttachedMesh": "gauti prijungtą tinklą",
    "bitbybit.babylon.gizmo.rotationGizmo.getAttachedMesh_description": "gauna prijungtą tinklą",
    "bitbybit.babylon.gizmo.rotationGizmo.getAttachedNode": "gauti prijungtą mazgą",
    "bitbybit.babylon.gizmo.rotationGizmo.getAttachedNode_description": "gauna prijungtą mazgą",
    "bitbybit.babylon.gizmo.rotationGizmo.getXGizmo": "gauti x gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getXGizmo_description": "gauna x gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getYGizmo": "gauti y gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getYGizmo_description": "gauna y gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getZGizmo": "gauti z gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getZGizmo_description": "gauna z gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getSnapDistance": "gauti užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.rotationGizmo.getSnapDistance_description": "gauna užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.rotationGizmo.getSensitivity": "gauti jautrumą",
    "getSensitivity": "gauti jautrumą",
    "bitbybit.babylon.gizmo.rotationGizmo.getSensitivity_description": "gauna jautrumą",
    "bitbybit.babylon.gizmo.rotationGizmo.createRotationGizmoObservableSelector": "sukuria rotacijos gizmo stebėjimo selektorių",
    "createRotationGizmoObservableSelector": "sukuria rotacijos gizmo stebėjimo selektorių",
    "bitbybit.babylon.gizmo.rotationGizmo.createRotationGizmoObservableSelector_description": "sukuria stebėjimo selektorių rotacijos gizmui",
    "rotationGizmoObservableSelectorEnum": "rotacijos gizmo stebėjimo selektoriaus enumas",
    "bitbybit.babylon.gizmo.scaleGizmo.getXGizmo": "gauna x gizmo",
    "scaleGizmo": "mastelio gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getXGizmo_description": "gauna x gizmo",
    "BABYLON.IScaleGizmo": "babylon i mastelio gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getYGizmo": "gauna y gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getYGizmo_description": "gauna y gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getZGizmo": "gauna z gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getZGizmo_description": "gauna z gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.snapDistance": "nustato užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.scaleGizmo.snapDistance_description": "nustato mastelio gizmo užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.scaleGizmo.setIncrementalSnap": "nustato inkrementinį užfiksavimą",
    "setIncrementalSnap": "nustato inkrementinį užfiksavimą",
    "bitbybit.babylon.gizmo.scaleGizmo.setIncrementalSnap_description": "nustato mastelio gizmo inkrementinį užfiksavimą",
    "incrementalSnap": "inkrementinis užfiksavimas",
    "bitbybit.babylon.gizmo.scaleGizmo.sensitivity": "nustato jautrumą",
    "bitbybit.babylon.gizmo.scaleGizmo.sensitivity_description": "nustato mastelio gizmo jautrumą",
    "bitbybit.babylon.gizmo.scaleGizmo.getIncrementalSnap": "gauna inkrementinį užfiksavimą",
    "getIncrementalSnap": "gauna inkrementinį užfiksavimą",
    "bitbybit.babylon.gizmo.scaleGizmo.getIncrementalSnap_description": "gauna inkrementinį užfiksavimą",
    "bitbybit.babylon.gizmo.scaleGizmo.getSnapDistance": "gauna užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.scaleGizmo.getSnapDistance_description": "gauna užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.scaleGizmo.getSensitivity": "gauna jautrumą",
    "bitbybit.babylon.gizmo.scaleGizmo.getSensitivity_description": "gauna jautrumą",
    "bitbybit.babylon.gizmo.scaleGizmo.createScaleGizmoObservableSelector": "sukuria mastelio gizmo stebėjimo selektorių",
    "createScaleGizmoObservableSelector": "sukuria mastelio gizmo stebėjimo selektorių",
    "bitbybit.babylon.gizmo.scaleGizmo.createScaleGizmoObservableSelector_description": "sukuria stebėjimo selektorių mastelio gizmui",
    "scaleGizmoObservableSelectorEnum": "mastelio gizmo stebėjimo selektoriaus enumas",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setRotationSphereSize": "nustato rotacijos sferos dydį",
    "boundingBoxGizmo": "ribinio langelio gizmo",
    "setRotationSphereSize": "nustato rotacijos sferos dydį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setRotationSphereSize_description": "nustato ribinio langelio gizmo rotacijos sferos dydį",
    "BABYLON.BoundingBoxGizmo": "babylon ribinio langelio gizmo",
    "rotationSphereSize": "rotacijos sferos dydis",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshScreenSize": "nustato fiksuotą tempimo tinklo ekrano dydį",
    "setFixedDragMeshScreenSize": "nustato fiksuotą tempimo tinklo ekrano dydį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshScreenSize_description": "nustato fiksuotą tempimo tinklo ekrano dydį nuosekliam masteliui",
    "fixedDragMeshScreenSize": "fiksuotas tempimo tinklo ekrano dydis",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshBoundsSize": "nustato fiksuotą tempimo tinklo ribų dydį",
    "setFixedDragMeshBoundsSize": "nustato fiksuotą tempimo tinklo ribų dydį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshBoundsSize_description": "nustato fiksuotą tempimo tinklo ribų dydį",
    "fixedDragMeshBoundsSize": "fiksuotas tempimo tinklo ribų dydis",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshScreenSizeDistanceFactor": "nustato fiksuoto tempimo tinklo ekrano dydžio atstumo faktorių",
    "setFixedDragMeshScreenSizeDistanceFactor": "nustato fiksuoto tempimo tinklo ekrano dydžio atstumo faktorių",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshScreenSizeDistanceFactor_description": "nustato atstumo faktorių fiksuotam tempimo tinklo ekrano dydžiui",
    "fixedDragMeshScreenSizeDistanceFactor": "fiksuoto tempimo tinklo ekrano dydžio atstumo faktorius",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScalingSnapDistance": "nustato mastelio užfiksavimo atstumą",
    "setScalingSnapDistance": "nustato mastelio užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScalingSnapDistance_description": "nustato ribinio langelio gizmo mastelio užfiksavimo atstumą",
    "scalingSnapDistance": "mastelio užfiksavimo atstumas",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setRotationSnapDistance": "nustato rotacijos užfiksavimo atstumą",
    "setRotationSnapDistance": "nustato rotacijos užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setRotationSnapDistance_description": "nustato ribinio langelio gizmo rotacijos užfiksavimo atstumą",
    "rotationSnapDistance": "rotacijos užfiksavimo atstumas",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScaleBoxSize": "nustato mastelio dėžutės dydį",
    "setScaleBoxSize": "nustato mastelio dėžutės dydį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScaleBoxSize_description": "nustato ribinio langelio gizmo mastelio dėžutės dydį",
    "scaleBoxSize": "mastelio dėžutės dydis",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setIncrementalSnap": "nustato inkrementinį užfiksavimą",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setIncrementalSnap_description": "nustato ribinio langelio gizmo inkrementinį užfiksavimą",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScalePivot": "nustato mastelio pasukimo tašką",
    "setScalePivot": "nustato mastelio pasukimo tašką",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScalePivot_description": "nustato ribinio langelio gizmo mastelio pasukimo tašką",
    "scalePivot": "mastelio pasukimo taškas",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setAxisFactor": "nustato ašies faktorių",
    "setAxisFactor": "nustato ašies faktorių",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setAxisFactor_description": "nustato ribinio langelio gizmo ašies faktorių",
    "axisFactor": "ašies faktorius",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScaleDragSpeed": "nustato mastelio tempimo greitį",
    "setScaleDragSpeed": "nustato mastelio tempimo greitį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScaleDragSpeed_description": "nustato ribinio langelio gizmo mastelio tempimo greitį",
    "scaleDragSpeed": "mastelio tempimo greitis",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getRotationSphereSize": "gauna rotacijos sferos dydį",
    "getRotationSphereSize": "gauna rotacijos sferos dydį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getRotationSphereSize_description": "gauna rotacijos sferos dydį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScaleBoxSize": "gauna mastelio dėžutės dydį",
    "getScaleBoxSize": "gauna mastelio dėžutės dydį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScaleBoxSize_description": "gauna mastelio dėžutės dydį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshScreenSize": "gauna fiksuotą tempimo tinklo ekrano dydį",
    "getFixedDragMeshScreenSize": "gauna fiksuotą tempimo tinklo ekrano dydį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshScreenSize_description": "gauna fiksuotą tempimo tinklo ekrano dydį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshBoundsSize": "gauna fiksuotą tempimo tinklo ribų dydį",
    "getFixedDragMeshBoundsSize": "gauna fiksuotą tempimo tinklo ribų dydį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshBoundsSize_description": "gauna fiksuotą tempimo tinklo ribų dydį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshScreenSizeDistanceFactor": "gauna fiksuoto tempimo tinklo ekrano dydžio atstumo faktorių",
    "getFixedDragMeshScreenSizeDistanceFactor": "gauna fiksuoto tempimo tinklo ekrano dydžio atstumo faktorių",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshScreenSizeDistanceFactor_description": "gauna fiksuoto tempimo tinklo ekrano dydžio atstumo faktorių",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScalingSnapDistance": "gauna mastelio užfiksavimo atstumą",
    "getScalingSnapDistance": "gauna mastelio užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScalingSnapDistance_description": "gauna mastelio užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getRotationSnapDistance": "gauna rotacijos užfiksavimo atstumą",
    "getRotationSnapDistance": "gauna rotacijos užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getRotationSnapDistance_description": "gauna rotacijos užfiksavimo atstumą",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getIncrementalSnap": "gauna inkrementinį užfiksavimą",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getIncrementalSnap_description": "gauna inkrementinį užfiksavimą",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScalePivot": "gauna mastelio pasukimo tašką",
    "getScalePivot": "gauna mastelio pasukimo tašką",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScalePivot_description": "gauna mastelio pasukimo tašką",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getAxisFactor": "gauna ašies faktorių",
    "getAxisFactor": "gauna ašies faktorių",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getAxisFactor_description": "gauna ašies faktorių",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScaleDragSpeed": "gauna mastelio tempimo greitį",
    "getScaleDragSpeed": "gauna mastelio tempimo greitį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScaleDragSpeed_description": "gauna mastelio tempimo greitį",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.createBoundingBoxGizmoObservableSelector": "sukuria ribinio langelio gizmo stebėjimo selektorių",
    "createBoundingBoxGizmoObservableSelector": "sukuria ribinio langelio gizmo stebėjimo selektorių",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.createBoundingBoxGizmoObservableSelector_description": "sukuria stebėjimo selektorių ribinio langelio gizmui",
    "boundingBoxGizmoObservableSelectorEnum": "ribinio langelio gizmo stebėjimo selektoriaus enumas",
    "bitbybit.babylon.gizmo.axisDragGizmo.setIsEnabled": "nustato, ar įjungta",
    "axisDragGizmo": "ašies tempimo gizmo",
    "bitbybit.babylon.gizmo.axisDragGizmo.setIsEnabled_description": "nustato, ar ašis įjungta",
    "BABYLON.IAxisDragGizmo": "babylon i ašies tempimo gizmo",
    "bitbybit.babylon.gizmo.axisDragGizmo.getIsEnabled": "gauna, ar įjungta",
    "bitbybit.babylon.gizmo.axisDragGizmo.getIsEnabled_description": "gauna, ar ašis įjungta",
    "bitbybit.babylon.gizmo.axisScaleGizmo.setIsEnabled": "nustato, ar įjungta",
    "axisScaleGizmo": "ašies mastelio gizmo",
    "bitbybit.babylon.gizmo.axisScaleGizmo.setIsEnabled_description": "nustato, ar ašis įjungta",
    "BABYLON.IAxisScaleGizmo": "babylon i ašies mastelio gizmo",
    "bitbybit.babylon.gizmo.axisScaleGizmo.getIsEnabled": "gauna, ar įjungta",
    "bitbybit.babylon.gizmo.axisScaleGizmo.getIsEnabled_description": "gauna, ar ašis įjungta",
    "bitbybit.babylon.gizmo.planeDragGizmo.setIsEnabled": "nustato, ar įjungta",
    "planeDragGizmo": "plokštumos tempimo gizmo",
    "bitbybit.babylon.gizmo.planeDragGizmo.setIsEnabled_description": "nustato, ar plokštuma įjungta",
    "BABYLON.IPlaneDragGizmo": "babylon i plokštumos tempimo gizmo",
    "bitbybit.babylon.gizmo.planeDragGizmo.getIsEnabled": "gauna, ar įjungta",
    "bitbybit.babylon.gizmo.planeDragGizmo.getIsEnabled_description": "gauna, ar plokštuma įjungta",
    "bitbybit.babylon.gizmo.planeRotationGizmo.setIsEnabled": "nustato, ar įjungta",
    "planeRotationGizmo": "plokštumos rotacijos gizmo",
    "bitbybit.babylon.gizmo.planeRotationGizmo.setIsEnabled_description": "nustato, ar plokštuma įjungta",
    "BABYLON.IPlaneRotationGizmo": "babylon i plokštumos rotacijos gizmo",
    "bitbybit.babylon.gizmo.planeRotationGizmo.getIsEnabled": "gauna, ar įjungta",
    "bitbybit.babylon.gizmo.planeRotationGizmo.getIsEnabled_description": "gauna, ar plokštuma įjungta",
    "bitbybit.vector.removeAllDuplicateVectors": "pašalina visus pasikartojančius vektorius",
    "vector": "vektorius",
    "removeAllDuplicateVectors": "pašalinti visus pasikartojančius vektorius",
    "bitbybit.vector.removeAllDuplicateVectors_description": "pašalina visus pasikartojančius vektorius iš masyvo",
    "remove": "pašalinti",
    "vectors": "vektoriai",
    "number[][]": "skaičių masyvas masyve",
    "tolerance": "tolerancija",
    "bitbybit.vector.removeConsecutiveDuplicateVectors": "pašalinti iš eilės pasikartojančius vektorius",
    "removeConsecutiveDuplicateVectors": "pašalinti iš eilės pasikartojančius vektorius",
    "bitbybit.vector.removeConsecutiveDuplicateVectors_description": "pašalina iš eilės pasikartojančius vektorius iš masyvo",
    "checkFirstAndLast": "patikrinti pirmą ir paskutinį",
    "bitbybit.vector.angleBetween": "kampas tarp",
    "angleBetween": "kampas tarp",
    "bitbybit.vector.angleBetween_description": "matuoja kampą tarp dviejų vektorių laipsniais",
    "angles": "kampai",
    "first": "pirmas",
    "second": "antras",
    "bitbybit.vector.angleBetweenNormalized2d": "kampas tarp normalizuotų 2d",
    "angleBetweenNormalized2d": "kampas tarp normalizuotų 2d",
    "bitbybit.vector.angleBetweenNormalized2d_description": "matuoja normalizuotą 2d kampą tarp dviejų vektorių laipsniais",
    "bitbybit.vector.positiveAngleBetween": "teigiamas kampas tarp",
    "positiveAngleBetween": "teigiamas kampas tarp",
    "bitbybit.vector.positiveAngleBetween_description": "matuoja teigiamą kampą tarp dviejų vektorių su nuoroda laipsniais",
    "reference": "nuoroda",
    "bitbybit.vector.addAll": "sudėti visus",
    "addAll": "sudėti visus",
    "bitbybit.vector.addAll_description": "sudeda visų vektorių xyz reikšmes į naują vektorių",
    "sum": "suma",
    "bitbybit.vector.add": "sudėti",
    "add": "sudėti",
    "bitbybit.vector.add_description": "sudeda du vektorius",
    "bitbybit.vector.all": "visi",
    "all": "visi",
    "bitbybit.vector.all_description": "patikrina, ar visi loginio masyvo elementai yra true",
    "boolean[]": "loginis masyvas",
    "bitbybit.vector.cross": "kryžminis",
    "cross": "kryžminis",
    "bitbybit.vector.cross_description": "apskaičiuoja dviejų vektorių kryžminį sandaugą",
    "bitbybit.vector.distSquared": "kvadratinis atstumas",
    "distSquared": "kvadratinis atstumas",
    "bitbybit.vector.distSquared_description": "apskaičiuoja kvadratinį atstumą tarp dviejų vektorių",
    "bitbybit.vector.dist": "atstumas",
    "dist": "atstumas",
    "bitbybit.vector.dist_description": "apskaičiuoja atstumą tarp dviejų vektorių",
    "bitbybit.vector.div": "dalinti",
    "div": "dalinti",
    "bitbybit.vector.div_description": "padalina vektorių iš skaliaro",
    "scalar": "skaliaras",
    "bitbybit.vector.domain": "domenas",
    "domain": "domenas",
    "bitbybit.vector.domain_description": "apskaičiuoja domeną tarp vektoriaus minimumo ir maksimumo",
    "bitbybit.vector.dot": "taškinis",
    "dot": "taškinis",
    "bitbybit.vector.dot_description": "apskaičiuoja dviejų vektorių taškinį sandaugą",
    "bitbybit.vector.finite": "baigtinis",
    "finite": "baigtinis",
    "bitbybit.vector.finite_description": "patikrina, ar vektoriaus skaičiai yra baigtiniai",
    "validate": "patikrinti",
    "bitbybit.vector.isZero": "ar nulis",
    "isZero": "ar nulis",
    "bitbybit.vector.isZero_description": "patikrina, ar vektoriaus ilgis yra nulis",
    "bitbybit.vector.lerp": "lerp",
    "lerp": "lerp",
    "bitbybit.vector.lerp_description": "randa vektorių tarp dviejų vektorių pagal dalį",
    "fraction": "dalis",
    "bitbybit.vector.max": "maksimumas",
    "max": "maksimumas",
    "bitbybit.vector.max_description": "randa didžiausią reikšmę vektoriuje",
    "extract": "ištraukti",
    "bitbybit.vector.min": "minimumas",
    "min": "minimumas",
    "bitbybit.vector.min_description": "randa mažiausią reikšmę vektoriuje",
    "bitbybit.vector.mul": "dauginti",
    "mul": "dauginti",
    "bitbybit.vector.mul_description": "padaugina vektorių iš skaliaro",
    "bitbybit.vector.neg": "neigiamas",
    "neg": "neigiamas",
    "bitbybit.vector.neg_description": "neigia vektorių",
    "bitbybit.vector.normSquared": "kvadratinė norma",
    "normSquared": "kvadratinė norma",
    "bitbybit.vector.normSquared_description": "apskaičiuoja kvadratinę normą",
    "bitbybit.vector.norm": "norma",
    "norm": "norma",
    "bitbybit.vector.norm_description": "apskaičiuoja vektoriaus normą",
    "bitbybit.vector.normalized": "normalizuotas",
    "normalized": "normalizuotas",
    "bitbybit.vector.normalized_description": "normalizuoja vektorių iki vienetinio ilgio",
    "bitbybit.vector.onRay": "ant spindulio",
    "onRay": "ant spindulio",
    "bitbybit.vector.onRay_description": "randa tašką ant spindulio tam tikru atstumu",
    "bitbybit.vector.vectorXYZ": "vektorius xyz",
    "vectorXYZ": "vektorius xyz",
    "bitbybit.vector.vectorXYZ_description": "sukuria xyz vektorių",
    "x": "x",
    "y": "y",
    "z": "z",
    "bitbybit.vector.vectorXY": "vektorius xy",
    "vectorXY": "vektorius xy",
    "bitbybit.vector.vectorXY_description": "sukuria 2d xy vektorių",
    "bitbybit.vector.range": "diapazonas",
    "range": "diapazonas",
    "bitbybit.vector.range_description": "sukuria sveikųjų skaičių vektorių nuo 0 iki maksimumo",
    "bitbybit.vector.signedAngleBetween": "pasirašytas kampas tarp",
    "signedAngleBetween": "pasirašytas kampas tarp",
    "bitbybit.vector.signedAngleBetween_description": "apskaičiuoja pasirašytą kampą tarp dviejų vektorių su nuoroda",
    "bitbybit.vector.span": "intervalas",
    "span": "intervalas",
    "bitbybit.vector.span_description": "sukuria vektorių nuo minimumo iki maksimumo su žingsniu",
    "bitbybit.vector.spanEaseItems": "intervalas su lengvinimo elementais",
    "spanEaseItems": "intervalas su lengvinimo elementais",
    "bitbybit.vector.spanEaseItems_description": "sukuria vektorių nuo minimumo iki maksimumo su lengvinimo funkcija",
    "nrItems": "elementų skaičius",
    "ease": "lengvinimas",
    "Math.easeEnum": "matematikos lengvinimo enumas",
    "intervals": "intervalai",
    "bitbybit.vector.spanLinearItems": "intervalas su linijiniais elementais",
    "spanLinearItems": "intervalas su linijiniais elementais",
    "bitbybit.vector.spanLinearItems_description": "sukuria vektorių nuo minimumo iki maksimumo pagal elementų skaičių",
    "bitbybit.vector.sub": "atimti",
    "sub": "atimti",
    "bitbybit.vector.sub_description": "atimuoja du vektorius",
    "bitbybit.vector.sum": "suma",
    "bitbybit.vector.sum_description": "sudeda vektorių reikšmes",
    "bitbybit.point.transformPoint": "transformuoti tašką",
    "transformPoint": "transformuoti tašką",
    "bitbybit.point.transformPoint_description": "transformuoja vieną tašką",
    "transformation": "transformacija",
    "Base.TransformMatrixes": "bazinės transformacijos matricos",
    "bitbybit.point.transformPoints": "transformuoti taškus",
    "transformPoints": "transformuoti taškus",
    "bitbybit.point.transformPoints_description": "transformuoja kelis taškus",
    "points": "taškai",
    "bitbybit.point.transformsForPoints": "transformacijos taškams",
    "transformsForPoints": "transformacijos taškams",
    "bitbybit.point.transformsForPoints_description": "transformuoja kelis taškus su keliomis transformacijomis",
    "Base.TransformMatrixes[]": "bazinės transformacijos matricų masyvas",
    "bitbybit.point.translatePoints": "perkelti taškus",
    "translatePoints": "perkelti taškus",
    "bitbybit.point.translatePoints_description": "perkelia kelis taškus",
    "bitbybit.point.translatePointsWithVectors": "perkelti taškus su vektoriais",
    "translatePointsWithVectors": "perkelti taškus su vektoriais",
    "bitbybit.point.translatePointsWithVectors_description": "perkelia kelis taškus naudojant vektorius",
    "bitbybit.point.translateXYZPoints": "perkelti xyz taškus",
    "translateXYZPoints": "perkelti xyz taškus",
    "bitbybit.point.translateXYZPoints_description": "perkelia kelis taškus pagal xyz reikšmes",
    "bitbybit.point.scalePointsCenterXYZ": "matuoti taškus nuo centro xyz",
    "scalePointsCenterXYZ": "matuoti taškus nuo centro xyz",
    "bitbybit.point.scalePointsCenterXYZ_description": "matuoja kelis taškus nuo centro pagal xyz koeficientus",
    "bitbybit.point.rotatePointsCenterAxis": "sukti taškus aplink centrą ir ašį",
    "rotatePointsCenterAxis": "sukti taškus aplink centrą ir ašį",
    "bitbybit.point.rotatePointsCenterAxis_description": "suka kelis taškus aplink centrą ir ašį",
    "bitbybit.point.closestPointFromPointsDistance": "artimiausias taškas pagal atstumą",
    "closestPointFromPointsDistance": "artimiausias taškas pagal atstumą",
    "bitbybit.point.closestPointFromPointsDistance_description": "matuoja artimiausią atstumą iki taškų",
    "bitbybit.point.closestPointFromPointsIndex": "artimiausio taško indeksas",
    "closestPointFromPointsIndex": "artimiausio taško indeksas",
    "bitbybit.point.closestPointFromPointsIndex_description": "randa artimiausio taško indeksą (pradedant nuo 1)",
    "bitbybit.point.closestPointFromPoints": "artimiausias taškas",
    "closestPointFromPoints": "artimiausias taškas",
    "bitbybit.point.closestPointFromPoints_description": "randa artimiausią tašką kolekcijoje",
    "bitbybit.point.distance": "atstumas",
    "bitbybit.point.distance_description": "matuoja atstumą tarp dviejų taškų",
    "measure": "matuoti",
    "startPoint": "pradžios taškas",
    "endPoint": "pabaigos taškas",
    "bitbybit.point.distancesToPoints": "atstumai iki taškų",
    "distancesToPoints": "atstumai iki taškų",
    "bitbybit.point.distancesToPoints_description": "matuoja atstumus nuo pradžios iki kelių pabaigos taškų",
    "endPoints": "pabaigos taškai",
    "bitbybit.point.multiplyPoint": "dauginti tašką",
    "multiplyPoint": "dauginti tašką",
    "bitbybit.point.multiplyPoint_description": "daugina tašką iš reikšmės",
    "amountOfPoints": "taškų kiekis",
    "bitbybit.point.getX": "gauti x",
    "getX": "gauti x",
    "bitbybit.point.getX_description": "gauna taško x koordinatę",
    "bitbybit.point.getY": "gauti y",
    "getY": "gauti y",
    "bitbybit.point.getY_description": "gauna taško y koordinatę",
    "bitbybit.point.getZ": "gauti z",
    "getZ": "gauti z",
    "bitbybit.point.getZ_description": "gauna taško z koordinatę",
    "bitbybit.point.averagePoint": "vidutinis taškas",
    "averagePoint": "vidutinis taškas",
    "bitbybit.point.averagePoint_description": "gauna taškų vidurkį",
    "bitbybit.point.pointXYZ": "xyz taškas",
    "pointXYZ": "xyz taškas",
    "bitbybit.point.pointXYZ_description": "sukuria xyz tašką",
    "bitbybit.point.pointXY": "xy taškas",
    "pointXY": "xy taškas",
    "bitbybit.point.pointXY_description": "sukuria xy tašką",
    "bitbybit.point.spiral": "spiralė",
    "spiral": "spiralė",
    "bitbybit.point.spiral_description": "sukuria spiralę iš kelių taškų",
    "phi": "phi",
    "numberPoints": "taškų skaičius",
    "widening": "plėtimas",
    "factor": "koeficientas",
    "bitbybit.point.hexGrid": "šešiakampių tinklelis",
    "hexGrid": "šešiakampių tinklelis",
    "bitbybit.point.hexGrid_description": "sukuria plokščią šešiakampių tinklelį xy plokštumoje",
    "nrHexagonsY": "šešiakampių skaičius y",
    "nrHexagonsX": "šešiakampių skaičius x",
    "radiusHexagon": "šešiakampio spindulys",
    "orientOnCenter": "orientuoti į centrą",
    "pointsOnGround": "taškai ant žemės",
    "bitbybit.point.removeConsecutiveDuplicates": "pašalinti pasikartojančius taškus",
    "removeConsecutiveDuplicates": "pašalinti pasikartojančius taškus",
    "bitbybit.point.removeConsecutiveDuplicates_description": "pašalina pasikartojančius taškus iš masyvo",
    "clean": "išvalyti",
    "bitbybit.line.convertToNurbsCurve": "konvertuoti į nurbs kreivę",
    "line": "linija",
    "convertToNurbsCurve": "konvertuoti į nurbs kreivę",
    "bitbybit.line.convertToNurbsCurve_description": "konvertuoja liniją į nurbs kreivę",
    "LinePointsDto": "linijos taškų dto",
    "bitbybit.line.convertLinesToNurbsCurves": "konvertuoti linijas į nurbs kreives",
    "convertLinesToNurbsCurves": "konvertuoti linijas į nurbs kreives",
    "bitbybit.line.convertLinesToNurbsCurves_description": "konvertuoja linijų masyvą į nurbs kreives",
    "lines": "linijos",
    "LinePointsDto[]": "linijos taškų dto masyvas",
    "bitbybit.line.getStartPoint": "gauti pradžios tašką",
    "getStartPoint": "gauti pradžios tašką",
    "bitbybit.line.getStartPoint_description": "gauna linijos pradžios tašką",
    "bitbybit.line.getEndPoint": "gauti pabaigos tašką",
    "getEndPoint": "gauti pabaigos tašką",
    "bitbybit.line.getEndPoint_description": "gauna linijos pabaigos tašką",
    "bitbybit.line.length": "ilgis",
    "bitbybit.line.length_description": "gauna linijos ilgį",
    "bitbybit.line.reverse": "apversti",
    "reverse": "apversti",
    "bitbybit.line.reverse_description": "apverčia linijos galinius taškus",
    "bitbybit.line.transformLine": "transformuoti liniją",
    "transformLine": "transformuoti liniją",
    "bitbybit.line.transformLine_description": "transformuoja liniją",
    "bitbybit.line.transformsForLines": "transformacijos linijoms",
    "transformsForLines": "transformacijos linijoms",
    "bitbybit.line.transformsForLines_description": "transformuoja kelias linijas",
    "bitbybit.line.create": "sukurti",
    "bitbybit.line.create_description": "sukuria liniją",
    "bitbybit.line.createAsync": "asinchroniškas",
    "createAsync": "asinchroniškas",
    "bitbybit.line.createAsync_description": "sukuria liniją iš asinchroninių taškų",
    "bitbybit.line.getPointOnLine": "gauti tašką ant linijos",
    "getPointOnLine": "gauti tašką ant linijos",
    "bitbybit.line.getPointOnLine_description": "gauna tašką ant linijos pagal parametrą",
    "param": "parametras",
    "bitbybit.line.linesBetweenPoints": "linijos tarp taškų",
    "linesBetweenPoints": "linijos tarp taškų",
    "bitbybit.line.linesBetweenPoints_description": "sukuria linijos segmentus tarp taškų",
    "bitbybit.line.linesBetweenStartAndEndPoints": "linijos tarp pradžios ir pabaigos taškų",
    "linesBetweenStartAndEndPoints": "linijos tarp pradžios ir pabaigos taškų",
    "bitbybit.line.linesBetweenStartAndEndPoints_description": "sukuria linijas tarp pradžios ir pabaigos taškų sąrašų",
    "startPoints": "pradžios taškai",
    "bitbybit.line.linesBetweenStartAndEndPointsAsync": "linijos tarp pradžios ir pabaigos taškų asinchroniškai",
    "linesBetweenStartAndEndPointsAsync": "linijos tarp pradžios ir pabaigos taškų asinchroniškai",
    "bitbybit.line.linesBetweenStartAndEndPointsAsync_description": "sukuria linijas tarp pradžios ir pabaigos taškų su asinchroniniais įvestimis",
    "bitbybit.polyline.convertToNurbsCurve": "konvertuoti į nurbs kreivę",
    "polyline": "polilinija",
    "bitbybit.polyline.convertToNurbsCurve_description": "konvertuoja poliliniją į nurbs kreivę",
    "PolylinePropertiesDto": "polilinijos savybių dto",
    "bitbybit.polyline.length": "ilgis",
    "bitbybit.polyline.length_description": "gauna polilinijos ilgį",
    "bitbybit.polyline.countPoints": "taškų skaičius",
    "countPoints": "taškų skaičius",
    "bitbybit.polyline.countPoints_description": "gauna polilinijos taškų skaičių",
    "bitbybit.polyline.getPoints": "gauti taškus",
    "getPoints": "gauti taškus",
    "bitbybit.polyline.getPoints_description": "gauna polilinijos taškus",
    "bitbybit.polyline.reverse": "apversti",
    "bitbybit.polyline.reverse_description": "apverčia polilinijos taškus",
    "bitbybit.polyline.transformPolyline": "transformuoti poliliniją",
    "transformPolyline": "transformuoti poliliniją",
    "bitbybit.polyline.transformPolyline_description": "transformuoja poliliniją",
    "bitbybit.polyline.create": "sukurti",
    "bitbybit.polyline.create_description": "sukuria poliliniją",
    "isClosed": "uždaryta",
    "string | number[]": "tekstas arba skaičių masyvas",
    "bitbybit.occt.deleteShape": "ištrinti formą",
    "occt": "occt",
    "deleteShape": "ištrinti formą",
    "bitbybit.occt.deleteShape_description": "ištrina formą iš talpyklos",
    "bitbybit.occt.deleteShapes": "ištrinti formas",
    "deleteShapes": "ištrinti formas",
    "bitbybit.occt.deleteShapes_description": "ištrina formas iš talpyklos",
    "shapes": "formos",
    "T[]": "t masyvas",
    "bitbybit.occt.cleanAllCache": "išvalyti visą talpyklą",
    "cleanAllCache": "išvalyti visą talpyklą",
    "bitbybit.occt.cleanAllCache_description": "išvalo visą talpyklą ir formas iš atminties",
    "bitbybit.occt.shapes.vertex.vertexFromXYZ": "viršūnė iš xyz",
    "vertex": "viršūnė",
    "vertexFromXYZ": "viršūnė iš xyz",
    "bitbybit.occt.shapes.vertex.vertexFromXYZ_description": "sukuria viršūnę iš xyz koordinatės",
    "bitbybit.occt.shapes.vertex.vertexFromPoint": "viršūnė iš taško",
    "vertexFromPoint": "viršūnė iš taško",
    "bitbybit.occt.shapes.vertex.vertexFromPoint_description": "sukuria viršūnę iš taško",
    "bitbybit.occt.shapes.vertex.verticesFromPoints": "viršūnės iš taškų",
    "verticesFromPoints": "viršūnės iš taškų",
    "bitbybit.occt.shapes.vertex.verticesFromPoints_description": "sukuria viršūnes iš taškų",
    "bitbybit.occt.shapes.vertex.verticesCompoundFromPoints": "viršūnių junginys iš taškų",
    "verticesCompoundFromPoints": "viršūnių junginys iš taškų",
    "bitbybit.occt.shapes.vertex.verticesCompoundFromPoints_description": "sukuria viršūnių junginio formą",
    "bitbybit.occt.shapes.vertex.getVertices": "gauti viršūnes",
    "getVertices": "gauti viršūnes",
    "bitbybit.occt.shapes.vertex.getVertices_description": "gauna visas viršūnes iš formos",
    "bitbybit.occt.shapes.vertex.getVerticesAsPoints": "gauti viršūnes kaip taškus",
    "getVerticesAsPoints": "gauti viršūnes kaip taškus",
    "bitbybit.occt.shapes.vertex.getVerticesAsPoints_description": "gauna visas viršūnes kaip taškus",
    "bitbybit.occt.shapes.vertex.verticesToPoints": "viršūnės į taškus",
    "verticesToPoints": "viršūnės į taškus",
    "bitbybit.occt.shapes.vertex.verticesToPoints_description": "transformuoja viršūnes į taškus",
    "transform": "transformuoti",
    "bitbybit.occt.shapes.vertex.vertexToPoint": "viršūnė į tašką",
    "vertexToPoint": "viršūnė į tašką",
    "bitbybit.occt.shapes.vertex.vertexToPoint_description": "transformuoja viršūnę į tašką",
    "bitbybit.occt.shapes.vertex.projectPoints": "projektuoti taškus",
    "projectPoints": "projektuoti taškus",
    "bitbybit.occt.shapes.vertex.projectPoints_description": "projektuoja taškus ant formos",
    "place": "vieta",
    "projectionType": "projekcijos tipas",
    "pointProjectionTypeEnum": "taško projekcijos tipo išvardijimas",
    "bitbybit.occt.shapes.edge.line": "linija",
    "edge": "briauna",
    "bitbybit.occt.shapes.edge.line_description": "sukuria tiesinę briauną tarp dviejų taškų",
    "primitives": "primityvai",
    "bitbybit.occt.shapes.edge.arcThroughThreePoints": "lankas per tris taškus",
    "arcThroughThreePoints": "lankas per tris taškus",
    "bitbybit.occt.shapes.edge.arcThroughThreePoints_description": "sukuria lanko briauną per tris taškus",
    "middle": "vidurys",
    "bitbybit.occt.shapes.edge.arcThroughTwoPointsAndTangent": "lankas per du taškus ir tangentą",
    "arcThroughTwoPointsAndTangent": "lankas per du taškus ir tangentą",
    "bitbybit.occt.shapes.edge.arcThroughTwoPointsAndTangent_description": "sukuria lanko briauną su tangentu pirmame taške",
    "tangentVec": "tangento vektorius",
    "bitbybit.occt.shapes.edge.arcFromCircleAndTwoPoints": "lankas iš apskritimo ir dviejų taškų",
    "arcFromCircleAndTwoPoints": "lankas iš apskritimo ir dviejų taškų",
    "bitbybit.occt.shapes.edge.arcFromCircleAndTwoPoints_description": "sukuria lanko briauną apskritime tarp dviejų taškų",
    "circle": "apskritimas",
    "sense": "jausti",
    "bitbybit.occt.shapes.edge.arcFromCircleAndTwoAngles": "lankas iš apskritimo ir dviejų kampų",
    "arcFromCircleAndTwoAngles": "lankas iš apskritimo ir dviejų kampų",
    "bitbybit.occt.shapes.edge.arcFromCircleAndTwoAngles_description": "sukuria lanko briauną apskritime tarp dviejų kampų",
    "alphaAngle1": "alfa kampas 1",
    "alphaAngle2": "alfa kampas 2",
    "bitbybit.occt.shapes.edge.arcFromCirclePointAndAngle": "lankas iš apskritimo taško ir kampo",
    "arcFromCirclePointAndAngle": "lankas iš apskritimo taško ir kampo",
    "bitbybit.occt.shapes.edge.arcFromCirclePointAndAngle_description": "sukuria lanko briauną apskritime nuo taško iki kampo",
    "alphaAngle": "alfa kampas",
    "bitbybit.occt.shapes.edge.createCircleEdge": "apskritimo briauna",
    "createCircleEdge": "apskritimo briauna",
    "bitbybit.occt.shapes.edge.createCircleEdge_description": "sukuria opencascade apskritimo briauną",
    "bitbybit.occt.shapes.edge.createEllipseEdge": "elipsės briauna",
    "createEllipseEdge": "elipsės briauna",
    "bitbybit.occt.shapes.edge.createEllipseEdge_description": "sukuria opencascade elipsės briauną",
    "radiusMinor": "mažasis spindulys",
    "radiusMajor": "didysis spindulys",
    "bitbybit.occt.shapes.edge.removeInternalEdges": "pašalinti vidines briaunas",
    "removeInternalEdges": "pašalinti vidines briaunas",
    "bitbybit.occt.shapes.edge.removeInternalEdges_description": "pašalina vidines briaunas iš formos",
    "bitbybit.occt.shapes.edge.makeEdgeFromGeom2dCurveAndSurface": "briauna iš geom 2d kreivės ir paviršiaus",
    "makeEdgeFromGeom2dCurveAndSurface": "briauna iš geom 2d kreivės ir paviršiaus",
    "bitbybit.occt.shapes.edge.makeEdgeFromGeom2dCurveAndSurface_description": "sukuria briauną iš geom kreivės ir paviršiaus",
    "curve": "kreivė",
    "surface": "paviršius",
    "U": "u",
    "bitbybit.occt.shapes.edge.getEdge": "gauti briauną",
    "getEdge": "gauti briauną",
    "bitbybit.occt.shapes.edge.getEdge_description": "gauna briauną pagal indeksą iš formos",
    "index": "indeksas",
    "bitbybit.occt.shapes.edge.getEdges": "gauti briaunas",
    "getEdges": "gauti briaunas",
    "bitbybit.occt.shapes.edge.getEdges_description": "gauna briaunas iš formos",
    "bitbybit.occt.shapes.edge.getEdgesAlongWire": "gauti briaunas pagal vielos kryptį",
    "getEdgesAlongWire": "gauti briaunas pagal vielos kryptį",
    "bitbybit.occt.shapes.edge.getEdgesAlongWire_description": "gauna briaunas pagal vielos kryptį",
    "bitbybit.occt.shapes.edge.getCircularEdgesAlongWire": "gauti apskritimo briaunas pagal vielos kryptį",
    "getCircularEdgesAlongWire": "gauti apskritimo briaunas pagal vielos kryptį",
    "bitbybit.occt.shapes.edge.getCircularEdgesAlongWire_description": "gauna apskritimo briaunas pagal vielos kryptį",
    "bitbybit.occt.shapes.edge.getLinearEdgesAlongWire": "gauti tiesines briaunas pagal vielos kryptį",
    "getLinearEdgesAlongWire": "gauti tiesines briaunas pagal vielos kryptį",
    "bitbybit.occt.shapes.edge.getLinearEdgesAlongWire_description": "gauna tiesines briaunas pagal vielos kryptį",
    "bitbybit.occt.shapes.edge.getCornerPointsOfEdgesForShape": "gauti briaunų kampinius taškus formai",
    "getCornerPointsOfEdgesForShape": "gauti briaunų kampinius taškus formai",
    "bitbybit.occt.shapes.edge.getCornerPointsOfEdgesForShape_description": "gauna unikalius briaunų kampinius taškus",
    "bitbybit.occt.shapes.edge.getEdgeLength": "gauti briaunos ilgį",
    "getEdgeLength": "gauti briaunos ilgį",
    "bitbybit.occt.shapes.edge.getEdgeLength_description": "gauna briaunos ilgį",
    "bitbybit.occt.shapes.edge.getEdgeLengthsOfShape": "gauti formos briaunų ilgius",
    "getEdgeLengthsOfShape": "gauti formos briaunų ilgius",
    "bitbybit.occt.shapes.edge.getEdgeLengthsOfShape_description": "gauna briaunų ilgius iš formos",
    "bitbybit.occt.shapes.edge.getEdgesLengths": "gauti briaunų ilgius",
    "getEdgesLengths": "gauti briaunų ilgius",
    "bitbybit.occt.shapes.edge.getEdgesLengths_description": "gauna briaunų ilgius",
    "bitbybit.occt.shapes.edge.getEdgeCenterOfMass": "gauti briaunos masės centrą",
    "getEdgeCenterOfMass": "gauti briaunos masės centrą",
    "bitbybit.occt.shapes.edge.getEdgeCenterOfMass_description": "gauna briaunos masės centrą",
    "bitbybit.occt.shapes.edge.getEdgesCentersOfMass": "gauti briaunų masės centrus",
    "getEdgesCentersOfMass": "gauti briaunų masės centrus",
    "bitbybit.occt.shapes.edge.getEdgesCentersOfMass_description": "gauna briaunų masės centrus",
    "bitbybit.occt.shapes.edge.getCircularEdgeCenterPoint": "gauti apskritimo briaunos centro tašką",
    "getCircularEdgeCenterPoint": "gauti apskritimo briaunos centro tašką",
    "bitbybit.occt.shapes.edge.getCircularEdgeCenterPoint_description": "gauna apskritimo briaunos centro tašką",
    "get circular edge": "gauti apskritimo briauną",
    "bitbybit.occt.shapes.edge.getCircularEdgeRadius": "gauti apskritimo briaunos spindulį",
    "getCircularEdgeRadius": "gauti apskritimo briaunos spindulį",
    "bitbybit.occt.shapes.edge.getCircularEdgeRadius_description": "gauna apskritimo briaunos spindulį",
    "bitbybit.occt.shapes.edge.getCircularEdgePlaneDirection": "gauti apskritimo briaunos plokštumos kryptį",
    "getCircularEdgePlaneDirection": "gauti apskritimo briaunos plokštumos kryptį",
    "bitbybit.occt.shapes.edge.getCircularEdgePlaneDirection_description": "gauna apskritimo briaunos plokštumos kryptį",
    "bitbybit.occt.shapes.edge.pointOnEdgeAtParam": "taškas ant briaunos pagal parametrą",
    "pointOnEdgeAtParam": "taškas ant briaunos pagal parametrą",
    "bitbybit.occt.shapes.edge.pointOnEdgeAtParam_description": "gauna tašką ant briaunos pagal parametrą",
    "bitbybit.occt.shapes.edge.pointsOnEdgesAtParam": "taškai ant briaunų pagal parametrą",
    "pointsOnEdgesAtParam": "taškai ant briaunų pagal parametrą",
    "bitbybit.occt.shapes.edge.pointsOnEdgesAtParam_description": "gauna taškus ant briaunų pagal parametrą",
    "bitbybit.occt.shapes.edge.edgesToPoints": "briaunos į taškus",
    "edgesToPoints": "briaunos į taškus",
    "bitbybit.occt.shapes.edge.edgesToPoints_description": "gauna briaunų taškus atskirose sąrašuose",
    "angularDeflection": "kampinis nukrypimas",
    "curvatureDeflection": "kreivumo nukrypimas",
    "minimumOfPoints": "minimalus taškų skaičius",
    "uTolerance": "u tolerancija",
    "minimumLength": "minimalus ilgis",
    "bitbybit.occt.shapes.edge.reversedEdge": "apversta briauna",
    "reversedEdge": "apversta briauna",
    "bitbybit.occt.shapes.edge.reversedEdge_description": "apskaičiuoja apverstą briauną",
    "bitbybit.occt.shapes.edge.tangentOnEdgeAtParam": "tangentas ant briaunos pagal parametrą",
    "tangentOnEdgeAtParam": "tangentas ant briaunos ties parametru",
    "bitbybit.occt.shapes.edge.tangentOnEdgeAtParam_description": "gauna tangentą ant briaunos ties nurodytu parametru",
    "bitbybit.occt.shapes.edge.tangentsOnEdgesAtParam": "tangentai ant briaunų ties parametru",
    "tangentsOnEdgesAtParam": "tangentai ant briaunų ties parametru",
    "bitbybit.occt.shapes.edge.tangentsOnEdgesAtParam_description": "gauna tangentus ant briaunų ties nurodytu parametru",
    "bitbybit.occt.shapes.edge.pointOnEdgeAtLength": "taškas ant briaunos ties ilgiu",
    "pointOnEdgeAtLength": "taškas ant briaunos ties ilgiu",
    "bitbybit.occt.shapes.edge.pointOnEdgeAtLength_description": "gauna tašką ant briaunos ties nurodytu ilgiu",
    "bitbybit.occt.shapes.edge.pointsOnEdgesAtLength": "taškai ant briaunų ties ilgiu",
    "pointsOnEdgesAtLength": "taškai ant briaunų ties ilgiu",
    "bitbybit.occt.shapes.edge.pointsOnEdgesAtLength_description": "gauna taškus ant briaunų ties nurodytu ilgiu",
    "bitbybit.occt.shapes.edge.tangentOnEdgeAtLength": "tangentas ant briaunos ties ilgiu",
    "tangentOnEdgeAtLength": "tangentas ant briaunos ties ilgiu",
    "bitbybit.occt.shapes.edge.tangentOnEdgeAtLength_description": "gauna tangentą ant briaunos ties nurodytu ilgiu",
    "bitbybit.occt.shapes.edge.tangentsOnEdgesAtLength": "tangentai ant briaunų ties ilgiu",
    "tangentsOnEdgesAtLength": "tangentai ant briaunų ties ilgiu",
    "bitbybit.occt.shapes.edge.tangentsOnEdgesAtLength_description": "gauna tangentus ant briaunų ties nurodytu ilgiu",
    "bitbybit.occt.shapes.edge.startPointOnEdge": "pradžios taškas ant briaunos",
    "startPointOnEdge": "pradžios taškas ant briaunos",
    "bitbybit.occt.shapes.edge.startPointOnEdge_description": "gauna pradžios tašką ant briaunos",
    "bitbybit.occt.shapes.edge.startPointsOnEdges": "pradžios taškai ant briaunų",
    "startPointsOnEdges": "pradžios taškai ant briaunų",
    "bitbybit.occt.shapes.edge.startPointsOnEdges_description": "gauna pradžios taškus ant briaunų",
    "bitbybit.occt.shapes.edge.endPointOnEdge": "pabaigos taškas ant briaunos",
    "endPointOnEdge": "pabaigos taškas ant briaunos",
    "bitbybit.occt.shapes.edge.endPointOnEdge_description": "gauna pabaigos tašką ant briaunos",
    "bitbybit.occt.shapes.edge.endPointsOnEdges": "pabaigos taškai ant briaunų",
    "endPointsOnEdges": "pabaigos taškai ant briaunų",
    "bitbybit.occt.shapes.edge.endPointsOnEdges_description": "gauna pabaigos taškus ant briaunų",
    "bitbybit.occt.shapes.edge.divideEdgeByParamsToPoints": "padalinti briauną pagal parametrus į taškus",
    "divideEdgeByParamsToPoints": "padalinti briauną pagal parametrus į taškus",
    "bitbybit.occt.shapes.edge.divideEdgeByParamsToPoints_description": "padalina briauną pagal parametrus į taškus",
    "nrOfDivisions": "padalijimų skaičius",
    "removeStartPoint": "pašalinti pradžios tašką",
    "removeEndPoint": "pašalinti pabaigos tašką",
    "bitbybit.occt.shapes.edge.divideEdgesByParamsToPoints": "padalinti briaunas pagal parametrus į taškus",
    "divideEdgesByParamsToPoints": "padalinti briaunas pagal parametrus į taškus",
    "bitbybit.occt.shapes.edge.divideEdgesByParamsToPoints_description": "padalina briaunas pagal parametrus į taškus",
    "bitbybit.occt.shapes.edge.divideEdgeByEqualDistanceToPoints": "padalinti briauną pagal vienodą atstumą į taškus",
    "divideEdgeByEqualDistanceToPoints": "padalinti briauną pagal vienodą atstumą į taškus",
    "bitbybit.occt.shapes.edge.divideEdgeByEqualDistanceToPoints_description": "padalina briauną pagal ilgį į taškus",
    "bitbybit.occt.shapes.edge.divideEdgesByEqualDistanceToPoints": "padalinti briaunas pagal vienodą atstumą į taškus",
    "divideEdgesByEqualDistanceToPoints": "padalinti briaunas pagal vienodą atstumą į taškus",
    "bitbybit.occt.shapes.edge.divideEdgesByEqualDistanceToPoints_description": "padalina briaunas pagal ilgį į taškus",
    "bitbybit.occt.shapes.edge.constraintTanLinesFromTwoPtsToCircle": "tangentinės linijos iš dviejų taškų į apskritimą",
    "constraintTanLinesFromTwoPtsToCircle": "tangentinės linijos iš dviejų taškų į apskritimą",
    "bitbybit.occt.shapes.edge.constraintTanLinesFromTwoPtsToCircle_description": "sukuria linijas iš dviejų taškų į apskritimo tangentus",
    "constraint": "apribojimas",
    "point1": "taškas 1",
    "point2": "taškas 2",
    "positionResult": "pozicijos rezultatas",
    "positionResultEnum": "pozicijos rezultato enum",
    "circleRemainder": "apskritimo likutis",
    "circleInclusionEnum": "apskritimo įtraukimo enum",
    "bitbybit.occt.shapes.edge.constraintTanLinesFromPtToCircle": "tangentinės linijos iš taško į apskritimą",
    "constraintTanLinesFromPtToCircle": "tangentinės linijos iš taško į apskritimą",
    "bitbybit.occt.shapes.edge.constraintTanLinesFromPtToCircle_description": "sukuria linijas iš taško į apskritimo tangentus",
    "bitbybit.occt.shapes.edge.constraintTanLinesOnTwoCircles": "tangentinės linijos tarp dviejų apskritimų",
    "constraintTanLinesOnTwoCircles": "tangentinės linijos tarp dviejų apskritimų",
    "bitbybit.occt.shapes.edge.constraintTanLinesOnTwoCircles_description": "sukuria tangentines linijas tarp dviejų apskritimų",
    "circle1": "apskritimas 1",
    "circle2": "apskritimas 2",
    "circleRemainders": "apskritimų likučiai",
    "twoCircleInclusionEnum": "dviejų apskritimų įtraukimo enum",
    "bitbybit.occt.shapes.edge.constraintTanCirclesOnTwoCircles": "tangentiniai apskritimai tarp dviejų apskritimų",
    "constraintTanCirclesOnTwoCircles": "tangentiniai apskritimai tarp dviejų apskritimų",
    "bitbybit.occt.shapes.edge.constraintTanCirclesOnTwoCircles_description": "sukuria tangentinius apskritimus tarp dviejų apskritimų",
    "bitbybit.occt.shapes.edge.constraintTanCirclesOnCircleAndPnt": "tangentiniai apskritimai tarp apskritimo ir taško",
    "constraintTanCirclesOnCircleAndPnt": "tangentiniai apskritimai tarp apskritimo ir taško",
    "bitbybit.occt.shapes.edge.constraintTanCirclesOnCircleAndPnt_description": "sukuria tangentinius apskritimus tarp taško ir apskritimo",
    "bitbybit.occt.shapes.edge.isEdgeLinear": "briauna yra tiesinė",
    "isEdgeLinear": "briauna yra tiesinė",
    "bitbybit.occt.shapes.edge.isEdgeLinear_description": "patikrina, ar briauna yra tiesinė",
    "is": "yra",
    "bitbybit.occt.shapes.edge.isEdgeCircular": "briauna yra apskritiminė",
    "isEdgeCircular": "briauna yra apskritiminė",
    "bitbybit.occt.shapes.edge.isEdgeCircular_description": "patikrina, ar briauna yra apskritiminė",
    "bitbybit.occt.shapes.wire.createPolygonWire": "daugiakampio viela",
    "wire": "viela",
    "createPolygonWire": "daugiakampio viela",
    "bitbybit.occt.shapes.wire.createPolygonWire_description": "sukuria opencascade daugiakampio vielą",
    "via points": "per taškus",
    "bitbybit.occt.shapes.wire.createPolygons": "daugiakampiai",
    "createPolygons": "daugiakampiai",
    "bitbybit.occt.shapes.wire.createPolygons_description": "sukuria opencascade daugiakampius",
    "multiple": "daugkartiniai",
    "polygons": "daugiakampiai",
    "PolygonDto[]": "daugiakampio dto masyvas",
    "returnCompound": "grąžinti junginį",
    "bitbybit.occt.shapes.wire.createLineWire": "linijos viela",
    "createLineWire": "linijos vielą",
    "bitbybit.occt.shapes.wire.createLineWire_description": "sukuria opencascade linijos vielą",
    "bitbybit.occt.shapes.wire.createLines": "linijos",
    "createLines": "linijos",
    "bitbybit.occt.shapes.wire.createLines_description": "sukuria opencascade linijas",
    "LineDto[]": "linijos dto masyvas",
    "bitbybit.occt.shapes.wire.splitOnPoints": "padalinti pagal taškus",
    "splitOnPoints": "padalinti pagal taškus",
    "bitbybit.occt.shapes.wire.splitOnPoints_description": "padalina vielą pagal nurodytus taškus",
    "bitbybit.occt.shapes.wire.wiresToPoints": "vielos į taškus",
    "wiresToPoints": "vielos į taškus",
    "bitbybit.occt.shapes.wire.wiresToPoints_description": "transformuoja vielas į taškus tvarkinguose sąrašuose",
    "bitbybit.occt.shapes.wire.createPolylineWire": "polilinijos vielos",
    "createPolylineWire": "polilinijos vielos",
    "bitbybit.occt.shapes.wire.createPolylineWire_description": "sukuria opencascade polilinijos vielą",
    "bitbybit.occt.shapes.wire.createZigZagBetweenTwoWires": "zigzagą tarp dviejų vielų",
    "createZigZagBetweenTwoWires": "zigzagas tarp dviejų vielų",
    "bitbybit.occt.shapes.wire.createZigZagBetweenTwoWires_description": "sukuria zigzagą tarp dviejų vielų",
    "via wires": "per vielas",
    "wire1": "viela 1",
    "wire2": "viela 2",
    "nrZigZags": "zigzagų skaičius",
    "inverse": "atvirkštinis",
    "divideByEqualDistance": "padalinti pagal vienodą atstumą",
    "zigZagsPerEdge": "zigzagų skaičius per briauną",
    "bitbybit.occt.shapes.wire.createWireFromTwoCirclesTan": "viela iš dviejų apskritimų tangentų",
    "createWireFromTwoCirclesTan": "viela iš dviejų apskritimų tangentų",
    "bitbybit.occt.shapes.wire.createWireFromTwoCirclesTan_description": "sukuria tangentų vielą, apimančią du plokščius apskritimus",
    "keepLines": "išlaikyti linijas",
    "twoSidesStrictEnum": "dviejų pusių griežtas enum",
    "fourSidesStrictEnum": "keturių pusių griežtas enum",
    "bitbybit.occt.shapes.wire.createPolylines": "polilinijos",
    "createPolylines": "polilinijos",
    "bitbybit.occt.shapes.wire.createPolylines_description": "sukuria opencascade polilinijos vielas",
    "polylines": "polilinijos",
    "PolylineDto[]": "polilinijos dto masyvas",
    "bitbybit.occt.shapes.wire.createBezier": "bezier",
    "createBezier": "bezier",
    "bitbybit.occt.shapes.wire.createBezier_description": "sukuria opencascade bezier vielą",
    "bitbybit.occt.shapes.wire.createBezierWeights": "bezier su svoriais",
    "createBezierWeights": "bezier su svoriais",
    "bitbybit.occt.shapes.wire.createBezierWeights_description": "sukuria opencascade bezier vielą su svoriais",
    "weights": "svoriai",
    "bitbybit.occt.shapes.wire.createBezierWires": "bezier vielos",
    "createBezierWires": "bezier vielos",
    "bitbybit.occt.shapes.wire.createBezierWires_description": "sukuria opencascade bezier vielas",
    "bezierWires": "bezier vielos",
    "BezierDto[]": "bezier dto masyvas",
    "bitbybit.occt.shapes.wire.interpolatePoints": "interpoliuoti taškus",
    "interpolatePoints": "interpoliuoti taškus",
    "bitbybit.occt.shapes.wire.interpolatePoints_description": "sukuria opencascade bspline vielą iš taškų",
    "periodic": "periodinis",
    "bitbybit.occt.shapes.wire.interpolateWires": "interpoliuoti vielas",
    "interpolateWires": "interpoliuoti vielas",
    "bitbybit.occt.shapes.wire.interpolateWires_description": "sukuria kelias opencascade interpoliuotas vielas",
    "interpolations": "interpoliacijos",
    "InterpolationDto[]": "interpoliacijos dto masyvas",
    "bitbybit.occt.shapes.wire.createBSpline": "bspline",
    "createBSpline": "bspline",
    "bitbybit.occt.shapes.wire.createBSpline_description": "sukuria opencascade bspline vielą",
    "bitbybit.occt.shapes.wire.createBSplines": "bsplines",
    "createBSplines": "bsplines",
    "bitbybit.occt.shapes.wire.createBSplines_description": "sukuria opencascade bspline vielas",
    "bSplines": "bsplines",
    "BSplineDto[]": "bspline dto masyvas",
    "bitbybit.occt.shapes.wire.combineEdgesAndWiresIntoAWire": "sujungti briaunas ir vielas į vieną vielą",
    "combineEdgesAndWiresIntoAWire": "sujungti briaunas ir vielas į vieną vielą",
    "bitbybit.occt.shapes.wire.combineEdgesAndWiresIntoAWire_description": "sujungia briaunas ir vielas į vieną vielą",
    "build": "sukurti",
    "bitbybit.occt.shapes.wire.createWireFromEdge": "vielą iš briaunos",
    "createWireFromEdge": "vielą iš briaunos",
    "bitbybit.occt.shapes.wire.createWireFromEdge_description": "sukuria vielą iš briaunos",
    "bitbybit.occt.shapes.wire.addEdgesAndWiresToWire": "pridėti briaunas ir vielas prie vielos",
    "addEdgesAndWiresToWire": "pridėti briaunas ir vielas prie vielos",
    "bitbybit.occt.shapes.wire.addEdgesAndWiresToWire_description": "prideda briaunas ir vielas prie vielos",
    "U[]": "u masyvas",
    "bitbybit.occt.shapes.wire.divideWireByParamsToPoints": "padalinti vielą pagal parametrus į taškus",
    "divideWireByParamsToPoints": "padalinti vielą pagal parametrus į taškus",
    "bitbybit.occt.shapes.wire.divideWireByParamsToPoints_description": "padalina vielą į taškus pagal parametrus",
    "bitbybit.occt.shapes.wire.divideWiresByParamsToPoints": "padalinti vielas pagal parametrus į taškus",
    "divideWiresByParamsToPoints": "padalinti vielas pagal parametrus į taškus",
    "bitbybit.occt.shapes.wire.divideWiresByParamsToPoints_description": "padalina vielas į taškus pagal parametrus",
    "extract from wires": "išgauti iš vielų",
    "bitbybit.occt.shapes.wire.divideWireByEqualDistanceToPoints": "padalinti vielą pagal lygų atstumą į taškus",
    "divideWireByEqualDistanceToPoints": "padalinti vielą pagal lygų atstumą į taškus",
    "bitbybit.occt.shapes.wire.divideWireByEqualDistanceToPoints_description": "padalina vielą į taškus pagal lygų atstumą",
    "bitbybit.occt.shapes.wire.divideWiresByEqualDistanceToPoints": "padalinti vielas pagal lygų atstumą į taškus",
    "divideWiresByEqualDistanceToPoints": "padalinti vielas pagal lygų atstumą į taškus",
    "bitbybit.occt.shapes.wire.divideWiresByEqualDistanceToPoints_description": "padalina vielas į taškus pagal lygų atstumą",
    "bitbybit.occt.shapes.wire.pointOnWireAtParam": "taškas ant vielos pagal parametrą",
    "pointOnWireAtParam": "taškas ant vielos pagal parametrą",
    "bitbybit.occt.shapes.wire.pointOnWireAtParam_description": "gauna tašką ant vielos pagal parametrą",
    "bitbybit.occt.shapes.wire.pointOnWireAtLength": "taškas ant vielos pagal ilgį",
    "pointOnWireAtLength": "taškas ant vielos pagal ilgį",
    "bitbybit.occt.shapes.wire.pointOnWireAtLength_description": "gauna tašką ant vielos pagal ilgį",
    "bitbybit.occt.shapes.wire.pointsOnWireAtLengths": "taškai ant vielos pagal ilgius",
    "pointsOnWireAtLengths": "taškai ant vielos pagal ilgius",
    "bitbybit.occt.shapes.wire.pointsOnWireAtLengths_description": "gauna taškus ant vielos pagal ilgius",
    "lengths": "ilgių reikšmės",
    "bitbybit.occt.shapes.wire.pointsOnWireAtEqualLength": "taškai ant vielos pagal lygų ilgį",
    "pointsOnWireAtEqualLength": "taškai ant vielos pagal lygų ilgį",
    "bitbybit.occt.shapes.wire.pointsOnWireAtEqualLength_description": "gauna taškus ant vielos pagal lygų ilgį",
    "tryNext": "bandyti kitą",
    "includeFirst": "įtraukti pirmą",
    "includeLast": "įtraukti paskutinį",
    "bitbybit.occt.shapes.wire.pointsOnWireAtPatternOfLengths": "taškai ant vielos pagal ilgių modelį",
    "pointsOnWireAtPatternOfLengths": "taškai ant vielos pagal ilgių modelį",
    "bitbybit.occt.shapes.wire.pointsOnWireAtPatternOfLengths_description": "gauna taškus ant vielos pagal ilgių modelį",
    "bitbybit.occt.shapes.wire.tangentOnWireAtParam": "tangentas ant vielos pagal parametrą",
    "tangentOnWireAtParam": "tangentas ant vielos pagal parametrą",
    "bitbybit.occt.shapes.wire.tangentOnWireAtParam_description": "gauna tangento vektorių ant vielos pagal parametrą",
    "bitbybit.occt.shapes.wire.tangentOnWireAtLength": "tangentas ant vielos pagal ilgį",
    "tangentOnWireAtLength": "tangentas ant vielos pagal ilgį",
    "bitbybit.occt.shapes.wire.tangentOnWireAtLength_description": "gauna tangento vektorių ant vielos pagal ilgį",
    "bitbybit.occt.shapes.wire.derivativesOnWireAtLength": "išvestinės ant vielos pagal ilgį",
    "derivativesOnWireAtLength": "išvestinės ant vielos pagal ilgį",
    "bitbybit.occt.shapes.wire.derivativesOnWireAtLength_description": "apskaičiuoja 3 išvestines ant vielos pagal ilgį",
    "bitbybit.occt.shapes.wire.derivativesOnWireAtParam": "išvestinės ant vielos pagal parametrą",
    "derivativesOnWireAtParam": "išvestinės ant vielos pagal parametrą",
    "bitbybit.occt.shapes.wire.derivativesOnWireAtParam_description": "apskaičiuoja 3 išvestines ant vielos pagal parametrą",
    "bitbybit.occt.shapes.wire.startPointOnWire": "pradžios taškas ant vielos",
    "startPointOnWire": "pradžios taškas ant vielos",
    "bitbybit.occt.shapes.wire.startPointOnWire_description": "gauna pradžios tašką ant vielos",
    "bitbybit.occt.shapes.wire.endPointOnWire": "pabaigos taškas ant vielos",
    "endPointOnWire": "pabaigos taškas ant vielos",
    "bitbybit.occt.shapes.wire.endPointOnWire_description": "gauna pabaigos tašką ant vielos",
    "bitbybit.occt.shapes.wire.createCircleWire": "apskritimo viela",
    "createCircleWire": "apskritimo viela",
    "bitbybit.occt.shapes.wire.createCircleWire_description": "sukuria opencascade apskritimo vielą",
    "bitbybit.occt.shapes.wire.createSquareWire": "kvadrato viela",
    "createSquareWire": "kvadrato viela",
    "bitbybit.occt.shapes.wire.createSquareWire_description": "sukuria opencascade kvadrato vielą",
    "bitbybit.occt.shapes.wire.createStarWire": "žvaigždės viela",
    "createStarWire": "žvaigždės viela",
    "bitbybit.occt.shapes.wire.createStarWire_description": "sukuria opencascade žvaigždės vielą",
    "numRays": "spindulių skaičius",
    "outerRadius": "išorinis spindulys",
    "innerRadius": "vidinis spindulys",
    "offsetOuterEdges": "išorinių kraštų poslinkis",
    "half": "pusė",
    "bitbybit.occt.shapes.wire.createChristmasTreeWire": "kalėdinės eglutės viela",
    "createChristmasTreeWire": "kalėdinės eglutės viela",
    "bitbybit.occt.shapes.wire.createChristmasTreeWire_description": "sukuria kalėdinės eglutės vielą",
    "innerDist": "vidinis atstumas",
    "outerDist": "išorinis atstumas",
    "nrSkirts": "sijonų skaičius",
    "trunkHeight": "kamieno aukštis",
    "trunkWidth": "kamieno plotis",
    "bitbybit.occt.shapes.wire.createNGonWire": "n-kampio viela",
    "createNGonWire": "n-kampio viela",
    "bitbybit.occt.shapes.wire.createNGonWire_description": "sukuria opencascade n-kampio vielą",
    "nrCorners": "kampų skaičius",
    "bitbybit.occt.shapes.wire.createParallelogramWire": "lygiagretainio viela",
    "createParallelogramWire": "lygiagretainio viela",
    "bitbybit.occt.shapes.wire.createParallelogramWire_description": "sukuria lygiagretainio vielą",
    "aroundCenter": "aplink centrą",
    "bitbybit.occt.shapes.wire.createHeartWire": "širdies viela",
    "createHeartWire": "širdies viela",
    "bitbybit.occt.shapes.wire.createHeartWire_description": "sukuria širdies vielą",
    "sizeApprox": "dydžio apytikslis",
    "bitbybit.occt.shapes.wire.createRectangleWire": "stačiakampio viela",
    "createRectangleWire": "stačiakampio viela",
    "bitbybit.occt.shapes.wire.createRectangleWire_description": "sukuria opencascade stačiakampio vielą",
    "bitbybit.occt.shapes.wire.createLPolygonWire": "L-kampio viela",
    "createLPolygonWire": "L-kampio viela",
    "bitbybit.occt.shapes.wire.createLPolygonWire_description": "sukuria opencascade l-kampio vielą",
    "widthFirst": "pirmas plotis",
    "lengthFirst": "pirmas ilgis",
    "widthSecond": "antras plotis",
    "lengthSecond": "antras ilgis",
    "align": "lygiuoti",
    "directionEnum": "krypties enum",
    "bitbybit.occt.shapes.wire.createEllipseWire": "elipsės viela",
    "createEllipseWire": "elipsės viela",
    "bitbybit.occt.shapes.wire.createEllipseWire_description": "sukuria opencascade elipsės vielą",
    "bitbybit.occt.shapes.wire.textWires": "teksto kontūrai",
    "textWires": "teksto kontūrai",
    "bitbybit.occt.shapes.wire.textWires_description": "Sukuría OpenCascade teksto kontūrus pagal Dr. A. V. Hershey sukurtą simplex šriftą.",
    "xOffset": "x poslinkis",
    "yOffset": "y poslinkis",
    "letterSpacing": "tarpas tarp raidžių",
    "Base.horizontalAlignEnum": "Base.horizontalAlignEnum",
    "extrudeOffset": "išspaudimo poslinkis",
    "bitbybit.occt.shapes.wire.getWire": "gauti vielą",
    "getWire": "gauti vielą",
    "bitbybit.occt.shapes.wire.getWire_description": "gauna vielą pagal indeksą iš formos",
    "bitbybit.occt.shapes.wire.getWires": "gauti vielas",
    "getWires": "gauti vielas",
    "bitbybit.occt.shapes.wire.getWires_description": "gauna visas vielas iš formos",
    "bitbybit.occt.shapes.wire.getWireCenterOfMass": "gauti vielos masės centrą",
    "getWireCenterOfMass": "gauti vielos masės centrą",
    "bitbybit.occt.shapes.wire.getWireCenterOfMass_description": "gauna vielos masės centro tašką",
    "bitbybit.occt.shapes.wire.getWiresCentersOfMass": "gauti vielų masės centrus",
    "getWiresCentersOfMass": "gauti vielų masės centrus",
    "bitbybit.occt.shapes.wire.getWiresCentersOfMass_description": "gauna vielų masės centrų taškus",
    "bitbybit.occt.shapes.wire.reversedWire": "apversta viela",
    "reversedWire": "apversta viela",
    "bitbybit.occt.shapes.wire.reversedWire_description": "apskaičiuoja apverstą vielą",
    "bitbybit.occt.shapes.wire.reversedWireFromReversedEdges": "apversta viela iš apverstų kraštų",
    "reversedWireFromReversedEdges": "apversta viela iš apverstų kraštų",
    "bitbybit.occt.shapes.wire.reversedWireFromReversedEdges_description": "apskaičiuoja apverstą vielą iš apverstų kraštų",
    "bitbybit.occt.shapes.wire.isWireClosed": "ar viela uždaryta",
    "isWireClosed": "ar viela uždaryta",
    "bitbybit.occt.shapes.wire.isWireClosed_description": "patikrina, ar viela uždaryta",
    "bitbybit.occt.shapes.wire.getWireLength": "gauti vielos ilgį",
    "getWireLength": "gauti vielos ilgį",
    "bitbybit.occt.shapes.wire.getWireLength_description": "gauna vielos ilgį",
    "bitbybit.occt.shapes.wire.getWiresLengths": "gauti vielų ilgius",
    "getWiresLengths": "gauti vielų ilgius",
    "bitbybit.occt.shapes.wire.getWiresLengths_description": "gauna vielų ilgius",
    "bitbybit.occt.shapes.wire.placeWireOnFace": "uždėti vielą ant paviršiaus",
    "placeWireOnFace": "uždėti vielą ant paviršiaus",
    "bitbybit.occt.shapes.wire.placeWireOnFace_description": "uždeda vielą ant paviršiaus naudojant UV erdvę",
    "face": "paviršius",
    "bitbybit.occt.shapes.wire.placeWiresOnFace": "uždėti vielas ant paviršiaus",
    "placeWiresOnFace": "uždėti vielas ant paviršiaus",
    "bitbybit.occt.shapes.wire.placeWiresOnFace_description": "uždeda kelias vielas ant paviršiaus naudojant UV erdvę",
    "wires": "vielos",
    "bitbybit.occt.shapes.wire.closeOpenWire": "uždaryti atvirą vielą",
    "closeOpenWire": "uždaryti atvirą vielą",
    "bitbybit.occt.shapes.wire.closeOpenWire_description": "uždaro atvirą vielą tiesia briauna",
    "bitbybit.occt.shapes.wire.project": "projektuoti",
    "project": "projektuoti",
    "bitbybit.occt.shapes.wire.project_description": "projektuoja vielą ant formos",
    "bitbybit.occt.shapes.wire.projectWires": "projektuoti vielas",
    "projectWires": "projektuoti vielas",
    "bitbybit.occt.shapes.wire.projectWires_description": "projektuoja kelias vielas ant formos",
    "bitbybit.occt.shapes.face.createFacesFromWiresOnFace": "paviršiai iš vielų ant paviršiaus",
    "createFacesFromWiresOnFace": "paviršiai iš vielų ant paviršiaus",
    "bitbybit.occt.shapes.face.createFacesFromWiresOnFace_description": "sukuria paviršius iš vielų ant paviršiaus",
    "inside": "viduje",
    "bitbybit.occt.shapes.face.createFaceFromWireOnFace": "paviršius iš vielos ant paviršiaus",
    "createFaceFromWireOnFace": "paviršius iš vielos ant paviršiaus",
    "bitbybit.occt.shapes.face.createFaceFromWireOnFace_description": "sukuria paviršių iš vielos ant paviršiaus",
    "bitbybit.occt.shapes.face.createFaceFromWire": "paviršius iš vielos",
    "createFaceFromWire": "paviršius iš vielos",
    "bitbybit.occt.shapes.face.createFaceFromWire_description": "sukuria paviršių iš vielos",
    "planar": "plokščias",
    "bitbybit.occt.shapes.face.createFaceFromWires": "paviršius iš vielų",
    "createFaceFromWires": "paviršius iš vielų",
    "bitbybit.occt.shapes.face.createFaceFromWires_description": "sukuria paviršių iš vielų",
    "bitbybit.occt.shapes.face.createFaceFromWiresOnFace": "paviršių iš vielų ant paviršiaus",
    "createFaceFromWiresOnFace": "paviršius iš vielų ant paviršiaus",
    "bitbybit.occt.shapes.face.createFaceFromWiresOnFace_description": "sukuria paviršių iš vielų ant vadovaujančio paviršiaus",
    "bitbybit.occt.shapes.face.createFacesFromWires": "paviršius iš vielų",
    "createFacesFromWires": "paviršiai iš vielų",
    "bitbybit.occt.shapes.face.createFacesFromWires_description": "sukuria paviršius iš vielų",
    "bitbybit.occt.shapes.face.createFaceFromMultipleCircleTanWires": "paviršius iš kelių apskritimų tangentinių vielų",
    "createFaceFromMultipleCircleTanWires": "paviršius iš kelių apskritimų tangentinių vielų",
    "bitbybit.occt.shapes.face.createFaceFromMultipleCircleTanWires_description": "sukuria paviršių iš kelių apskritimų tangentinių vielų",
    "circles": "apskritimai",
    "combination": "kombinacija",
    "combinationCirclesForFaceEnum": "apskritimų kombinacija paviršiui enum",
    "unify": "suvienodinti",
    "bitbybit.occt.shapes.face.createFaceFromMultipleCircleTanWireCollections": "paviršius iš kelių apskritimų liestinių vielų rinkinių",
    "createFaceFromMultipleCircleTanWireCollections": "paviršius iš kelių apskritimų liestinių vielų rinkinių",
    "bitbybit.occt.shapes.face.createFaceFromMultipleCircleTanWireCollections_description": "sukuria paviršių iš kelių apskritimų liestinių vielų rinkinių",
    "listsOfCircles": "apskritimų sąrašai",
    "T[][]": "t masyvas masyvas",
    "bitbybit.occt.shapes.face.faceFromSurface": "paviršius iš paviršiaus",
    "faceFromSurface": "paviršius iš paviršiaus",
    "bitbybit.occt.shapes.face.faceFromSurface_description": "sukuria paviršių iš paviršiaus",
    "bitbybit.occt.shapes.face.faceFromSurfaceAndWire": "paviršius iš paviršiaus ir vielos",
    "faceFromSurfaceAndWire": "paviršius iš paviršiaus ir vielos",
    "bitbybit.occt.shapes.face.faceFromSurfaceAndWire_description": "sukuria paviršių iš paviršiaus ir vielos",
    "bitbybit.occt.shapes.face.createPolygonFace": "daugiakampis paviršius",
    "createPolygonFace": "daugiakampį paviršių",
    "bitbybit.occt.shapes.face.createPolygonFace_description": "sukuria opencascade daugiakampį paviršių",
    "bitbybit.occt.shapes.face.createCircleFace": "apskritimo paviršius",
    "createCircleFace": "apskritimo paviršius",
    "bitbybit.occt.shapes.face.createCircleFace_description": "sukuria opencascade apskritimo paviršių",
    "bitbybit.occt.shapes.face.createEllipseFace": "elipsės paviršius",
    "createEllipseFace": "elipsės paviršių",
    "bitbybit.occt.shapes.face.createEllipseFace_description": "sukuria opencascade elipsės paviršių",
    "bitbybit.occt.shapes.face.createSquareFace": "kvadrato paviršius",
    "createSquareFace": "kvadrato paviršius",
    "bitbybit.occt.shapes.face.createSquareFace_description": "sukuria opencascade kvadrato paviršių",
    "bitbybit.occt.shapes.face.createRectangleFace": "stačiakampio paviršius",
    "createRectangleFace": "stačiakampio paviršius",
    "bitbybit.occt.shapes.face.createRectangleFace_description": "sukuria opencascade stačiakampio paviršių",
    "bitbybit.occt.shapes.face.getFace": "gauti paviršių",
    "getFace": "gauti paviršių",
    "bitbybit.occt.shapes.face.getFace_description": "gauna paviršių pagal indeksą iš formos",
    "bitbybit.occt.shapes.face.getFaces": "gauti paviršius",
    "getFaces": "gauti paviršius",
    "bitbybit.occt.shapes.face.getFaces_description": "gauna paviršius iš formos",
    "bitbybit.occt.shapes.face.reversedFace": "apverstas paviršius",
    "reversedFace": "apverstas paviršius",
    "bitbybit.occt.shapes.face.reversedFace_description": "apskaičiuoja apverstą paviršių",
    "bitbybit.occt.shapes.face.subdivideToPoints": "padalinti į taškus",
    "subdivideToPoints": "padalinti į taškus",
    "bitbybit.occt.shapes.face.subdivideToPoints_description": "padalina paviršių į taškų tinklelį",
    "nrDivisionsU": "padalijimų skaičius u",
    "nrDivisionsV": "padalijimų skaičius v",
    "shiftHalfStepU": "perstumti pusę žingsnio u",
    "removeStartEdgeU": "pašalinti pradžios kraštą u",
    "removeEndEdgeU": "pašalinti pabaigos kraštą u",
    "shiftHalfStepV": "perstumti pusę žingsnio v",
    "removeStartEdgeV": "pašalinti pradžios kraštą v",
    "removeEndEdgeV": "pašalinti pabaigos kraštą v",
    "bitbybit.occt.shapes.face.subdivideToWires": "padalinti į vielas",
    "subdivideToWires": "padalinti į vielas",
    "bitbybit.occt.shapes.face.subdivideToWires_description": "padalina paviršių į vielas",
    "nrDivisions": "padalijimų skaičius",
    "isU": "yra u",
    "shiftHalfStep": "perstumti pusę žingsnio",
    "removeStart": "pašalinti pradžią",
    "removeEnd": "pašalinti pabaigą",
    "bitbybit.occt.shapes.face.subdivideToRectangleWires": "padalinti į stačiakampio vielas",
    "subdivideToRectangleWires": "padalinti į stačiakampio vielas",
    "bitbybit.occt.shapes.face.subdivideToRectangleWires_description": "padalina paviršių į stačiakampio vielas",
    "patterns": "šablonai",
    "nrRectanglesU": "stačiakampių skaičius u",
    "nrRectanglesV": "stačiakampių skaičius v",
    "scalePatternU": "masto šablonas u",
    "scalePatternV": "masto šablonas v",
    "filletPattern": "užapvalinimo šablonas",
    "inclusionPattern": "įtraukimo šablonas",
    "offsetFromBorderU": "atstumas nuo krašto u",
    "offsetFromBorderV": "atstumas nuo krašto v",
    "bitbybit.occt.shapes.face.subdivideToRectangleHoles": "padalinti į stačiakampio skyles",
    "subdivideToRectangleHoles": "padalinti į stačiakampio skyles",
    "bitbybit.occt.shapes.face.subdivideToRectangleHoles_description": "padalina paviršių į stačiakampio vielas",
    "holesToFaces": "skylės į paviršius",
    "bitbybit.occt.shapes.face.subdivideToPointsControlled": "padalinti į taškus su valdymu",
    "subdivideToPointsControlled": "padalinti į taškus su valdymu",
    "bitbybit.occt.shapes.face.subdivideToPointsControlled_description": "padalina paviršių į taškų tinklelį su valdomais poslinkiais",
    "shiftHalfStepNthU": "perstumti pusę žingsnio n-tąjį u",
    "shiftHalfStepUOffsetN": "perstumti pusę žingsnio u poslinkis n",
    "removeStartEdgeNthU": "pašalinti pradžios kraštą n-tąjį u",
    "removeStartEdgeUOffsetN": "pašalinti pradžios kraštą u poslinkis n",
    "removeEndEdgeNthU": "pašalinti pabaigos kraštą n-tąjį u",
    "removeEndEdgeUOffsetN": "pašalinti pabaigos kraštą u poslinkis n",
    "shiftHalfStepNthV": "perstumti pusę žingsnio n-tąjį v",
    "shiftHalfStepVOffsetN": "perstumti pusę žingsnio v poslinkis n",
    "removeStartEdgeNthV": "pašalinti pradžios kraštą n-tąjį v",
    "removeStartEdgeVOffsetN": "pašalinti pradžios kraštą v poslinkis n",
    "removeEndEdgeNthV": "pašalinti pabaigos kraštą n-tąjį v",
    "removeEndEdgeVOffsetN": "pašalinti pabaigos kraštą v poslinkis n",
    "bitbybit.occt.shapes.face.subdivideToNormals": "padalinti į normalias",
    "subdivideToNormals": "padalinti į normalias",
    "bitbybit.occt.shapes.face.subdivideToNormals_description": "padalina paviršių į normalių tinklelį",
    "bitbybit.occt.shapes.face.subdivideToUV": "padalinti į uv",
    "subdivideToUV": "padalinti į uv",
    "bitbybit.occt.shapes.face.subdivideToUV_description": "padalina paviršių į uv tinklelį",
    "bitbybit.occt.shapes.face.pointOnUV": "taškas ant uv",
    "pointOnUV": "taškas ant uv",
    "bitbybit.occt.shapes.face.pointOnUV_description": "gauna tašką ant uv, pritaikytą riboms",
    "paramU": "parametras u",
    "paramV": "parametras v",
    "bitbybit.occt.shapes.face.normalOnUV": "normali ant uv",
    "normalOnUV": "normali ant uv",
    "bitbybit.occt.shapes.face.normalOnUV_description": "gauna normalią ant uv, pritaikytą riboms",
    "bitbybit.occt.shapes.face.pointsOnUVs": "taškai ant uvs",
    "pointsOnUVs": "taškai ant uvs",
    "bitbybit.occt.shapes.face.pointsOnUVs_description": "gauna taškus ant uvs, pritaikytus riboms",
    "paramsUV": "parametrai uv",
    "[number, number][]": "skaičių porų masyvas",
    "bitbybit.occt.shapes.face.normalsOnUVs": "normalės ant uvs",
    "normalsOnUVs": "normalės ant uvs",
    "bitbybit.occt.shapes.face.normalsOnUVs_description": "gauna normalias ant uvs, pritaikytas riboms",
    "bitbybit.occt.shapes.face.subdivideToPointsOnParam": "padalinti į taškus pagal parametrą",
    "subdivideToPointsOnParam": "padalinti į taškus pagal parametrą",
    "bitbybit.occt.shapes.face.subdivideToPointsOnParam_description": "padalina paviršių į taškus pagal parametrą",
    "nrPoints": "taškų skaičius",
    "bitbybit.occt.shapes.face.wireAlongParam": "viela pagal parametrą",
    "wireAlongParam": "viela pagal parametrą",
    "bitbybit.occt.shapes.face.wireAlongParam_description": "gauna vielą pagal parametrą ant paviršiaus",
    "bitbybit.occt.shapes.face.wiresAlongParams": "vielos pagal parametrus",
    "wiresAlongParams": "vielos pagal parametrus",
    "bitbybit.occt.shapes.face.wiresAlongParams_description": "gauna vielas pagal parametrus ant paviršiaus",
    "params": "parametrai",
    "bitbybit.occt.shapes.face.getUMinBound": "gauti u minimalią ribą",
    "getUMinBound": "gauti u minimalią ribą",
    "bitbybit.occt.shapes.face.getUMinBound_description": "gauna paviršiaus u minimalią ribą",
    "bitbybit.occt.shapes.face.getUMaxBound": "gauti u maksimalią ribą",
    "getUMaxBound": "gauti u maksimalią ribą",
    "bitbybit.occt.shapes.face.getUMaxBound_description": "gauna paviršiaus u maksimalią ribą",
    "bitbybit.occt.shapes.face.getVMinBound": "gauti v minimalią ribą",
    "getVMinBound": "gauti v minimalią ribą",
    "bitbybit.occt.shapes.face.getVMinBound_description": "gauna paviršiaus v minimalią ribą",
    "bitbybit.occt.shapes.face.getVMaxBound": "gauti v maksimalią ribą",
    "getVMaxBound": "gauti v maksimalią ribą",
    "bitbybit.occt.shapes.face.getVMaxBound_description": "gauna paviršiaus v maksimalią ribą",
    "bitbybit.occt.shapes.face.getFaceArea": "gauti paviršiaus plotą",
    "getFaceArea": "gauti paviršiaus plotą",
    "bitbybit.occt.shapes.face.getFaceArea_description": "gauna paviršiaus plotą",
    "bitbybit.occt.shapes.face.getFacesAreas": "gauti paviršių plotus",
    "getFacesAreas": "gauti paviršių plotus",
    "bitbybit.occt.shapes.face.getFacesAreas_description": "gauna paviršių plotus",
    "bitbybit.occt.shapes.face.getFaceCenterOfMass": "gauti paviršiaus masės centrą",
    "getFaceCenterOfMass": "gauti paviršiaus masės centrą",
    "bitbybit.occt.shapes.face.getFaceCenterOfMass_description": "gauna paviršiaus masės centro tašką",
    "bitbybit.occt.shapes.face.getFacesCentersOfMass": "gauti paviršių masės centrus",
    "getFacesCentersOfMass": "gauti paviršių masės centrus",
    "bitbybit.occt.shapes.face.getFacesCentersOfMass_description": "gauna paviršių masės centrus",
    "bitbybit.occt.shapes.face.filterFacePoints": "filtruoti paviršiaus taškus",
    "filterFacePoints": "filtruoti paviršiaus taškus",
    "bitbybit.occt.shapes.face.filterFacePoints_description": "filtruoja taškus ant paviršiaus",
    "filter": "filtras",
    "useBndBox": "naudoti ribų dėžę",
    "gapTolerance": "tarpų tolerancija",
    "keepIn": "išlaikyti viduje",
    "keepOn": "išlaikyti ant",
    "keepOut": "išlaikyti išorėje",
    "keepUnknown": "išlaikyti nežinomus",
    "bitbybit.occt.shapes.face.filterFacesPoints": "filtruoti paviršių taškus",
    "filterFacesPoints": "filtruoti paviršių taškus",
    "bitbybit.occt.shapes.face.filterFacesPoints_description": "filtruoja taškus ant paviršių",
    "flatPointsArray": "plokščias taškų masyvas",
    "bitbybit.occt.shapes.shell.sewFaces": "susiūti paviršius",
    "shell": "kevalas",
    "sewFaces": "susiūti paviršius",
    "bitbybit.occt.shapes.shell.sewFaces_description": "sukuria kevalą iš paviršių",
    "bitbybit.occt.shapes.shell.getShellSurfaceArea": "gauti kevalo paviršiaus plotą",
    "getShellSurfaceArea": "gauti kevalo paviršiaus plotą",
    "bitbybit.occt.shapes.shell.getShellSurfaceArea_description": "gauna kevalo paviršiaus plotą",
    "bitbybit.occt.shapes.solid.fromClosedShell": "iš uždaro kevalo",
    "solid": "kietasis kūnas",
    "fromClosedShell": "iš uždaro apvalkalo",
    "bitbybit.occt.shapes.solid.fromClosedShell_description": "sukuria kietąjį kūną iš uždaro apvalkalo",
    "bitbybit.occt.shapes.solid.createBox": "dėžė",
    "bitbybit.occt.shapes.solid.createBox_description": "sukuria OpenCascade dėžę",
    "originOnCenter": "pradžia centre",
    "bitbybit.occt.shapes.solid.createCube": "kubas",
    "bitbybit.occt.shapes.solid.createCube_description": "sukuria OpenCascade kubą",
    "bitbybit.occt.shapes.solid.createBoxFromCorner": "dėžė nuo kampo",
    "createBoxFromCorner": "dėžė nuo kampo",
    "bitbybit.occt.shapes.solid.createBoxFromCorner_description": "sukuria OpenCascade dėžę nuo kampo",
    "corner": "kampas",
    "bitbybit.occt.shapes.solid.createCylinder": "cilindras",
    "bitbybit.occt.shapes.solid.createCylinder_description": "sukuria OpenCascade cilindrą",
    "bitbybit.occt.shapes.solid.createCylindersOnLines": "cilindrai ant linijų",
    "createCylindersOnLines": "cilindrai ant linijų",
    "bitbybit.occt.shapes.solid.createCylindersOnLines_description": "sukuria OpenCascade cilindrus ant linijų",
    "Base.Line3[]": "bazinė linija3 masyvas",
    "bitbybit.occt.shapes.solid.createSphere": "sfera",
    "bitbybit.occt.shapes.solid.createSphere_description": "sukuria OpenCascade sferą",
    "bitbybit.occt.shapes.solid.createCone": "kūgis",
    "createCone": "kūgis",
    "bitbybit.occt.shapes.solid.createCone_description": "sukuria OpenCascade kūgį",
    "radius1": "spindulys 1",
    "radius2": "spindulys 2",
    "bitbybit.occt.shapes.solid.getSolidSurfaceArea": "gauti kietojo kūno paviršiaus plotą",
    "getSolidSurfaceArea": "gauti kietojo kūno paviršiaus plotą",
    "bitbybit.occt.shapes.solid.getSolidSurfaceArea_description": "nustato kietojo kūno paviršiaus plotą",
    "bitbybit.occt.shapes.solid.getSolidVolume": "gauti kietojo kūno tūrį",
    "getSolidVolume": "gauti kietojo kūno tūrį",
    "bitbybit.occt.shapes.solid.getSolidVolume_description": "nustato kietojo kūno tūrį",
    "bitbybit.occt.shapes.solid.getSolidsVolumes": "gauti kietųjų kūnų tūrius",
    "getSolidsVolumes": "gauti kietųjų kūnų tūrius",
    "bitbybit.occt.shapes.solid.getSolidsVolumes_description": "nustato kietųjų kūnų tūrius",
    "bitbybit.occt.shapes.solid.getSolidCenterOfMass": "gauti kietojo kūno masės centrą",
    "getSolidCenterOfMass": "gauti kietojo kūno masės centrą",
    "bitbybit.occt.shapes.solid.getSolidCenterOfMass_description": "nustato kietojo kūno masės centrą",
    "bitbybit.occt.shapes.solid.getSolidsCentersOfMass": "gauti kietųjų kūnų masės centrus",
    "getSolidsCentersOfMass": "gauti kietųjų kūnų masės centrus",
    "bitbybit.occt.shapes.solid.getSolidsCentersOfMass_description": "nustato kietųjų kūnų masės centrus",
    "bitbybit.occt.shapes.solid.getSolids": "gauti kietuosius kūnus",
    "getSolids": "gauti kietuosius kūnus",
    "bitbybit.occt.shapes.solid.getSolids_description": "išgauna kietuosius kūnus iš formos",
    "bitbybit.occt.shapes.solid.filterSolidPoints": "filtruoti kietojo kūno taškus",
    "filterSolidPoints": "filtruoti kietojo kūno taškus",
    "bitbybit.occt.shapes.solid.filterSolidPoints_description": "filtruoja taškus pagal kietojo kūno ryšį",
    "bitbybit.occt.shapes.compound.makeCompound": "junginys",
    "compound": "junginys",
    "makeCompound": "junginys",
    "bitbybit.occt.shapes.compound.makeCompound_description": "sukuria junginį iš formų",
    "bitbybit.occt.shapes.compound.getShapesOfCompound": "gauti junginio formas",
    "getShapesOfCompound": "gauti junginio formas",
    "bitbybit.occt.shapes.compound.getShapesOfCompound_description": "išgauna formas iš junginio",
    "bitbybit.occt.shapes.shape.purgeInternalEdges": "pašalinti vidines briaunas",
    "purgeInternalEdges": "pašalinti vidines briaunas",
    "bitbybit.occt.shapes.shape.purgeInternalEdges_description": "pašalina vidines briaunas iš formos",
    "bitbybit.occt.shapes.shape.unifySameDomain": "suvienodinti tą patį domeną",
    "unifySameDomain": "suvienodinti tą patį domeną",
    "bitbybit.occt.shapes.shape.unifySameDomain_description": "suvienodina veidus ir briaunas tame pačiame domene",
    "unifyEdges": "suvienodinti briaunas",
    "unifyFaces": "suvienodinti veidus",
    "concatBSplines": "sujungti bsplines",
    "bitbybit.occt.shapes.shape.isClosed": "ar uždaryta",
    "bitbybit.occt.shapes.shape.isClosed_description": "patikrina, ar forma yra uždaryta",
    "analysis": "analizė",
    "bitbybit.occt.shapes.shape.isConvex": "ar išgaubta",
    "isConvex": "ar išgaubta",
    "bitbybit.occt.shapes.shape.isConvex_description": "patikrina, ar forma yra išgaubta",
    "bitbybit.occt.shapes.shape.isChecked": "ar patikrinta",
    "bitbybit.occt.shapes.shape.isChecked_description": "patikrina, ar forma yra patikrinta",
    "bitbybit.occt.shapes.shape.isFree": "ar laisva",
    "isFree": "ar laisva",
    "bitbybit.occt.shapes.shape.isFree_description": "patikrina, ar forma yra laisva",
    "bitbybit.occt.shapes.shape.isInfinite": "ar begalinė",
    "isInfinite": "ar begalinė",
    "bitbybit.occt.shapes.shape.isInfinite_description": "patikrina, ar forma yra begalinė",
    "bitbybit.occt.shapes.shape.isModified": "ar modifikuota",
    "isModified": "ar modifikuota",
    "bitbybit.occt.shapes.shape.isModified_description": "patikrina, ar forma yra modifikuota",
    "bitbybit.occt.shapes.shape.isLocked": "ar užrakinta",
    "isLocked": "ar užrakinta",
    "bitbybit.occt.shapes.shape.isLocked_description": "patikrina, ar forma yra užrakinta",
    "bitbybit.occt.shapes.shape.isNull": "ar tuščia",
    "isNull": "ar tuščia",
    "bitbybit.occt.shapes.shape.isNull_description": "patikrina, ar forma yra tuščia",
    "bitbybit.occt.shapes.shape.isEqual": "ar lygi",
    "isEqual": "ar lygi",
    "bitbybit.occt.shapes.shape.isEqual_description": "patikrina, ar forma lygi kitai formai",
    "otherShape": "kita forma",
    "bitbybit.occt.shapes.shape.isNotEqual": "ar nelygi",
    "isNotEqual": "ar nelygi",
    "bitbybit.occt.shapes.shape.isNotEqual_description": "patikrina, ar forma skiriasi nuo kitos formos",
    "bitbybit.occt.shapes.shape.isPartner": "ar partnerė",
    "isPartner": "ar partnerė",
    "bitbybit.occt.shapes.shape.isPartner_description": "patikrina, ar forma yra partnerė kitai formai",
    "bitbybit.occt.shapes.shape.isSame": "ar tokia pati",
    "isSame": "ar tokia pati",
    "bitbybit.occt.shapes.shape.isSame_description": "patikrina, ar forma yra tokia pati kaip kita forma",
    "bitbybit.occt.shapes.shape.getOrientation": "gauti orientaciją",
    "getOrientation": "gauti orientaciją",
    "bitbybit.occt.shapes.shape.getOrientation_description": "nustato formos orientaciją",
    "bitbybit.occt.shapes.shape.getShapeType": "gauti formos tipą",
    "getShapeType": "gauti formos tipą",
    "bitbybit.occt.shapes.shape.getShapeType_description": "nustato formos tipą",
    "bitbybit.occt.geom.curves.geom2dEllipse": "geom 2d elipsė",
    "geom": "geometrija",
    "curves": "kreivės",
    "geom2dEllipse": "geom 2d elipsė",
    "bitbybit.occt.geom.curves.geom2dEllipse_description": "sukuria 2D elipsę modeliavimui",
    "Base.Point2": "bazinis taškas 2",
    "Base.Vector2": "bazinis vektorius 2",
    "bitbybit.occt.geom.curves.geom2dTrimmedCurve": "geom 2d apkarpyta kreivė",
    "geom2dTrimmedCurve": "geom 2d apkarpyta kreivė",
    "bitbybit.occt.geom.curves.geom2dTrimmedCurve_description": "sukuria apkarpytą kreivę tarp u1 ir u2",
    "u1": "u1",
    "u2": "u2",
    "adjustPeriodic": "koreguoti periodiškumą",
    "bitbybit.occt.geom.curves.geom2dSegment": "geom 2d segmentas",
    "geom2dSegment": "geom 2d segmentas",
    "bitbybit.occt.geom.curves.geom2dSegment_description": "sukuria 2D kreivės segmentą tarp dviejų taškų",
    "bitbybit.occt.geom.curves.get2dPointFrom2dCurveOnParam": "gauti 2d tašką iš 2d kreivės pagal parametrą",
    "get2dPointFrom2dCurveOnParam": "gauti 2d tašką iš 2d kreivės pagal parametrą",
    "bitbybit.occt.geom.curves.get2dPointFrom2dCurveOnParam_description": "nustato 2D tašką ant kreivės pagal parametrą",
    "bitbybit.occt.geom.curves.geomCircleCurve": "geom apskritimo kreivė",
    "geomCircleCurve": "geom apskritimo kreivė",
    "bitbybit.occt.geom.curves.geomCircleCurve_description": "sukuria apskritimo geometrijos kreivę",
    "bitbybit.occt.geom.curves.geomEllipseCurve": "geom elipsės kreivė",
    "geomEllipseCurve": "geom elipsės kreivė",
    "bitbybit.occt.geom.curves.geomEllipseCurve_description": "sukuria elipsės geometrijos kreivę",
    "bitbybit.occt.geom.surfaces.cylindricalSurface": "cilindrinis paviršius",
    "surfaces": "paviršiai",
    "cylindricalSurface": "cilindrinis paviršius",
    "bitbybit.occt.geom.surfaces.cylindricalSurface_description": "sukuria begalinį cilindrinį paviršių modeliavimui",
    "bitbybit.occt.geom.surfaces.surfaceFromFace": "paviršius iš veido",
    "surfaceFromFace": "paviršius iš veido",
    "bitbybit.occt.geom.surfaces.surfaceFromFace_description": "sukuria paviršių iš veido",
    "bitbybit.occt.fillets.filletEdges": "briaunų užapvalinimas",
    "fillets": "užapvalinimai",
    "filletEdges": "briaunų užapvalinimas",
    "bitbybit.occt.fillets.filletEdges_description": "užapvalina OpenCascade formas",
    "3d fillets": "3D užapvalinimai",
    "radiusList": "spindulių sąrašas",
    "indexes": "indeksai",
    "bitbybit.occt.fillets.filletEdgesList": "briaunų užapvalinimų sąrašas",
    "filletEdgesList": "briaunų užapvalinimų sąrašas",
    "bitbybit.occt.fillets.filletEdgesList_description": "užapvalina briaunas su skirtingais spinduliais",
    "edges": "briaunos",
    "bitbybit.occt.fillets.filletEdgesListOneRadius": "briaunų užapvalinimas vienu spinduliu",
    "filletEdgesListOneRadius": "briaunų užapvalinimas vienu spinduliu",
    "bitbybit.occt.fillets.filletEdgesListOneRadius_description": "užapvalina briaunas vienu spinduliu",
    "bitbybit.occt.fillets.filletEdgeVariableRadius": "briaunos užapvalinimas kintamu spinduliu",
    "filletEdgeVariableRadius": "briaunos užapvalinimas kintamu spinduliu",
    "bitbybit.occt.fillets.filletEdgeVariableRadius_description": "užapvalina briauną su kintamu spinduliu pagal u parametrus",
    "paramsU": "u parametrai",
    "bitbybit.occt.fillets.filletEdgesSameVariableRadius": "briaunų užapvalinimas su vienodu kintamu spinduliu",
    "filletEdgesSameVariableRadius": "briaunų užapvalinimas su vienodu kintamu spinduliu",
    "bitbybit.occt.fillets.filletEdgesSameVariableRadius_description": "užapvalina briaunas su vienodais kintamais spinduliais",
    "bitbybit.occt.fillets.filletEdgesVariableRadius": "briaunų užapvalinimas su kintamu spinduliu",
    "filletEdgesVariableRadius": "briaunų užapvalinimas su kintamu spinduliu",
    "bitbybit.occt.fillets.filletEdgesVariableRadius_description": "užapvalina briaunas su kintamais spinduliais pagal parametrus",
    "radiusLists": "spindulių sąrašai",
    "paramsULists": "parametrų u sąrašai",
    "bitbybit.occt.fillets.fillet3DWire": "3D vielos užapvalinimas",
    "fillet3DWire": "3D vielos užapvalinimas",
    "bitbybit.occt.fillets.fillet3DWire_description": "užapvalina 3D vielą su krypties vedimu",
    "bitbybit.occt.fillets.fillet3DWires": "3D vielų užapvalinimas",
    "fillet3DWires": "3D vielų užapvalinimas",
    "bitbybit.occt.fillets.fillet3DWires_description": "užapvalina 3D vielas su krypties vedimu",
    "bitbybit.occt.fillets.chamferEdges": "briaunų nuožulnumas",
    "chamferEdges": "briaunų nuožulnumas",
    "bitbybit.occt.fillets.chamferEdges_description": "atlieka OpenCascade formos briaunų nuožulnumą",
    "3d chamfers": "3D nuožulnumai",
    "distanceList": "atstumų sąrašas",
    "bitbybit.occt.fillets.chamferEdgesList": "briaunų nuožulnumo sąrašas",
    "chamferEdgesList": "briaunų nuožulnumo sąrašas",
    "bitbybit.occt.fillets.chamferEdgesList_description": "atlieka briaunų nuožulnumą su skirtingais atstumais",
    "bitbybit.occt.fillets.chamferEdgeTwoDistances": "briaunos nuožulnumas su dviem atstumais",
    "chamferEdgeTwoDistances": "briaunos nuožulnumas su dviem atstumais",
    "bitbybit.occt.fillets.chamferEdgeTwoDistances_description": "atlieka briaunos nuožulnumą su dviem atstumais",
    "F": "f",
    "distance1": "atstumas 1",
    "distance2": "atstumas 2",
    "bitbybit.occt.fillets.chamferEdgesTwoDistances": "briaunų nuožulnumas su dviem atstumais",
    "chamferEdgesTwoDistances": "briaunų nuožulnumas su dviem atstumais",
    "bitbybit.occt.fillets.chamferEdgesTwoDistances_description": "atlieka briaunų nuožulnumą su dviem atstumais",
    "faces": "plokštumos",
    "F[]": "f masyvas",
    "bitbybit.occt.fillets.chamferEdgesTwoDistancesLists": "briaunų nuožulnumas su dviem atstumų sąrašais",
    "chamferEdgesTwoDistancesLists": "briaunų nuožulnumas su dviem atstumų sąrašais",
    "bitbybit.occt.fillets.chamferEdgesTwoDistancesLists_description": "atlieka briaunų nuožulnumą su dviem atstumų sąrašais",
    "distances1": "atstumai 1",
    "distances2": "atstumai 2",
    "bitbybit.occt.fillets.chamferEdgeDistAngle": "briaunos nuožulnumas su atstumu ir kampu",
    "chamferEdgeDistAngle": "briaunos nuožulnumas su atstumu ir kampu",
    "bitbybit.occt.fillets.chamferEdgeDistAngle_description": "atlieka briaunos nuožulnumą su atstumu ir kampu",
    "bitbybit.occt.fillets.chamferEdgesDistAngle": "briaunų nuožulnumas su atstumu ir kampu",
    "chamferEdgesDistAngle": "briaunų nuožulnumas su atstumu ir kampu",
    "bitbybit.occt.fillets.chamferEdgesDistAngle_description": "atlieka briaunų nuožulnumą su atstumu ir kampu",
    "bitbybit.occt.fillets.chamferEdgesDistsAngles": "briaunų nuožulnumas su atstumais ir kampais",
    "chamferEdgesDistsAngles": "briaunų nuožulnumas su atstumais ir kampais",
    "bitbybit.occt.fillets.chamferEdgesDistsAngles_description": "atlieka briaunų nuožulnumą su atstumais ir kampais",
    "distances": "atstumai",
    "bitbybit.occt.fillets.fillet2d": "2D užapvalinimas",
    "fillet2d": "2D užapvalinimas",
    "bitbybit.occt.fillets.fillet2d_description": "užapvalina 2D vielą arba plokštumą",
    "2d fillets": "2D užapvalinimai",
    "bitbybit.occt.fillets.fillet2dShapes": "2D formų užapvalinimas",
    "fillet2dShapes": "2D formų užapvalinimas",
    "bitbybit.occt.fillets.fillet2dShapes_description": "užapvalina 2D vielas arba plokštumas",
    "bitbybit.occt.fillets.filletTwoEdgesInPlaneIntoAWire": "dviejų briaunų užapvalinimas plokštumoje į vielą",
    "filletTwoEdgesInPlaneIntoAWire": "dviejų briaunų užapvalinimas plokštumoje į vielą",
    "bitbybit.occt.fillets.filletTwoEdgesInPlaneIntoAWire_description": "užapvalina dvi plokščias briaunas į vielą",
    "edge1": "briauna 1",
    "edge2": "briauna 2",
    "planeOrigin": "plokštumos pradžia",
    "planeDirection": "plokštumos kryptis",
    "solution": "sprendimas",
    "bitbybit.occt.transforms.transform": "transformacija",
    "bitbybit.occt.transforms.transform_description": "transformuoja formą",
    "on single shape": "vienai formai",
    "rotationAxis": "sukimosi ašis",
    "rotationAngle": "sukimosi kampas",
    "scaleFactor": "mastelio koeficientas",
    "bitbybit.occt.transforms.rotate": "sukimas",
    "bitbybit.occt.transforms.rotate_description": "suka formą",
    "bitbybit.occt.transforms.rotateAroundCenter": "sukimas aplink centrą",
    "rotateAroundCenter": "sukimas aplink centrą",
    "bitbybit.occt.transforms.rotateAroundCenter_description": "suka formą aplink centrą",
    "bitbybit.occt.transforms.align": "lygiavimas",
    "bitbybit.occt.transforms.align_description": "sulygiuoja formą",
    "fromOrigin": "iš pradžios taško",
    "fromDirection": "iš krypties",
    "toOrigin": "į pradžios tašką",
    "toDirection": "į kryptį",
    "bitbybit.occt.transforms.alignAndTranslate": "lygiavimas ir perkėlimas",
    "alignAndTranslate": "lygiavimas ir perkėlimas",
    "bitbybit.occt.transforms.alignAndTranslate_description": "sulygiuoja ir perkelia formą",
    "bitbybit.occt.transforms.translate": "perkėlimas",
    "bitbybit.occt.transforms.translate_description": "perkelia formą",
    "bitbybit.occt.transforms.scale": "mastelio keitimas",
    "bitbybit.occt.transforms.scale_description": "keičia formos mastelį",
    "bitbybit.occt.transforms.scale3d": "3D mastelio keitimas",
    "scale3d": "3D mastelio keitimas",
    "bitbybit.occt.transforms.scale3d_description": "keičia formos mastelį 3D erdvėje",
    "bitbybit.occt.transforms.mirror": "veidrodinis atspindys",
    "mirror": "veidrodinis atspindys",
    "bitbybit.occt.transforms.mirror_description": "atspindi formą veidrodiniu būdu",
    "bitbybit.occt.transforms.mirrorAlongNormal": "veidrodinis atspindys pagal normalę",
    "mirrorAlongNormal": "veidrodinis atspindys pagal normalę",
    "bitbybit.occt.transforms.mirrorAlongNormal_description": "atspindi formą pagal normalę ir pradžios tašką",
    "normal": "normalė",
    "bitbybit.occt.transforms.transformShapes": "formų transformacija",
    "transformShapes": "formų transformacija",
    "bitbybit.occt.transforms.transformShapes_description": "transformuoja formų masyvą",
    "on shapes": "formoms",
    "rotationAxes": "sukimosi ašys",
    "rotationAngles": "sukimosi kampai",
    "scaleFactors": "mastelio koeficientai",
    "bitbybit.occt.transforms.rotateShapes": "formų sukimas",
    "rotateShapes": "formų sukimas",
    "bitbybit.occt.transforms.rotateShapes_description": "suka formas",
    "axes": "ašys",
    "bitbybit.occt.transforms.rotateAroundCenterShapes": "formų sukimas aplink centrą",
    "rotateAroundCenterShapes": "formų sukimas aplink centrą",
    "bitbybit.occt.transforms.rotateAroundCenterShapes_description": "suka formas aplink centrą ir ašį",
    "centers": "centrai",
    "bitbybit.occt.transforms.alignShapes": "formų lygiavimas",
    "alignShapes": "formų lygiavimas",
    "bitbybit.occt.transforms.alignShapes_description": "sulygiuoja formas",
    "fromOrigins": "iš pradžios taškų",
    "fromDirections": "iš krypčių",
    "toOrigins": "į pradžios taškus",
    "toDirections": "į kryptis",
    "bitbybit.occt.transforms.alignAndTranslateShapes": "formų lygiavimas ir perkėlimas",
    "alignAndTranslateShapes": "formų lygiavimas ir perkėlimas",
    "bitbybit.occt.transforms.alignAndTranslateShapes_description": "sulygiuoja ir perkelia formas",
    "directions": "kryptys",
    "bitbybit.occt.transforms.translateShapes": "formų perkėlimas",
    "translateShapes": "formų perkėlimas",
    "bitbybit.occt.transforms.translateShapes_description": "perkelia formas",
    "bitbybit.occt.transforms.scaleShapes": "formų mastelio keitimas",
    "scaleShapes": "formų mastelio keitimas",
    "bitbybit.occt.transforms.scaleShapes_description": "keičia formų mastelį",
    "factors": "koeficientai",
    "bitbybit.occt.transforms.scale3dShapes": "formų 3D mastelio keitimas",
    "scale3dShapes": "formų 3D mastelio keitimas",
    "bitbybit.occt.transforms.scale3dShapes_description": "keičia formų mastelį 3D erdvėje",
    "scales": "masteliai",
    "bitbybit.occt.transforms.mirrorShapes": "formų veidrodinis atspindys",
    "mirrorShapes": "formų veidrodinis atspindys",
    "bitbybit.occt.transforms.mirrorShapes_description": "atspindi formas veidrodiniu būdu",
    "origins": "pradžios taškai",
    "bitbybit.occt.transforms.mirrorAlongNormalShapes": "formų veidrodinis atspindys pagal normalę",
    "mirrorAlongNormalShapes": "formų veidrodinis atspindys pagal normalę",
    "bitbybit.occt.transforms.mirrorAlongNormalShapes_description": "atspindi formas pagal normalę ir pradžios tašką",
    "normals": "normalės",
    "bitbybit.occt.operations.loft": "loftas",
    "operations": "operacijos",
    "loft": "loftas",
    "bitbybit.occt.operations.loft_description": "sujungia vielas į apvalkalą",
    "lofts": "loftai",
    "makeSolid": "kietas kūnas",
    "bitbybit.occt.operations.loftAdvanced": "išplėstinis loftas",
    "loftAdvanced": "išplėstinis loftas",
    "bitbybit.occt.operations.loftAdvanced_description": "sujungia vielas į apvalkalą su papildomomis parinktimis",
    "straight": "tiesus",
    "nrPeriodicSections": "periodinių sekcijų skaičius",
    "useSmoothing": "naudoti išlyginimą",
    "maxUDegree": "maksimalus u laipsnis",
    "parType": "par tipo",
    "approxParametrizationTypeEnum": "aproksimacijos parametrizacijos tipo enum",
    "startVertex": "pradžios viršūnė",
    "endVertex": "pabaigos viršūnė",
    "bitbybit.occt.operations.closestPointsBetweenTwoShapes": "artimiausi taškai tarp dviejų formų",
    "closestPointsBetweenTwoShapes": "artimiausi taškai tarp dviejų formų",
    "bitbybit.occt.operations.closestPointsBetweenTwoShapes_description": "apskaičiuoja artimiausius taškus tarp dviejų formų",
    "closest pts": "artimiausi taškai",
    "shape1": "forma 1",
    "shape2": "forma 2",
    "bitbybit.occt.operations.closestPointsOnShapeFromPoints": "artimiausi taškai ant formos nuo taškų",
    "closestPointsOnShapeFromPoints": "artimiausi taškai ant formos nuo taškų",
    "bitbybit.occt.operations.closestPointsOnShapeFromPoints_description": "apskaičiuoja artimiausius taškus nuo taškų iki formos",
    "bitbybit.occt.operations.closestPointsOnShapesFromPoints": "artimiausi taškai ant formų nuo taškų",
    "closestPointsOnShapesFromPoints": "artimiausi taškai ant formų nuo taškų",
    "bitbybit.occt.operations.closestPointsOnShapesFromPoints_description": "apskaičiuoja artimiausius taškus nuo taškų iki formų",
    "bitbybit.occt.operations.distancesToShapeFromPoints": "atstumai iki formos nuo taškų",
    "distancesToShapeFromPoints": "atstumai iki formos nuo taškų",
    "bitbybit.occt.operations.distancesToShapeFromPoints_description": "apskaičiuoja atstumus nuo taškų iki formos",
    "bitbybit.occt.operations.boundingBoxOfShape": "ribinė dėžė iš formos",
    "boundingBoxOfShape": "ribinė dėžė iš formos",
    "bitbybit.occt.operations.boundingBoxOfShape_description": "apskaičiuoja ribinės dėžės parametrus formos",
    "bitbybit.occt.operations.boundingBoxMinOfShape": "ribinės dėžės minimumas iš formos",
    "boundingBoxMinOfShape": "ribinės dėžės minimumas iš formos",
    "bitbybit.occt.operations.boundingBoxMinOfShape_description": "gauna minimalų ribinės dėžės tašką formos",
    "bitbybit.occt.operations.boundingBoxMaxOfShape": "ribinės dėžės maksimumas iš formos",
    "boundingBoxMaxOfShape": "ribinės dėžės maksimumas iš formos",
    "bitbybit.occt.operations.boundingBoxMaxOfShape_description": "gauna maksimalų ribinės dėžės tašką formos",
    "bitbybit.occt.operations.boundingBoxCenterOfShape": "ribinės dėžės centras iš formos",
    "boundingBoxCenterOfShape": "ribinės dėžės centras iš formos",
    "bitbybit.occt.operations.boundingBoxCenterOfShape_description": "gauna ribinės dėžės centro tašką formos",
    "bitbybit.occt.operations.boundingBoxSizeOfShape": "ribinės dėžės dydis iš formos",
    "boundingBoxSizeOfShape": "ribinės dėžės dydis iš formos",
    "bitbybit.occt.operations.boundingBoxSizeOfShape_description": "gauna ribinės dėžės dydžio tašką formos",
    "bitbybit.occt.operations.boundingBoxShapeOfShape": "ribinės dėžės forma iš formos",
    "boundingBoxShapeOfShape": "ribinės dėžės forma iš formos",
    "bitbybit.occt.operations.boundingBoxShapeOfShape_description": "gauna ribinės dėžės formą iš formos",
    "bitbybit.occt.operations.boundingSphereOfShape": "ribinė sfera iš formos",
    "boundingSphereOfShape": "ribinė sfera iš formos",
    "bitbybit.occt.operations.boundingSphereOfShape_description": "apskaičiuoja ribinės sferos parametrus formos",
    "bitbybit.occt.operations.boundingSphereCenterOfShape": "ribinės sferos centras iš formos",
    "boundingSphereCenterOfShape": "ribinės sferos centras iš formos",
    "bitbybit.occt.operations.boundingSphereCenterOfShape_description": "gauna ribinės sferos centro tašką formos",
    "bitbybit.occt.operations.boundingSphereRadiusOfShape": "ribinės sferos spindulys iš formos",
    "boundingSphereRadiusOfShape": "ribinės sferos spindulys iš formos",
    "bitbybit.occt.operations.boundingSphereRadiusOfShape_description": "gauna ribinės sferos spindulį formos",
    "bitbybit.occt.operations.boundingSphereShapeOfShape": "ribinės sferos forma iš formos",
    "boundingSphereShapeOfShape": "ribinės sferos forma iš formos",
    "bitbybit.occt.operations.boundingSphereShapeOfShape_description": "gauna ribinės sferos formą iš formos",
    "bitbybit.occt.operations.extrude": "ekstruzija",
    "extrude": "ekstruzija",
    "bitbybit.occt.operations.extrude_description": "ekstruzuoja formą pagal kryptį",
    "extrusions": "ekstruzijos",
    "bitbybit.occt.operations.extrudeShapes": "ekstruzuoti formas",
    "extrudeShapes": "ekstruzuoti formas",
    "bitbybit.occt.operations.extrudeShapes_description": "ekstruzuoja formas pagal kryptį",
    "bitbybit.occt.operations.splitShapeWithShapes": "padalinti formą su formomis",
    "splitShapeWithShapes": "padalinti formą su formomis",
    "bitbybit.occt.operations.splitShapeWithShapes_description": "padalina formą su kitomis formomis",
    "divisions": "padalinimai",
    "localFuzzyTolerance": "vietinė fuzzy tolerancija",
    "nonDestructive": "ne destruktyvus",
    "bitbybit.occt.operations.revolve": "sukti",
    "revolve": "sukti",
    "bitbybit.occt.operations.revolve_description": "suka formą aplink kryptį",
    "revolutions": "apsisukimai",
    "copy": "kopijuoti",
    "bitbybit.occt.operations.rotatedExtrude": "sukti ekstruzija",
    "rotatedExtrude": "sukti ekstruzija",
    "bitbybit.occt.operations.rotatedExtrude_description": "atlieka suktą ekstruziją ant formos",
    "bitbybit.occt.operations.pipe": "vamzdis",
    "pipe": "vamzdis",
    "bitbybit.occt.operations.pipe_description": "vamzdžiuoja formas palei vielą",
    "pipeing": "vamzdžiavimas",
    "bitbybit.occt.operations.pipePolylineWireNGon": "vamzdis polilinijos viela n-gonas",
    "pipePolylineWireNGon": "vamzdis polilinijos viela n-gonas",
    "bitbybit.occt.operations.pipePolylineWireNGon_description": "vamzdžiuoja polilinijos vielą su n-gono profiliu",
    "trihedronEnum": "trihedron enum",
    "geomFillTrihedronEnum": "geom užpildymo trihedron enum",
    "forceApproxC1": "priverstinė aproksimacija c1",
    "bitbybit.occt.operations.pipeWiresCylindrical": "vamzdžiai cilindrinės vielos",
    "pipeWiresCylindrical": "vamzdžiai cilindrinės vielos",
    "bitbybit.occt.operations.pipeWiresCylindrical_description": "vamzdžiuoja vielas su cilindrine forma",
    "bitbybit.occt.operations.pipeWireCylindrical": "vamzdis cilindrinė viela",
    "pipeWireCylindrical": "vamzdis cilindrinė viela",
    "bitbybit.occt.operations.pipeWireCylindrical_description": "vamzdžiuoja vielą su cilindrine forma",
    "bitbybit.occt.operations.offset": "ofsetas",
    "bitbybit.occt.operations.offset_description": "ofsetuoja formas",
    "offsets": "ofsetai",
    "bitbybit.occt.operations.offsetAdv": "pažangus ofsetas",
    "offsetAdv": "pažangus ofsetas",
    "bitbybit.occt.operations.offsetAdv_description": "ofsetuoja su pažangiomis parinktimis",
    "joinType": "jungimo tipas",
    "joinTypeEnum": "jungimo tipo enum",
    "removeIntEdges": "pašalinti vidines briaunas",
    "bitbybit.occt.operations.makeThickSolidSimple": "padaryti paprastą storą kietą kūną",
    "makeThickSolidSimple": "padaryti paprastą storą kietą kūną",
    "bitbybit.occt.operations.makeThickSolidSimple_description": "sutirština formą į kietą kūną",
    "bitbybit.occt.operations.makeThickSolidByJoin": "padaryti storą kietą kūną jungiant",
    "makeThickSolidByJoin": "padaryti storą kietą kūną jungiant",
    "bitbybit.occt.operations.makeThickSolidByJoin_description": "sutirština formą į kietą kūną jungiant",
    "intersection": "sankirta",
    "selfIntersection": "sava sankirta",
    "bitbybit.occt.operations.slice": "pjūvis",
    "slice": "pjūvis",
    "bitbybit.occt.operations.slice_description": "atlieka pjūvį formoje",
    "bitbybit.occt.operations.sliceInStepPattern": "pjūvis žingsnių raštu",
    "sliceInStepPattern": "pjūvis žingsnių raštu",
    "bitbybit.occt.operations.sliceInStepPattern_description": "atlieka pjūvį formoje žingsnių raštu",
    "steps": "žingsniai",
    "bitbybit.occt.operations.offset3DWire": "ofsetas 3d viela",
    "offset3DWire": "ofsetas 3d viela",
    "bitbybit.occt.operations.offset3DWire_description": "ofsetuoja 3d vielą",
    "bitbybit.occt.booleans.union": "sąjunga",
    "booleans": "kirtimaisi",
    "union": "sąjunga",
    "bitbybit.occt.booleans.union_description": "sujungia objektus",
    "keepEdges": "išlaikyti briaunas",
    "bitbybit.occt.booleans.difference": "skirtumas",
    "difference": "skirtumas",
    "bitbybit.occt.booleans.difference_description": "atlieka boole'o skirtumą",
    "bitbybit.occt.booleans.intersection": "sankirta",
    "bitbybit.occt.booleans.intersection_description": "atlieka boole'o sankirtą",
    "bitbybit.occt.shapeFix.basicShapeRepair": "pagrindinis formos taisymas",
    "shapeFix": "formos taisymas",
    "basicShapeRepair": "pagrindinis formos taisymas",
    "bitbybit.occt.shapeFix.basicShapeRepair_description": "taisoma forma",
    "maxTolerance": "maksimali tolerancija",
    "minTolerance": "minimali tolerancija",
    "bitbybit.occt.shapeFix.fixSmallEdgeOnWire": "taisyti mažą briauną ant vielos",
    "fixSmallEdgeOnWire": "taisyti mažą briauną ant vielos",
    "bitbybit.occt.shapeFix.fixSmallEdgeOnWire_description": "taisoma maža briauna ant vielos",
    "lockvtx": "užrakinti viršūnę",
    "precsmall": "prec mažas",
    "bitbybit.occt.shapeFix.fixEdgeOrientationsAlongWire": "taisyti briaunų orientacijas palei vielą",
    "fixEdgeOrientationsAlongWire": "taisyti briaunų orientacijas palei vielą",
    "bitbybit.occt.shapeFix.fixEdgeOrientationsAlongWire_description": "taisoma briaunų orientacija palei vielą",
    "bitbybit.occt.io.saveShapeSTEP": "išsaugoti formą step",
    "saveShapeSTEP": "išsaugoti formą step",
    "bitbybit.occt.io.saveShapeSTEP_description": "išsaugo step failą",
    "adjustYtoZ": "pritaikyti y prie z",
    "tryDownload": "bandyti atsisiųsti",
    "bitbybit.occt.io.saveShapeSTEPAndReturn": "išsaugoti formą step ir grąžinti",
    "saveShapeSTEPAndReturn": "išsaugoti formą step ir grąžinti",
    "bitbybit.occt.io.saveShapeSTEPAndReturn_description": "išsaugo step failą ir grąžina tekstą",
    "bitbybit.occt.io.saveShapeStl": "išsaugoti formą stl",
    "saveShapeStl": "išsaugoti formą stl",
    "bitbybit.occt.io.saveShapeStl_description": "išsaugo stl failą",
    "binary": "dvejetainis",
    "bitbybit.occt.io.saveShapeStlAndReturn": "išsaugoti formą stl ir grąžinti",
    "saveShapeStlAndReturn": "išsaugoti formą stl ir grąžinti",
    "bitbybit.occt.io.saveShapeStlAndReturn_description": "išsaugo stl failą ir grąžina",
    "bitbybit.occt.io.loadSTEPorIGES": "įkelti step arba iges",
    "loadSTEPorIGES": "įkelti step arba iges",
    "bitbybit.occt.io.loadSTEPorIGES_description": "importuoja step arba iges failą",
    "adjustZtoY": "pritaikyti z prie y",
    "bitbybit.occt.io.loadSTEPorIGESFromText": "įkelti step arba iges iš teksto",
    "loadSTEPorIGESFromText": "įkelti step arba iges iš teksto",
    "bitbybit.occt.io.loadSTEPorIGESFromText_description": "importuoja step arba iges iš teksto",
    "fileType": "failo tipas",
    "fileTypeEnum": "failo tipo enum",
    "bitbybit.advanced.text3d.create": "3d tekstas",
    "advanced": "pažangus",
    "text3d": "3d tekstas",
    "bitbybit.advanced.text3d.create_description": "sukuria 3d tekstą",
    "fontType": "šrifto tipas",
    "fontsEnum": "šriftų enum",
    "fontVariant": "šrifto variantas",
    "fontVariantsEnum": "šrifto variantų enum",
    "Inputs.Base.Vector3": "įvestys bazinis vektorius 3",
    "originAlignment": "pradžios lygiavimas",
    "recAlignmentEnum": "stačiakampio lygiavimo enum",
    "bitbybit.advanced.text3d.createTextOnFace": "tekstas ant paviršiaus",
    "createTextOnFace": "tekstas ant paviršiaus",
    "bitbybit.advanced.text3d.createTextOnFace_description": "sukuria 3d tekstą ant paviršiaus",
    "facePlanar": "plokščias paviršius",
    "faceTextVar": "paviršiaus teksto kintamasis",
    "faceTextVarEnum": "paviršiaus teksto kintamojo enum",
    "originParamU": "pradžios parametras u",
    "originParamV": "pradžios parametras v",
    "bitbybit.advanced.text3d.createTextsOnFace": "tekstai ant paviršiaus",
    "createTextsOnFace": "tekstai ant paviršiaus",
    "bitbybit.advanced.text3d.createTextsOnFace_description": "sukuria 3d tekstus ant paviršiaus",
    "definitions": "apibrėžimai",
    "Text3DFaceDefinitionDto[]": "3d teksto paviršiaus apibrėžimo dto masyvas",
    "bitbybit.advanced.text3d.definition3dTextOnFace": "3d teksto apibrėžimas ant paviršiaus",
    "definition3dTextOnFace": "3d teksto apibrėžimas ant paviršiaus",
    "bitbybit.advanced.text3d.definition3dTextOnFace_description": "sukuria 3d tekstą paviršiaus apibrėžimui",
    "bitbybit.advanced.text3d.getCompoundShape": "gauti sudėtinę formą",
    "getCompoundShape": "gauti sudėtinę formą",
    "bitbybit.advanced.text3d.getCompoundShape_description": "gauna 3d teksto sudėtinę formą",
    "model": "modelis",
    "Text3DData<T>": "teksto 3D duomenys T",
    "bitbybit.advanced.text3d.getCharacterShape": "gauti simbolio formą",
    "getCharacterShape": "gauti simbolio formą",
    "bitbybit.advanced.text3d.getCharacterShape_description": "gauna simbolio formą pagal indeksą",
    "bitbybit.advanced.text3d.getCharacterShapes": "gauti simbolių formas",
    "getCharacterShapes": "gauti simbolių formas",
    "bitbybit.advanced.text3d.getCharacterShapes_description": "gauna 3D teksto simbolių formas",
    "bitbybit.advanced.text3d.getCharacterCenterCoordinates": "gauti simbolio centro koordinates",
    "getCharacterCenterCoordinates": "gauti simbolio centro koordinates",
    "bitbybit.advanced.text3d.getCharacterCenterCoordinates_description": "gauna simbolių centrų koordinates",
    "bitbybit.advanced.text3d.getFaceCutout": "gauti veido išpjovą",
    "getFaceCutout": "gauti veido išpjovą",
    "bitbybit.advanced.text3d.getFaceCutout_description": "gauna 3D teksto veido išpjovą",
    "get from face": "gauti iš veido",
    "bitbybit.advanced.text3d.getAllFacesOfCutout": "gauti visas išpjovos veido dalis",
    "getAllFacesOfCutout": "gauti visas išpjovos veido dalis",
    "bitbybit.advanced.text3d.getAllFacesOfCutout_description": "gauna visas 3D teksto išpjovos veido dalis",
    "bitbybit.advanced.text3d.getCutoutsInsideCharacters": "gauti išpjovas simbolių viduje",
    "getCutoutsInsideCharacters": "gauti išpjovas simbolių viduje",
    "bitbybit.advanced.text3d.getCutoutsInsideCharacters_description": "gauna simbolių veido išpjovas iš 3D teksto",
    "bitbybit.advanced.text3d.getAdvanceWidth": "gauti pažangos plotį",
    "getAdvanceWidth": "gauti pažangos plotį",
    "bitbybit.advanced.text3d.getAdvanceWidth_description": "gauna pažangos plotį",
    "dimensions": "matmenys",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.createPyramidSimple": "paprasta piramidė",
    "facePatterns": "veido raštai",
    "pyramidSimple": "paprasta piramidė",
    "createPyramidSimple": "paprasta piramidė",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.createPyramidSimple_description": "sukuria paprastą piramidės raštą ant veidų",
    "uNumber": "u skaičius",
    "vNumber": "v skaičius",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.createPyramidSimpleAffectors": "paprastus piramidės afektorius",
    "createPyramidSimpleAffectors": "paprastus piramidės afektorius",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.createPyramidSimpleAffectors_description": "sukuria piramidės raštą su afektoriais",
    "affectorPoints": "afektoriaus taškai",
    "Inputs.Base.Point3[]": "įvestys baziniai taškai 3 masyvas",
    "affectorRadiusList": "afektoriaus spindulių sąrašas",
    "affectorFactors": "afektoriaus faktoriai",
    "defaultHeight": "numatytasis aukštis",
    "affectMinHeight": "minimalus afektuojamas aukštis",
    "affectMaxHeight": "maksimalus afektuojamas aukštis",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShape": "gauti sudėtinę formą",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShape_description": "gauna piramidžių sudėtinę formą",
    "get shapes": "gauti formas",
    "PyramidSimpleData<T>": "paprastos piramidės duomenys T",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapeOnFace": "gauti sudėtinę formą ant veido",
    "getCompoundShapeOnFace": "gauti sudėtinę formą ant veido",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapeOnFace_description": "gauna sudėtinę formą ant veido",
    "faceIndex": "veido indeksas",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapeCellOnFace": "gauti sudėtinės formos ląstelę ant veido",
    "getCompoundShapeCellOnFace": "gauti sudėtinės formos ląstelę ant veido",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapeCellOnFace_description": "gauna piramidės formą ant veido pagal indeksą",
    "uIndex": "u indeksas",
    "vIndex": "v indeksas",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidCells": "gauti visas piramidės ląsteles",
    "getAllPyramidCells": "gauti visas piramidės ląsteles",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidCells_description": "gauna visas piramidės ląsteles",
    "get cells": "gauti ląsteles",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidCellsOnFace": "gauti visas piramidės ląsteles ant veido",
    "getAllPyramidCellsOnFace": "gauti visas piramidės ląsteles ant veido",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidCellsOnFace_description": "gauna piramidės ląsteles ant veido",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFace": "gauti visas piramidės u ląsteles ant veido",
    "getAllPyramidUCellsOnFace": "gauti visas piramidės u ląsteles ant veido",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFace_description": "gauna piramidės u ląsteles ant veido",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFaceAtU": "gauti visas piramidės u ląsteles ant veido ties u",
    "getAllPyramidUCellsOnFaceAtU": "gauti visas piramidės u ląsteles ant veido ties u",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFaceAtU_description": "gauna piramidės ląsteles ant veido ties u",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFaceAtV": "gauti visas piramidės u ląsteles ant veido ties v",
    "getAllPyramidUCellsOnFaceAtV": "gauti visas piramidės u ląsteles ant veido ties v",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFaceAtV_description": "gauna piramidės ląsteles ant veido ties v",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCellOnIndex": "gauti ląstelę pagal indeksą",
    "getCellOnIndex": "gauti ląstelę pagal indeksą",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCellOnIndex_description": "gauna piramidės ląstelę ant veido ties u ir v",
    "get cell": "gauti ląstelę",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getTopPointsOfCells": "gauti ląstelių viršutinius taškus",
    "getTopPointsOfCells": "gauti ląstelių viršutinius taškus",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getTopPointsOfCells_description": "gauna ląstelių viršutinius taškus",
    "get from cells": "gauti iš ląstelių",
    "cells": "ląstelės",
    "PyramidSimpleCellPart<T>[]": "paprastos piramidės ląstelės dalis T masyvas",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCenterPointsOfCells": "gauti ląstelių centrinius taškus",
    "getCenterPointsOfCells": "gauti ląstelių centrinius taškus",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCenterPointsOfCells_description": "gauna ląstelių centrinius taškus",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerPointsOfCells": "gauti ląstelių kampinius taškus",
    "getCornerPointsOfCells": "gauti ląstelių kampinius taškus",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerPointsOfCells_description": "gauna ląstelių kampinius taškus",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerPointOfCells": "gauti ląstelių kampinį tašką",
    "getCornerPointOfCells": "gauti ląstelių kampinį tašką",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerPointOfCells_description": "gauna ląstelių kampinį tašką",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerNormalOfCells": "gauti ląstelių kampinę normą",
    "getCornerNormalOfCells": "gauti ląstelių kampinę normą",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerNormalOfCells_description": "gauna ląstelių kampinę normą",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerNormalsOfCells": "gauti ląstelių kampines normas",
    "getCornerNormalsOfCells": "gauti ląstelių kampines normas",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerNormalsOfCells_description": "gauna ląstelių kampines normas",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapesOfCells": "gauti ląstelių sudėtines formas",
    "getCompoundShapesOfCells": "gauti ląstelių sudėtines formas",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapesOfCells_description": "gauna piramidžių ląstelių sudėtines formas",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getFaceShapesOfCells": "gauti ląstelių veido formas",
    "getFaceShapesOfCells": "gauti ląstelių veido formas",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getFaceShapesOfCells_description": "gauna piramidžių ląstelių veido formas",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getWireShapesOfCells": "gauti ląstelių vielos formas",
    "getWireShapesOfCells": "gauti ląstelių vielos formas",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getWireShapesOfCells_description": "gauna piramidžių ląstelių vielos formas",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getStartPolylineWireU": "gauti pradžios polilinijos vielą u",
    "getStartPolylineWireU": "gauti pradžios polilinijos vielą u",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getStartPolylineWireU_description": "gauna polilinijos vielą palei pradžios u kraštą",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getEndPolylineWireU": "gauti pabaigos polilinijos vielą u",
    "getEndPolylineWireU": "gauti pabaigos polilinijos vielą u",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getEndPolylineWireU_description": "gauna polilinijos vielą palei pabaigos u kraštą",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getStartPolylineWireV": "gauti pradžios polilinijos vielą v",
    "getStartPolylineWireV": "gauti pradžios polilinijos vielą v",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getStartPolylineWireV_description": "gauna polilinijos vielą palei pradžios v kraštą",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getEndPolylineWireV": "gauti pabaigos polilinijos vielą v",
    "getEndPolylineWireV": "gauti pabaigos polilinijos vielą v",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getEndPolylineWireV_description": "gauna polilinijos vielą palei pabaigos v kraštą",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getPolylineWiresUCompound": "gauti polilinijos vielų u sudėtį",
    "getPolylineWiresUCompound": "gauti polilinijos vielų u sudėtį",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getPolylineWiresUCompound_description": "gauna polilinijos vielas palei u",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getPolylineWiresVCompound": "gauti polilinijos vielų v sudėtį",
    "getPolylineWiresVCompound": "gauti polilinijos vielų v sudėtį",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getPolylineWiresVCompound_description": "gauna polilinijos vielas palei v",
    "bitbybit.things.kidsCorner.birdhouses.wingtipVilla.create": "sparno galiuko vila",
    "things": "daiktai",
    "kidsCorner": "vaikų kampelis",
    "birdhouses": "inkilai",
    "wingtipVilla": "sparno galiuko vila",
    "bitbybit.things.kidsCorner.birdhouses.wingtipVilla.create_description": "sukuria sparno galiuko vilos inkilą",
    "birdhouse": "inkilas",
    "interiorWidth": "vidinis plotis",
    "interiorLength": "vidinis ilgis",
    "interiorHeight": "vidinis aukštis",
    "holeDiameter": "skylės skersmuo",
    "holeDistToBottom": "atstumas nuo skylės iki apačios",
    "stickLength": "lazdelės ilgis",
    "stickDiameter": "lazdelės skersmuo",
    "baseAttachmentHeight": "pagrindo tvirtinimo aukštis",
    "roofOverhang": "stogo iškyša",
    "chimneyHeight": "kaminėlio aukštis",
    "Inputs.Base.Point3": "įvestys bazinis taškas 3",
    "bitbybit.things.kidsCorner.birdhouses.chirpyChalet.create": "čiulbanti vila",
    "chirpyChalet": "čiulbanti vila",
    "bitbybit.things.kidsCorner.birdhouses.chirpyChalet.create_description": "sukuria čiulbančios vilos inkilą",
    "roofAngle": "stogo kampas",
    "bitbybit.things.threeDPrinting.vases.serenitySwirl.create": "ramybės sūkurys",
    "threeDPrinting": "3D spausdinimas",
    "vases": "vazos",
    "serenitySwirl": "ramybės sūkurys",
    "bitbybit.things.threeDPrinting.vases.serenitySwirl.create_description": "sukuria ramybės sūkurio vazą",
    "swirl": "sūkurys",
    "addRadiusNarrow": "pridėti siaurą spindulį",
    "addRadiusWide": "pridėti platų spindulį",
    "addMiddleHeight": "pridėti vidurinį aukštį",
    "addTopHeight": "pridėti viršutinį aukštį",
    "bitbybit.things.threeDPrinting.vases.arabicArchway.create": "arabiška arka",
    "arabicArchway": "arabiška arka",
    "bitbybit.things.threeDPrinting.vases.arabicArchway.create_description": "sukuria arabiškos arkos vazą",
    "profilePoints": "profilio taškai",
    "nrOfSides": "šonų skaičius",
    "nrOfVerticalArches": "vertikalių arkų skaičius",
    "archCenterThickness": "arkos centro storis",
    "edgesThickness": "kraštų storis",
    "baseHeight": "pagrindo aukštis",
    "patchHoles": "užtaisyti skyles",
    "lod": "detalumo lygis",
    "Things.Enums.lodEnum": "detalumo lygio enum",
    "bitbybit.things.threeDPrinting.medals.eternalLove.create": "amžina meilę",
    "medals": "medaliai",
    "eternalLove": "amžina meilė",
    "bitbybit.things.threeDPrinting.medals.eternalLove.create_description": "sukuria amžinos meilės medalį",
    "textHeading": "teksto antraštė",
    "textName": "teksto pavadinimas",
    "fullModel": "pilnas modelis",
    "decorationThickness": "dekoracijos storis",
    "bitbybit.things.threeDPrinting.cups.calmCup.create": "ramybės puodelis",
    "cups": "puodeliai",
    "calmCup": "ramybės puodelis",
    "bitbybit.things.threeDPrinting.cups.calmCup.create_description": "sukuria ramybės puodelio modelį",
    "radiusTopOffset": "viršutinio spindulio poslinkis",
    "fillet": "užapvalinimas",
    "nrOfHandles": "rankenėlių skaičius",
    "handleDist": "rankenėlių atstumas",
    "bitbybit.things.threeDPrinting.cups.dragonCup.create": "drakono puodelis",
    "dragonCup": "drakono puodelis",
    "bitbybit.things.threeDPrinting.cups.dragonCup.create_description": "sukuria drakono puodelio modelį",
    "radiusMidOffset": "vidurinio spindulio poslinkis",
    "rotationTopAngle": "viršutinio sukimosi kampas",
    "rotationMidAngle": "vidurinio sukimosi kampas",
    "nrSkinCellsVertical": "vertikalių odos ląstelių skaičius",
    "nrSkinCellsHorizontal": "horizontalių odos ląstelių skaičius",
    "nrSkinCellDivisionsTop": "viršutinių odos ląstelių padalijimų skaičius",
    "nrSkinCellDivisionsBottom": "apatinių odos ląstelių padalijimų skaičius",
    "skinCellOuterHeight": "išorinis odos ląstelių aukštis",
    "skinCellInnerHeight": "vidinis odos ląstelių aukštis",
    "skinCellBottomHeight": "apatinis odos ląstelių aukštis",
    "skinCellTopHeight": "viršutinis odos ląstelių aukštis",
    "bottomThickness": "apatinis storis",
    "bitbybit.things.threeDPrinting.cups.dragonCup.getCompoundShape": "gauti sudėtinę formą",
    "bitbybit.things.threeDPrinting.cups.dragonCup.getCompoundShape_description": "gauna drakono puodelio sudėtinę formą",
    "DragonCupData<T>": "drakono puodelio duomenys T",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.create": "telefono lizdas",
    "desktop": "stalinis",
    "phoneNest": "telefono lizdas",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.create_description": "sukuria telefono lizdo modelį",
    "heightBottom": "apatinis aukštis",
    "heightTop": "viršutinis aukštis",
    "widthBack": "galinis plotis",
    "widthFront": "priekinis plotis",
    "backOffset": "galinis poslinkis",
    "applyOrnaments": "taikyti ornamentus",
    "filletRadius": "užapvalinimo spindulys",
    "phoneHeight": "telefono aukštis",
    "phoneWidth": "telefono plotis",
    "phoneThickness": "telefono storis",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.getCompoundShape": "gauti sudėtinę formą",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.getCompoundShape_description": "gauna telefono lizdo sudėtinę formą",
    "PhoneNestData<T>": "telefono lizdo duomenys T",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.drawOptions": "piešimo parinktys",
    "drawOptions": "piešimo parinktys",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.drawOptions_description": "sukuria piešimo parinktis modeliui",
    "mainMaterial": "pagrindinė medžiaga",
    "phoneMaterial": "telefono medžiaga",
    "Inputs.Base.Color": "įvesties bazinė spalva",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.create": "lašelių telefono laikiklis",
    "laserCutting": "lazerinis pjovimas",
    "gadgets": "įtaisai",
    "dropletsPhoneHolder": "lašelių telefono laikiklis",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.create_description": "sukuria lašelių telefono laikiklį",
    "title": "pavadinimas",
    "subtitle": "paantraštė",
    "includeLogo": "įtraukti logotipą",
    "kerf": "pjūvio plotis",
    "backLength": "galinis ilgis",
    "offsetAroundPhone": "poslinkis aplink telefoną",
    "penShelf": "rašiklio lentynėlė",
    "phoneLockHeight": "telefono užrakto aukštis",
    "includePattern": "įtraukti raštą",
    "densityPattern": "rašto tankis",
    "holesForWire": "skylės laidui",
    "wireInputThickness": "laido įvesties storis",
    "includeModel": "įtraukti modelį",
    "includeDrawings": "įtraukti brėžinius",
    "spacingDrawings": "brėžinių tarpai",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getCompoundShape": "gauti sudėtinę formą",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getCompoundShape_description": "gauna lašelių telefono laikiklio sudėtinę formą",
    "DropletsPhoneHolderData<T>": "lašelių telefono laikiklio duomenys T",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getCutWiresCompound": "gauti pjūvio laidų sudėtį",
    "getCutWiresCompound": "gauti pjūvio laidų sudėtį",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getCutWiresCompound_description": "gauna pjūvio laidų sudėtį",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getEngravingWiresCompound": "gauti graviravimo laidų sudėtį",
    "getEngravingWiresCompound": "gauti graviravimo laidų sudėtį",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getEngravingWiresCompound_description": "gauna graviravimo laidų sudėtį",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.downloadDXFDrawings": "atsisiųsti DXF brėžinius",
    "downloadDXFDrawings": "atsisiųsti DXF brėžinius",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.downloadDXFDrawings_description": "atsisiunčia DXF brėžinį",
    "download": "atsisiųsti",
    "cutWiresColor": "pjūvio laidų spalva",
    "engravingWiresColor": "graviravimo laidų spalva",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.downloadSTEPDrawings": "atsisiųsti STEP brėžinius",
    "downloadSTEPDrawings": "atsisiųsti STEP brėžinius",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.downloadSTEPDrawings_description": "atsisiunčia STEP brėžinį",
    "adjustYZ": "koreguoti YZ",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.download3dSTEPModel": "atsisiųsti 3D STEP modelį",
    "download3dSTEPModel": "atsisiųsti 3D STEP modelį",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.download3dSTEPModel_description": "atsisiunčia 3D STEP modelį",
    "bitbybit.things.architecture.houses.zenHideout.create": "zen slėptuvė",
    "architecture": "architektūra",
    "houses": "namai",
    "zenHideout": "zen slėptuvė",
    "bitbybit.things.architecture.houses.zenHideout.create_description": "sukuria zen slėptuvę",
    "widthFirstWing": "pirmo sparno plotis",
    "lengthFirstWing": "pirmo sparno ilgis",
    "terraceWidth": "terasos plotis",
    "widthSecondWing": "antro sparno plotis",
    "lengthSecondWing": "antro sparno ilgis",
    "heightWalls": "sienų aukštis",
    "roofAngleFirstWing": "pirmo sparno stogo kampas",
    "roofAngleSecondWing": "antro sparno stogo kampas",
    "roofOffset": "stogo poslinkis",
    "roofInsideOverhang": "vidinis stogo išsikišimas",
    "roofMaxDistAttachmentBeams": "maksimalus atstumas tarp stogo sijų",
    "roofAttachmentBeamWidth": "stogo sijos plotis",
    "roofAttachmentBeamHeight": "stogo sijos aukštis",
    "roofOutsideOverhang": "išorinis stogo išsikišimas",
    "columnSize": "kolonos dydis",
    "ceilingBeamHeight": "lubų sijos aukštis",
    "ceilingBeamWidth": "lubų sijos plotis",
    "nrCeilingBeamsBetweenColumns": "lubų sijų skaičius tarp kolonų",
    "distBetweenColumns": "atstumas tarp kolonų",
    "floorHeight": "grindų aukštis",
    "groundLevel": "žemės lygis",
    "facadePanelThickness": "fasado plokštės storis",
    "windowWidthOffset": "lango pločio poslinkis",
    "windowHeightOffset": "lango aukščio poslinkis",
    "windowFrameThickness": "lango rėmo storis",
    "windowGlassFrameThickness": "lango stiklo rėmo storis",
    "skinOpacity": "paviršiaus nepermatomumas",
    "bitbybit.things.furniture.chairs.snakeChair.create": "gyvatės kėdė",
    "furniture": "baldai",
    "chairs": "kėdės",
    "snakeChair": "gyvatės kėdė",
    "bitbybit.things.furniture.chairs.snakeChair.create_description": "sukuria gyvatės kėdės modelį",
    "sittingHeight": "sėdėjimo aukštis",
    "backRestOffset": "atlošo poslinkis",
    "backRestHeight": "atlošo aukštis",
    "nrOrnamentPlanks": "ornamentinių lentų skaičius",
    "ornamentDepth": "ornamento gylis",
    "bitbybit.things.furniture.chairs.snakeChair.getCompoundShape": "gauti sudėtinę formą",
    "bitbybit.things.furniture.chairs.snakeChair.getCompoundShape_description": "gauna kėdės sudėtinę formą",
    "SnakeChairData<T>": "gyvatės kėdės duomenys T",
    "bitbybit.things.furniture.chairs.snakeChair.getSittingWireShape": "gauti sėdėjimo vielos formą",
    "getSittingWireShape": "gauti sėdėjimo vielos formą",
    "bitbybit.things.furniture.chairs.snakeChair.getSittingWireShape_description": "gauna sėdėjimo zonos vielos formą",
    "bitbybit.things.furniture.chairs.snakeChair.getSittingAreaCenterPoint": "gauti sėdėjimo zonos centro tašką",
    "getSittingAreaCenterPoint": "gauti sėdėjimo zonos centro tašką",
    "bitbybit.things.furniture.chairs.snakeChair.getSittingAreaCenterPoint_description": "gauna sėdėjimo zonos centro tašką",
    "get points": "gauti taškus",
    "bitbybit.things.furniture.chairs.snakeChair.drawOptions": "piešimo parinktys",
    "bitbybit.things.furniture.chairs.snakeChair.drawOptions_description": "sukuria gyvatės kėdės piešimo parinktis",
    "bitbybit.things.furniture.tables.elegantTable.create": "elegantiškas stalas",
    "tables": "stalai",
    "elegantTable": "elegantiškas stalas",
    "bitbybit.things.furniture.tables.elegantTable.create_description": "sukuria elegantiško stalo modelį",
    "topThickness": "viršaus storis",
    "topOffset": "viršaus poslinkis",
    "minFillet": "minimalus užapvalinimas",
    "radiusLegTop": "viršutinės kojos spindulys",
    "radiusLegBottom": "apatinės kojos spindulys",
    "nrLegPairs": "kojų porų skaičius",
    "bitbybit.things.furniture.tables.elegantTable.getCompoundShape": "gauti sudėtinę formą",
    "bitbybit.things.furniture.tables.elegantTable.getCompoundShape_description": "gauna stalo sudėtinę formą",
    "ElegantTableData<T>": "elegantiško stalo duomenys T",
    "bitbybit.things.furniture.tables.elegantTable.getLegShapes": "gauti kojų formas",
    "getLegShapes": "gauti kojų formas",
    "bitbybit.things.furniture.tables.elegantTable.getLegShapes_description": "gauna kojų formas kaip sąrašą",
    "bitbybit.things.furniture.tables.elegantTable.getLegShapeByIndex": "gauti kojos formą pagal indeksą",
    "getLegShapeByIndex": "gauti kojos formą pagal indeksą",
    "bitbybit.things.furniture.tables.elegantTable.getLegShapeByIndex_description": "gauna kojos formą pagal indeksą",
    "bitbybit.things.furniture.tables.elegantTable.getTopPanelShape": "gauti viršutinės plokštės formą",
    "getTopPanelShape": "gauti viršutinės plokštės formą",
    "bitbybit.things.furniture.tables.elegantTable.getTopPanelShape_description": "gauna stalo viršutinės plokštės formą",
    "bitbybit.things.furniture.tables.elegantTable.getTopPanelWireShape": "gauti viršutinės plokštės kontūro formą",
    "getTopPanelWireShape": "gauti viršutinės plokštės kontūro formą",
    "bitbybit.things.furniture.tables.elegantTable.getTopPanelWireShape_description": "gauna stalo viršutinės plokštės kontūro formą",
    "bitbybit.things.furniture.tables.elegantTable.getBottomPanelWireShape": "gauti apatinės plokštės kontūro formą",
    "getBottomPanelWireShape": "gauti apatinės plokštės kontūro formą",
    "bitbybit.things.furniture.tables.elegantTable.getBottomPanelWireShape_description": "gauna stalo apatinės plokštės kontūro formą",
    "bitbybit.things.furniture.tables.elegantTable.getBottomPanelShape": "gauti apatinės plokštės formą",
    "getBottomPanelShape": "gauti apatinės plokštės formą",
    "bitbybit.things.furniture.tables.elegantTable.getBottomPanelShape_description": "gauna stalo apatinės plokštės formą",
    "bitbybit.things.furniture.tables.elegantTable.getLegsCompoundShape": "gauti kojų sudėtinę formą",
    "getLegsCompoundShape": "gauti kojų sudėtinę formą",
    "bitbybit.things.furniture.tables.elegantTable.getLegsCompoundShape_description": "gauna kojų formas kaip sudėtinę formą",
    "bitbybit.things.furniture.tables.elegantTable.getTableTopCenterPoint": "gauti stalo viršutinį centrinį tašką",
    "getTableTopCenterPoint": "gauti stalo viršutinį centrinį tašką",
    "bitbybit.things.furniture.tables.elegantTable.getTableTopCenterPoint_description": "gauna viršutinį centrinį tašką",
    "bitbybit.things.furniture.tables.elegantTable.getTableBottomCenterPoint": "gauti stalo apatinį centrinį tašką",
    "getTableBottomCenterPoint": "gauti stalo apatinį centrinį tašką",
    "bitbybit.things.furniture.tables.elegantTable.getTableBottomCenterPoint_description": "gauna apatinį centrinį tašką",
    "bitbybit.things.furniture.tables.elegantTable.getLegBottomPoints": "gauti kojų apatinius taškus",
    "getLegBottomPoints": "gauti kojų apatinius taškus",
    "bitbybit.things.furniture.tables.elegantTable.getLegBottomPoints_description": "gauna kojų apatinius taškus",
    "bitbybit.things.furniture.tables.elegantTable.getLegTopPoints": "gauti kojų viršutinius taškus",
    "getLegTopPoints": "gauti kojų viršutinius taškus",
    "bitbybit.things.furniture.tables.elegantTable.getLegTopPoints_description": "gauna kojų viršutinius taškus",
    "bitbybit.things.furniture.tables.elegantTable.drawOptions": "piešimo parinktys",
    "bitbybit.things.furniture.tables.elegantTable.drawOptions_description": "sukuria piešimo parinktis elegantiškam stalui",
    "topMaterial": "viršutinė medžiaga",
    "topBaseMaterial": "viršutinės bazės medžiaga",
    "legsMaterial": "kojų medžiaga",
    "bitbybit.things.furniture.tables.goodCoffeeTable.create": "geras kavos stalas",
    "goodCoffeeTable": "geras kavos stalas",
    "bitbybit.things.furniture.tables.goodCoffeeTable.create_description": "sukuria gero kavos stalo modelį",
    "chamfer": "nuožulnumas",
    "topGlassOffset": "viršutinio stiklo poslinkis",
    "glassThickness": "stiklo storis",
    "glassHolderLength": "stiklo laikiklio ilgis",
    "shelfTopOffset": "lentynos viršaus poslinkis",
    "shelfThickness": "lentynos storis",
    "legWidth": "kojos plotis",
    "legDepth": "kojos gylis",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getCompoundShape": "gauti sudėtinę formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getCompoundShape_description": "gauna stalo sudėtinę formą",
    "GoodCoffeeTableData<T>": "gero kavos stalo duomenys T",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegShapes": "gauti kojų formas",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegShapes_description": "gauna kojų formas kaip sąrašą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegShapeByIndex": "gauti kojos formą pagal indeksą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegShapeByIndex_description": "gauna kojos formą pagal indeksą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTopPanelShape": "gauti viršutinės plokštės formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTopPanelShape_description": "gauna stalo viršutinės plokštės formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTopPanelWireShape": "gauti viršutinės plokštės kontūro formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTopPanelWireShape_description": "gauna stalo viršutinės plokštės kontūro formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getGlassPanelShape": "gauti stiklo plokštės formą",
    "getGlassPanelShape": "gauti stiklo plokštės formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getGlassPanelShape_description": "gauna stalo stiklo plokštės formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getGlassPanelWireShape": "gauti stiklo plokštės kontūro formą",
    "getGlassPanelWireShape": "gauti stiklo plokštės kontūro formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getGlassPanelWireShape_description": "gauna stalo stiklo plokštės kontūro formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getShelfShape": "gauti lentynos formą",
    "getShelfShape": "gauti lentynos formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getShelfShape_description": "gauna stalo lentynos formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getShelfTopWireShape": "gauti lentynos viršaus kontūro formą",
    "getShelfTopWireShape": "gauti lentynos viršaus kontūro formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getShelfTopWireShape_description": "gauna stalo lentynos viršaus kontūro formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegsCompoundShape": "gauti kojų sudėtinę formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegsCompoundShape_description": "gauna kojų formas kaip sudėtinę formą",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTableTopCenterPoint": "gauti stalo viršutinį centrinį tašką",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTableTopCenterPoint_description": "gauna viršutinį centrinį tašką",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTableShelfTopCenterPoint": "gauti lentynos viršutinį centrinį tašką",
    "getTableShelfTopCenterPoint": "gauti lentynos viršutinį centrinį tašką",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTableShelfTopCenterPoint_description": "gauna lentynos viršutinį centrinį tašką",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegBottomPoints": "gauti kojų apatinius taškus",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegBottomPoints_description": "gauna kojų apatinius taškus",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegTopPoints": "gauti kojų viršutinius taškus",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegTopPoints_description": "gauna kojų viršutinius taškus",
    "bitbybit.things.furniture.tables.goodCoffeeTable.drawOptions": "piešimo parinktys",
    "bitbybit.things.furniture.tables.goodCoffeeTable.drawOptions_description": "sukuria piešimo parinktis geram kavos stalui",
    "topGlassMaterial": "viršutinė stiklo medžiaga",
    "shelfMaterial": "lentynos medžiaga",
    "bitbybit.things.furniture.tables.snakeTable.create": "gyvatės stalas",
    "snakeTable": "gyvatės stalas",
    "bitbybit.things.furniture.tables.snakeTable.create_description": "sukuria gyvatės stalo modelį",
    "supportLength": "atramos ilgis",
    "shelfHeight": "lentynos aukštis",
    "glassOffset": "stiklo poslinkis",
    "bitbybit.things.furniture.tables.snakeTable.getCompoundShape": "gauti sudėtinę formą",
    "bitbybit.things.furniture.tables.snakeTable.getCompoundShape_description": "gauna stalo sudėtinę formą",
    "SnakeTableData<T>": "gyvatės stalo duomenys T",
    "bitbybit.things.furniture.tables.snakeTable.getGlassShape": "gauti stiklo formą",
    "getGlassShape": "gauti stiklo formą",
    "bitbybit.things.furniture.tables.snakeTable.getGlassShape_description": "gauna stalo stiklo formą",
    "bitbybit.things.furniture.tables.snakeTable.getMainShape": "gauti pagrindinę formą",
    "getMainShape": "gauti pagrindinę formą",
    "bitbybit.things.furniture.tables.snakeTable.getMainShape_description": "gauna stalo pagrindinę formą",
    "bitbybit.things.furniture.tables.snakeTable.getTopCenterPoint": "gauti viršutinį centrinį tašką",
    "getTopCenterPoint": "gauti viršutinį centrinį tašką",
    "bitbybit.things.furniture.tables.snakeTable.getTopCenterPoint_description": "gauna stalo viršutinį centrinį tašką",
    "bitbybit.things.furniture.tables.snakeTable.drawOptions": "piešimo parinktys",
    "bitbybit.things.furniture.tables.snakeTable.drawOptions_description": "sukuria piešimo parinktis gyvatės stalui",
    "glassMaterial": "stiklo medžiaga",
    "bitbybit.things.enums.lodEnum": "detalumo lygio enum",
    "enums": "enumai",
    "lodEnum": "detalumo lygio enum",
    "bitbybit.things.enums.lodEnum_description": "sukuria detalumo lygio enum reikšmę",
    "bitbybit.jscad.transformSolids": "transformuoti kietuosius kūnus",
    "jscad": "jscad",
    "transformSolids": "transformuoti kietuosius kūnus",
    "bitbybit.jscad.transformSolids_description": "transformuoja jscad kietuosius kūnus su transformacijomis",
    "JSCADEntity[]": "jscad objektų masyvas",
    "bitbybit.jscad.transformSolid": "transformuoti kietąjį kūną",
    "transformSolid": "transformuoti kietąjį kūną",
    "bitbybit.jscad.transformSolid_description": "transformuoja jscad kietąjį kūną su transformacijomis",
    "JSCADEntity": "jscad objektas",
    "bitbybit.jscad.downloadSolidSTL": "atsisiųsti kietąjį kūną STL",
    "downloadSolidSTL": "atsisiųsti kietąjį kūną STL",
    "bitbybit.jscad.downloadSolidSTL_description": "atsisiunčia STL failą iš 3D kieto kūno",
    "bitbybit.jscad.downloadSolidsSTL": "atsisiųsti kietuosius kūnus STL",
    "downloadSolidsSTL": "atsisiųsti kietuosius kūnus STL",
    "bitbybit.jscad.downloadSolidsSTL_description": "atsisiunčia STL failą iš 3D kietųjų kūnų",
    "bitbybit.jscad.downloadGeometryDxf": "atsisiųsti geometriją DXF",
    "downloadGeometryDxf": "atsisiųsti geometriją DXF",
    "bitbybit.jscad.downloadGeometryDxf_description": "atsisiunčia DXF failą iš jscad geometrijos",
    "geometry": "geometrija",
    "JSCADEntity | JSCADEntity[]": "jscad objektas arba masyvas",
    "bitbybit.jscad.downloadGeometry3MF": "atsisiųsti geometriją 3MF",
    "downloadGeometry3MF": "atsisiųsti geometriją 3MF",
    "bitbybit.jscad.downloadGeometry3MF_description": "atsisiunčia 3MF failą iš jscad geometrijos",
    "bitbybit.jscad.booleans.intersect": "sankirta",
    "intersect": "sankirta",
    "bitbybit.jscad.booleans.intersect_description": "sukuria sankirtą iš kelių kietųjų kūnų",
    "bitbybit.jscad.booleans.subtract": "atimtis",
    "subtract": "atimtis",
    "bitbybit.jscad.booleans.subtract_description": "atimties operacija tarp kelių kietųjų kūnų",
    "bitbybit.jscad.booleans.union": "sąjunga",
    "bitbybit.jscad.booleans.union_description": "sujungia kelis kietuosius kūnus",
    "bitbybit.jscad.booleans.intersectTwo": "sankirta dviejų",
    "intersectTwo": "sankirta dviejų",
    "bitbybit.jscad.booleans.intersectTwo_description": "sukuria sankirtą iš dviejų kietųjų kūnų",
    "bitbybit.jscad.booleans.subtractTwo": "atimtis dviejų",
    "subtractTwo": "atimtis dviejų",
    "bitbybit.jscad.booleans.subtractTwo_description": "atimties operacija tarp dviejų kietųjų kūnų",
    "bitbybit.jscad.booleans.unionTwo": "sąjunga dviejų",
    "unionTwo": "sąjunga dviejų",
    "bitbybit.jscad.booleans.unionTwo_description": "sujungia du kietuosius kūnus",
    "bitbybit.jscad.booleans.subtractFrom": "atimtis iš",
    "subtractFrom": "atimtis iš",
    "bitbybit.jscad.booleans.subtractFrom_description": "atimties operacija tarp vieno ir kelių kietųjų kūnų",
    "bitbybit.jscad.expansions.expand": "išplėsti",
    "expansions": "išplėtimai",
    "expand": "išplėsti",
    "bitbybit.jscad.expansions.expand_description": "išplečia kietąsias geometrijas",
    "expansion": "išplėtimas",
    "delta": "delta",
    "corners": "kampai",
    "solidCornerTypeEnum": "kieto kampo tipo enum",
    "bitbybit.jscad.expansions.offset": "poslinkis",
    "bitbybit.jscad.expansions.offset_description": "perkelia 2D geometrijas",
    "bitbybit.jscad.extrusions.extrudeLinear": "linijinis ekstruzija",
    "extrudeLinear": "linijinis ekstruzija",
    "bitbybit.jscad.extrusions.extrudeLinear_description": "linijiniu būdu ekstruzuoja 2D geometrijas",
    "twistAngle": "sukimo kampas",
    "twistSteps": "sukimo žingsniai",
    "bitbybit.jscad.extrusions.extrudeRectangular": "stačiakampis ekstruzija",
    "extrudeRectangular": "stačiakampis ekstruzija",
    "bitbybit.jscad.extrusions.extrudeRectangular_description": "stačiakampiu būdu ekstruzuoja 2D geometrijas",
    "bitbybit.jscad.extrusions.extrudeRectangularPoints": "stačiakampis taškų ekstruzija",
    "extrudeRectangularPoints": "stačiakampis taškų ekstruzija",
    "bitbybit.jscad.extrusions.extrudeRectangularPoints_description": "stačiakampiu būdu ekstruzuoja 2D taškus",
    "bitbybit.jscad.extrusions.extrudeRotate": "sukamoji ekstruzija",
    "extrudeRotate": "sukamoji ekstruzija",
    "bitbybit.jscad.extrusions.extrudeRotate_description": "suka ir ekstruzuoja 2D taškus",
    "polygon": "daugiakampis",
    "startAngle": "pradinis kampas",
    "bitbybit.jscad.hulls.hullChain": "apvalkalo grandinė",
    "hulls": "apvalkalai",
    "hullChain": "apvalkalo grandinė",
    "bitbybit.jscad.hulls.hullChain_description": "sujungia kietuosius kūnus arba 2D geometrijas eilės tvarka",
    "bitbybit.jscad.hulls.hull": "apvalkalas",
    "hull": "apvalkalas",
    "bitbybit.jscad.hulls.hull_description": "sukuria išgaubtą apvalkalą, jungiantį kietuosius kūnus arba 2D geometrijas",
    "bitbybit.jscad.path.createFromPoints": "iš taškų",
    "createFromPoints": "iš taškų",
    "bitbybit.jscad.path.createFromPoints_description": "sukuria 2D kelią iš taškų",
    "Base.Point2[]": "bazinis taškų 2 masyvas",
    "bitbybit.jscad.path.createPathsFromPoints": "keliai iš taškų",
    "createPathsFromPoints": "keliai iš taškų",
    "bitbybit.jscad.path.createPathsFromPoints_description": "sukuria 2D kelius iš taškų sąrašų",
    "pointsLists": "taškų sąrašai",
    "Base.Point3[][] | Base.Point2[][]": "bazinis taškų 3 arba 2 masyvas",
    "bitbybit.jscad.path.createFromPolyline": "iš polilinijos",
    "createFromPolyline": "iš polilinijos",
    "bitbybit.jscad.path.createFromPolyline_description": "sukuria 2D kelią iš polilinijos",
    "bitbybit.jscad.path.createEmpty": "tuščias",
    "createEmpty": "tuščias",
    "bitbybit.jscad.path.createEmpty_description": "sukuria tuščią 2D kelią",
    "bitbybit.jscad.path.close": "uždaryti",
    "close": "uždaryti",
    "bitbybit.jscad.path.close_description": "uždaro atvirą 2D kelią",
    "bitbybit.jscad.path.appendPoints": "pridėti taškus",
    "appendPoints": "pridėti taškus",
    "bitbybit.jscad.path.appendPoints_description": "prideda 2D taškus prie kelio",
    "append": "pridėti",
    "bitbybit.jscad.path.appendPolyline": "pridėti poliliniją",
    "appendPolyline": "pridėti poliliniją",
    "bitbybit.jscad.path.appendPolyline_description": "prideda poliliniją prie kelio",
    "bitbybit.jscad.path.appendArc": "pridėti lanką",
    "appendArc": "pridėti lanką",
    "bitbybit.jscad.path.appendArc_description": "prideda lanką prie kelio",
    "xAxisRotation": "x ašies pasukimas",
    "clockwise": "pagal laikrodžio rodyklę",
    "large": "didelis",
    "bitbybit.jscad.polygon.createFromPoints": "iš taškų",
    "bitbybit.jscad.polygon.createFromPoints_description": "sukuria 2D daugiakampį iš taškų",
    "bitbybit.jscad.polygon.createFromPolyline": "iš polilinijos",
    "bitbybit.jscad.polygon.createFromPolyline_description": "sukuria 2D daugiakampį iš polilinijos",
    "bitbybit.jscad.polygon.createFromCurve": "iš kreivės",
    "createFromCurve": "iš kreivės",
    "bitbybit.jscad.polygon.createFromCurve_description": "sukuria 2D daugiakampį iš kreivės",
    "bitbybit.jscad.polygon.createFromPath": "iš kelio",
    "createFromPath": "iš kelio",
    "bitbybit.jscad.polygon.createFromPath_description": "sukuria 2D daugiakampį iš kelio",
    "bitbybit.jscad.polygon.circle": "apskritimas",
    "bitbybit.jscad.polygon.circle_description": "sukuria 2D daugiakampį apskritimą",
    "bitbybit.jscad.polygon.ellipse": "elipsė",
    "ellipse": "elipsė",
    "bitbybit.jscad.polygon.ellipse_description": "sukuria 2D daugiakampę elipsę",
    "bitbybit.jscad.polygon.rectangle": "stačiakampis",
    "rectangle": "stačiakampis",
    "bitbybit.jscad.polygon.rectangle_description": "sukuria 2D daugiakampį stačiakampį",
    "bitbybit.jscad.polygon.roundedRectangle": "suapvalintas stačiakampis",
    "roundedRectangle": "suapvalintas stačiakampis",
    "bitbybit.jscad.polygon.roundedRectangle_description": "sukuria 2D suapvalintą stačiakampį",
    "roundRadius": "apvalinimo spindulys",
    "bitbybit.jscad.polygon.square": "kvadratas",
    "square": "kvadratas",
    "bitbybit.jscad.polygon.square_description": "sukuria 2D daugiakampį kvadratą",
    "bitbybit.jscad.polygon.star": "žvaigždė",
    "star": "žvaigždė",
    "bitbybit.jscad.polygon.star_description": "sukuria 2D daugiakampę žvaigždę",
    "vertices": "viršūnės",
    "bitbybit.jscad.shapes.cube": "kubas",
    "cube": "kubas",
    "bitbybit.jscad.shapes.cube_description": "sukuria 3D kubo formą",
    "bitbybit.jscad.shapes.cubesOnCenterPoints": "kubai ant centrinių taškų",
    "cubesOnCenterPoints": "kubai ant centrinių taškų",
    "bitbybit.jscad.shapes.cubesOnCenterPoints_description": "sukuria 3D kubus ant centrinių taškų",
    "primitives on centers": "primityvai ant centrų",
    "bitbybit.jscad.shapes.cuboid": "stačiakampis gretasienis",
    "cuboid": "stačiakampis gretasienis",
    "bitbybit.jscad.shapes.cuboid_description": "sukuria 3D stačiakampio gretasienio formą",
    "bitbybit.jscad.shapes.cuboidsOnCenterPoints": "stačiakampiai gretasieniai ant centrinių taškų",
    "cuboidsOnCenterPoints": "stačiakampiai gretasieniai ant centrinių taškų",
    "bitbybit.jscad.shapes.cuboidsOnCenterPoints_description": "sukuria 3D stačiakampius gretasienius ant centrinių taškų",
    "bitbybit.jscad.shapes.cylinderElliptic": "elipsinis cilindras",
    "cylinderElliptic": "elipsinis cilindras",
    "bitbybit.jscad.shapes.cylinderElliptic_description": "sukuria 3D elipsinį cilindro kūną",
    "startRadius": "pradinis spindulys",
    "endRadius": "galinis spindulys",
    "bitbybit.jscad.shapes.cylinderEllipticOnCenterPoints": "elipsiniai cilindrai ant centrinių taškų",
    "cylinderEllipticOnCenterPoints": "elipsiniai cilindrai ant centrinių taškų",
    "bitbybit.jscad.shapes.cylinderEllipticOnCenterPoints_description": "sukuria 3D elipsinius cilindrus ant centrinių taškų",
    "bitbybit.jscad.shapes.cylinder": "cilindras",
    "cylinder": "cilindras",
    "bitbybit.jscad.shapes.cylinder_description": "sukuria 3D cilindro kūną",
    "bitbybit.jscad.shapes.cylindersOnCenterPoints": "cilindrai ant centrinių taškų",
    "cylindersOnCenterPoints": "cilindrai ant centrinių taškų",
    "bitbybit.jscad.shapes.cylindersOnCenterPoints_description": "sukuria 3D cilindrus ant centrinių taškų",
    "bitbybit.jscad.shapes.ellipsoid": "elipsoidas",
    "ellipsoid": "elipsoidas",
    "bitbybit.jscad.shapes.ellipsoid_description": "sukuria 3D elipsoido kūną",
    "bitbybit.jscad.shapes.ellipsoidsOnCenterPoints": "elipsoidai ant centrinių taškų",
    "ellipsoidsOnCenterPoints": "elipsoidai ant centrinių taškų",
    "bitbybit.jscad.shapes.ellipsoidsOnCenterPoints_description": "sukuria 3D elipsoidų ant centrinių taškų",
    "bitbybit.jscad.shapes.geodesicSphere": "geodezinė sfera",
    "geodesicSphere": "geodezinė sfera",
    "bitbybit.jscad.shapes.geodesicSphere_description": "sukuria 3D geodezinės sferos kūną",
    "frequency": "dažnis",
    "bitbybit.jscad.shapes.geodesicSpheresOnCenterPoints": "geodezinės sferos ant centrinių taškų",
    "geodesicSpheresOnCenterPoints": "geodezinės sferos ant centrinių taškų",
    "bitbybit.jscad.shapes.geodesicSpheresOnCenterPoints_description": "sukuria 3D geodezines sferas ant centrinių taškų",
    "bitbybit.jscad.shapes.roundedCuboid": "suapvalintas stačiakampis gretasienis",
    "roundedCuboid": "suapvalintas stačiakampis gretasienis",
    "bitbybit.jscad.shapes.roundedCuboid_description": "sukuria 3D suapvalintą stačiakampio gretasienio kūną",
    "bitbybit.jscad.shapes.roundedCuboidsOnCenterPoints": "suapvalinti stačiakampiai gretasieniai ant centrinių taškų",
    "roundedCuboidsOnCenterPoints": "suapvalinti stačiakampiai gretasieniai ant centrinių taškų",
    "bitbybit.jscad.shapes.roundedCuboidsOnCenterPoints_description": "sukuria 3D suapvalintus stačiakampius gretasienius ant centrinių taškų",
    "bitbybit.jscad.shapes.roundedCylinder": "suapvalintas cilindras",
    "roundedCylinder": "suapvalintas cilindras",
    "bitbybit.jscad.shapes.roundedCylinder_description": "sukuria 3D suapvalintą cilindro kūną",
    "bitbybit.jscad.shapes.roundedCylindersOnCenterPoints": "suapvalinti cilindrai ant centrinių taškų",
    "roundedCylindersOnCenterPoints": "suapvalinti cilindrai ant centrinių taškų",
    "bitbybit.jscad.shapes.roundedCylindersOnCenterPoints_description": "sukuria 3D suapvalintus cilindrus ant centrinių taškų",
    "bitbybit.jscad.shapes.sphere": "sfera",
    "sphere": "sfera",
    "bitbybit.jscad.shapes.sphere_description": "sukuria 3D sferos kūną",
    "bitbybit.jscad.shapes.spheresOnCenterPoints": "sferos ant centrinių taškų",
    "spheresOnCenterPoints": "sferos ant centrinių taškų",
    "bitbybit.jscad.shapes.spheresOnCenterPoints_description": "sukuria 3D sferas ant centrinių taškų",
    "bitbybit.jscad.shapes.torus": "torusas",
    "torus": "torusas",
    "bitbybit.jscad.shapes.torus_description": "sukuria 3D toruso kūną",
    "innerSegments": "vidiniai segmentai",
    "outerSegments": "išoriniai segmentai",
    "innerRotation": "vidinis pasukimas",
    "outerRotation": "išorinis pasukimas",
    "bitbybit.jscad.shapes.fromPolygonPoints": "iš daugiakampio taškų",
    "fromPolygonPoints": "iš daugiakampio taškų",
    "bitbybit.jscad.shapes.fromPolygonPoints_description": "sukuria 3D formą iš įdėtų daugiakampio taškų",
    "polygonPoints": "daugiakampio taškai",
    "Base.Point3[][]": "bazinis taškų 3 masyvas",
    "bitbybit.jscad.text.cylindricalText": "cilindrinis tekstas",
    "cylindricalText": "cilindrinis tekstas",
    "bitbybit.jscad.text.cylindricalText_description": "sukuria tekstą su cilindrų grandine",
    "extrusionHeight": "ekstruzijos aukštis",
    "extrusionSize": "ekstruzijos dydis",
    "jscadTextAlignEnum": "jscad teksto lygiavimo enum",
    "bitbybit.jscad.text.sphericalText": "sferinis tekstas",
    "sphericalText": "sferinis tekstas",
    "bitbybit.jscad.text.sphericalText_description": "sukuria tekstą su sferų grandine",
    "bitbybit.jscad.text.createVectorText": "vektorinis tekstas",
    "createVectorText": "vektorinis tekstas",
    "bitbybit.jscad.text.createVectorText_description": "sukuria vektorinį tekstą",
    "bitbybit.jscad.colors.colorize": "nuspalvinti",
    "colors": "spalvos",
    "colorize": "nuspalvinti",
    "bitbybit.jscad.colors.colorize_description": "nuspalvina jscad geometriją",
    "bitbybit.manifold.manifoldToMeshPointer": "manifold į tinklo rodyklę",
    "manifold": "manifold",
    "manifoldToMeshPointer": "manifold į tinklo rodyklę",
    "bitbybit.manifold.manifoldToMeshPointer_description": "paverčia manifold formą į tinklo rodyklę",
    "meshing": "tinklinimas",
    "normalIdx": "normalus indeksas",
    "bitbybit.manifold.decomposeManifoldOrCrossSection": "išskaidyti manifold arba pjūvį",
    "decomposeManifoldOrCrossSection": "išskaidyti manifold arba pjūvį",
    "bitbybit.manifold.decomposeManifoldOrCrossSection_description": "išskaido manifold arba pjūvį į tinklą arba poligonus",
    "decompose": "išskaidyti",
    "manifoldOrCrossSection": "manifold arba pjūvis",
    "bitbybit.manifold.decomposeManifoldsOrCrossSections": "išskaidyti manifoldus arba pjūvius",
    "decomposeManifoldsOrCrossSections": "išskaidyti manifoldus arba pjūvius",
    "bitbybit.manifold.decomposeManifoldsOrCrossSections_description": "išskaido manifoldus arba pjūvius į tinklus arba poligonus",
    "manifoldsOrCrossSections": "manifoldai arba pjūviai",
    "bitbybit.manifold.deleteManifoldOrCrossSection": "ištrinti manifold arba pjūvį",
    "deleteManifoldOrCrossSection": "ištrinti manifold arba pjūvį",
    "bitbybit.manifold.deleteManifoldOrCrossSection_description": "ištrina manifold arba pjūvį iš atminties",
    "cleanup": "išvalymas",
    "bitbybit.manifold.deleteManifoldsOrCrossSections": "ištrinti manifoldus arba pjūvius",
    "deleteManifoldsOrCrossSections": "ištrinti manifoldus arba pjūvius",
    "bitbybit.manifold.deleteManifoldsOrCrossSections_description": "ištrina manifoldus arba pjūvius iš atminties",
    "bitbybit.manifold.manifold.manifoldToMesh": "manifold į tinklą",
    "manifoldToMesh": "manifold į tinklą",
    "bitbybit.manifold.manifold.manifoldToMesh_description": "paverčia manifold formą į tinklą",
    "bitbybit.manifold.manifold.manifoldsToMeshes": "manifoldai į tinklus",
    "manifoldsToMeshes": "manifoldai į tinklus",
    "bitbybit.manifold.manifold.manifoldsToMeshes_description": "paverčia manifold formas į tinklus",
    "manifolds": "manifoldai",
    "bitbybit.manifold.manifold.shapes.manifoldFromMesh": "manifold iš tinklo",
    "manifoldFromMesh": "manifold iš tinklo",
    "bitbybit.manifold.manifold.shapes.manifoldFromMesh_description": "konvertuoja tinklą į manifold",
    "DecomposedManifoldMeshDto": "išskaidytas manifold tinklo dto",
    "bitbybit.manifold.manifold.shapes.cube": "kubas",
    "bitbybit.manifold.manifold.shapes.cube_description": "sukuria 3D kubo formą",
    "bitbybit.manifold.manifold.shapes.sphere": "sfera",
    "bitbybit.manifold.manifold.shapes.sphere_description": "sukuria 3D sferos formą",
    "circularSegments": "apskritiminiai segmentai",
    "bitbybit.manifold.manifold.shapes.tetrahedron": "tetraedras",
    "tetrahedron": "tetraedras",
    "bitbybit.manifold.manifold.shapes.tetrahedron_description": "sukuria 3D tetraedro formą",
    "bitbybit.manifold.manifold.shapes.cylinder": "cilindras",
    "bitbybit.manifold.manifold.shapes.cylinder_description": "sukuria 3D cilindro formą",
    "radiusLow": "apatinis spindulys",
    "radiusHigh": "viršutinis spindulys",
    "bitbybit.manifold.manifold.booleans.subtract": "atimti",
    "bitbybit.manifold.manifold.booleans.subtract_description": "atimti dvi manifold formas",
    "a to b": "a į b",
    "manifold1": "manifold 1",
    "manifold2": "manifold 2",
    "bitbybit.manifold.manifold.booleans.add": "pridėti",
    "bitbybit.manifold.manifold.booleans.add_description": "prideda dvi manifold formas",
    "bitbybit.manifold.manifold.booleans.intersect": "sankirta",
    "bitbybit.manifold.manifold.booleans.intersect_description": "sankirta tarp dviejų manifold formų",
    "bitbybit.manifold.manifold.booleans.differenceTwo": "dviejų skirtumas",
    "differenceTwo": "dviejų skirtumas",
    "bitbybit.manifold.manifold.booleans.differenceTwo_description": "dviejų manifold formų skirtumas",
    "2 manifolds": "2 manifoldai",
    "bitbybit.manifold.manifold.booleans.unionTwo": "dviejų sąjunga",
    "bitbybit.manifold.manifold.booleans.unionTwo_description": "dviejų manifold formų sąjunga",
    "bitbybit.manifold.manifold.booleans.intersectionTwo": "dviejų sankirta",
    "intersectionTwo": "dviejų sankirta",
    "bitbybit.manifold.manifold.booleans.intersectionTwo_description": "dviejų manifold formų sankirta",
    "bitbybit.manifold.manifold.booleans.difference": "skirtumas",
    "bitbybit.manifold.manifold.booleans.difference_description": "daugelio manifold formų skirtumas",
    "bitbybit.manifold.manifold.booleans.union": "sąjunga",
    "bitbybit.manifold.manifold.booleans.union_description": "daugelio manifold formų sąjunga",
    "bitbybit.manifold.manifold.booleans.intersection": "sankirta",
    "bitbybit.manifold.manifold.booleans.intersection_description": "daugelio manifold formų sankirta",
    "bitbybit.manifold.manifold.booleans.split": "padalinti",
    "split": "padalinti",
    "bitbybit.manifold.manifold.booleans.split_description": "padalina manifold kitame manifold",
    "manifoldToSplit": "manifold padalijimui",
    "manifoldCutter": "manifold pjoviklis",
    "bitbybit.manifold.manifold.booleans.splitByPlane": "padalinti plokštuma",
    "splitByPlane": "padalinti plokštuma",
    "bitbybit.manifold.manifold.booleans.splitByPlane_description": "padalina manifold plokštuma",
    "originOffset": "pradžios poslinkis",
    "bitbybit.manifold.manifold.booleans.splitByPlaneOnOffsets": "padalinti plokštuma su poslinkiais",
    "splitByPlaneOnOffsets": "padalinti plokštuma su poslinkiais",
    "bitbybit.manifold.manifold.booleans.splitByPlaneOnOffsets_description": "padalina manifold plokštuma su poslinkiais",
    "originOffsets": "pradžios poslinkiai",
    "bitbybit.manifold.manifold.booleans.trimByPlane": "apkirpti plokštuma",
    "trimByPlane": "apkirpti plokštuma",
    "bitbybit.manifold.manifold.booleans.trimByPlane_description": "apkerpa manifold plokštuma",
    "trim": "apkirpti",
    "bitbybit.manifold.manifold.operations.hull": "apvalkalas",
    "bitbybit.manifold.manifold.operations.hull_description": "apskaičiuoja manifold formos išgaubtą apvalkalą",
    "bitbybit.manifold.manifold.operations.hullPoints": "apvalkalo taškai",
    "hullPoints": "apvalkalo taškai",
    "bitbybit.manifold.manifold.operations.hullPoints_description": "sukuria apvalkalą iš taškų arba manifoldų",
    "bitbybit.manifold.manifold.operations.slice": "pjūvis",
    "bitbybit.manifold.manifold.operations.slice_description": "grąžina objekto pjūvį tam tikrame aukštyje",
    "cross sections": "pjūviai",
    "bitbybit.manifold.manifold.operations.project": "projekcija",
    "bitbybit.manifold.manifold.operations.project_description": "sukuria projekciją XY plokštumoje iš formos kontūro",
    "bitbybit.manifold.manifold.operations.setTolerance": "nustatyti toleranciją",
    "setTolerance": "nustatyti toleranciją",
    "bitbybit.manifold.manifold.operations.setTolerance_description": "nustato manifold tolerancijos reikšmę",
    "basic": "pagrindinis",
    "bitbybit.manifold.manifold.operations.reserveIds": "rezervuoti id",
    "reserveIds": "rezervuoti id",
    "bitbybit.manifold.manifold.operations.reserveIds_description": "rezervuoja nuoseklius tinklo id",
    "count": "skaičius",
    "bitbybit.manifold.manifold.operations.asOriginal": "kaip originalas",
    "asOriginal": "kaip originalas",
    "bitbybit.manifold.manifold.operations.asOriginal_description": "atstato manifold id kaip originalius",
    "bitbybit.manifold.manifold.operations.compose": "sujungti",
    "compose": "sujungti",
    "bitbybit.manifold.manifold.operations.compose_description": "sukuria manifold iš manifoldų sąrašo",
    "composition": "kompozicija",
    "bitbybit.manifold.manifold.operations.decompose": "išskaidyti",
    "bitbybit.manifold.manifold.operations.decompose_description": "išskaido manifold į atskiras dalis",
    "bitbybit.manifold.manifold.operations.calculateNormals": "apskaičiuoti normalias",
    "calculateNormals": "apskaičiuoti normalias",
    "bitbybit.manifold.manifold.operations.calculateNormals_description": "apskaičiuoja viršūnių normalias",
    "adjustments": "pataisymai",
    "minSharpAngle": "minimalus aštrus kampas",
    "bitbybit.manifold.manifold.operations.calculateCurvature": "apskaičiuoti kreivumą",
    "calculateCurvature": "apskaičiuoti kreivumą",
    "bitbybit.manifold.manifold.operations.calculateCurvature_description": "apskaičiuoja viršūnių kreivumą",
    "gaussianIdx": "gauso indeksas",
    "meanIdx": "vidutinis indeksas",
    "bitbybit.manifold.manifold.operations.refineToTolerance": "patobulinti iki tolerancijos",
    "refineToTolerance": "patobulinti iki tolerancijos",
    "bitbybit.manifold.manifold.operations.refineToTolerance_description": "patobulina tinklą iki tolerancijos",
    "bitbybit.manifold.manifold.operations.refineToLength": "patobulinti iki ilgio",
    "refineToLength": "patobulinti iki ilgio",
    "bitbybit.manifold.manifold.operations.refineToLength_description": "patobulina tinklą iki ilgio",
    "bitbybit.manifold.manifold.operations.refine": "patobulinti",
    "refine": "patobulinti",
    "bitbybit.manifold.manifold.operations.refine_description": "patobulina tinklą padalijant kraštines",
    "bitbybit.manifold.manifold.operations.smoothOut": "išlyginti",
    "smoothOut": "išlyginti",
    "bitbybit.manifold.manifold.operations.smoothOut_description": "išlygina manifold naudodamas tangentinius vektorius",
    "minSmoothness": "minimali lygumas",
    "bitbybit.manifold.manifold.operations.smoothByNormals": "išlyginti pagal normalias",
    "smoothByNormals": "išlyginti pagal normalias",
    "bitbybit.manifold.manifold.operations.smoothByNormals_description": "išlygina manifold naudodamas viršūnių normalias",
    "bitbybit.manifold.manifold.transforms.scale3D": "mastelis 3D",
    "scale3D": "mastelis 3D",
    "bitbybit.manifold.manifold.transforms.scale3D_description": "keičia manifold mastelį pagal 3D vektorių",
    "bitbybit.manifold.manifold.transforms.scale": "mastelis",
    "bitbybit.manifold.manifold.transforms.scale_description": "keičia manifold mastelį pagal vieną faktorių",
    "bitbybit.manifold.manifold.transforms.mirror": "veidrodis",
    "bitbybit.manifold.manifold.transforms.mirror_description": "atspindi manifold per plokštumą",
    "bitbybit.manifold.manifold.transforms.translate": "perkelti",
    "bitbybit.manifold.manifold.transforms.translate_description": "perkelia manifold pagal vektorių",
    "bitbybit.manifold.manifold.transforms.translateByVectors": "perkelti pagal vektorius",
    "translateByVectors": "perkelti pagal vektorius",
    "bitbybit.manifold.manifold.transforms.translateByVectors_description": "perkelia manifold pagal kelis vektorius",
    "bitbybit.manifold.manifold.transforms.translateXYZ": "perkelti xyz",
    "translateXYZ": "perkelti xyz",
    "bitbybit.manifold.manifold.transforms.translateXYZ_description": "perkelia manifold pagal x, y, z",
    "bitbybit.manifold.manifold.transforms.rotate": "pasukti",
    "bitbybit.manifold.manifold.transforms.rotate_description": "pasuka manifold pagal eulerio kampus",
    "bitbybit.manifold.manifold.transforms.rotateXYZ": "pasukti xyz",
    "rotateXYZ": "pasukti xyz",
    "bitbybit.manifold.manifold.transforms.rotateXYZ_description": "suka manifold pagal x, y, z Euler kampus",
    "bitbybit.manifold.manifold.transforms.transform": "transformuoti",
    "bitbybit.manifold.manifold.transforms.transform_description": "transformuoja manifold naudojant 4x4 matricą",
    "matrix": "matrica",
    "Base.TransformMatrix": "bazinė transformacijos matrica",
    "bitbybit.manifold.manifold.transforms.transforms": "transformacijos",
    "bitbybit.manifold.manifold.transforms.transforms_description": "transformuoja manifold naudojant kelias 4x4 matricas",
    "bitbybit.manifold.manifold.evaluate.surfaceArea": "paviršiaus plotas",
    "evaluate": "įvertinti",
    "surfaceArea": "paviršiaus plotas",
    "bitbybit.manifold.manifold.evaluate.surfaceArea_description": "gauna manifold paviršiaus plotą",
    "bitbybit.manifold.manifold.evaluate.volume": "tūris",
    "volume": "tūris",
    "bitbybit.manifold.manifold.evaluate.volume_description": "gauna manifold tūrį",
    "bitbybit.manifold.manifold.evaluate.isEmpty": "yra tuščias",
    "isEmpty": "yra tuščias",
    "bitbybit.manifold.manifold.evaluate.isEmpty_description": "patikrina, ar manifold turi trikampių",
    "bitbybit.manifold.manifold.evaluate.numVert": "viršūnių skaičius",
    "numVert": "viršūnių skaičius",
    "bitbybit.manifold.manifold.evaluate.numVert_description": "gauna viršūnių skaičių manifold",
    "bitbybit.manifold.manifold.evaluate.numTri": "trikampių skaičius",
    "numTri": "trikampių skaičius",
    "bitbybit.manifold.manifold.evaluate.numTri_description": "gauna trikampių skaičių manifold",
    "bitbybit.manifold.manifold.evaluate.numEdge": "briaunų skaičius",
    "numEdge": "briaunų skaičius",
    "bitbybit.manifold.manifold.evaluate.numEdge_description": "gauna briaunų skaičių manifold",
    "bitbybit.manifold.manifold.evaluate.numProp": "savybių skaičius",
    "numProp": "savybių skaičius",
    "bitbybit.manifold.manifold.evaluate.numProp_description": "gauna savybių skaičių manifold",
    "bitbybit.manifold.manifold.evaluate.numPropVert": "savybių viršūnių skaičius",
    "numPropVert": "savybių viršūnių skaičius",
    "bitbybit.manifold.manifold.evaluate.numPropVert_description": "gauna savybių viršūnių skaičių manifold",
    "bitbybit.manifold.manifold.evaluate.boundingBox": "ribojantis stačiakampis",
    "boundingBox": "ribojantis stačiakampis",
    "bitbybit.manifold.manifold.evaluate.boundingBox_description": "gauna manifold ašimis suderintą ribojantį stačiakampį",
    "bitbybit.manifold.manifold.evaluate.tolerance": "tolerancija",
    "bitbybit.manifold.manifold.evaluate.tolerance_description": "gauna manifold viršūnių toleranciją",
    "bitbybit.manifold.manifold.evaluate.genus": "genus",
    "genus": "genus",
    "bitbybit.manifold.manifold.evaluate.genus_description": "gauna manifold genus",
    "bitbybit.manifold.manifold.evaluate.minGap": "minimalus tarpas",
    "minGap": "minimalus tarpas",
    "bitbybit.manifold.manifold.evaluate.minGap_description": "gauna minimalų tarpą tarp dviejų manifold",
    "searchLength": "paieškos ilgis",
    "bitbybit.manifold.manifold.evaluate.originalID": "originalus id",
    "originalID": "originalus id",
    "bitbybit.manifold.manifold.evaluate.originalID_description": "gauna originalų manifold id",
    "bitbybit.manifold.crossSection.crossSectionToPolygons": "pjūvis į poligonus",
    "crossSection": "pjūvis",
    "crossSectionToPolygons": "pjūvis į poligonus",
    "bitbybit.manifold.crossSection.crossSectionToPolygons_description": "paverčia pjūvį į poligonus",
    "bitbybit.manifold.crossSection.crossSectionsToPolygons": "pjūviai į poligonus",
    "crossSectionsToPolygons": "pjūviai į poligonus",
    "bitbybit.manifold.crossSection.crossSectionsToPolygons_description": "paverčia pjūvius į poligonus",
    "crossSections": "pjūviai",
    "bitbybit.manifold.crossSection.shapes.create": "sukurti",
    "bitbybit.manifold.crossSection.shapes.create_description": "sukuria 2D pjūvį iš kontūrų",
    "Base.Vector2[][]": "bazinis vektorius 2 masyvas",
    "fillRule": "užpildymo taisyklė",
    "fillRuleEnum": "užpildymo taisyklės enum",
    "bitbybit.manifold.crossSection.shapes.square": "kvadratas",
    "bitbybit.manifold.crossSection.shapes.square_description": "sukuria 2D kvadratinį pjūvį",
    "bitbybit.manifold.crossSection.shapes.circle": "apskritimas",
    "bitbybit.manifold.crossSection.shapes.circle_description": "sukuria 2D apskritiminį pjūvį",
    "bitbybit.manifold.crossSection.shapes.rectangle": "stačiakampis",
    "bitbybit.manifold.crossSection.shapes.rectangle_description": "sukuria 2D stačiakampį pjūvį",
    "bitbybit.manifold.crossSection.operations.hull": "apvalkalas",
    "bitbybit.manifold.crossSection.operations.hull_description": "apskaičiuoja pjūvio išgaubtą apvalkalą",
    "bitbybit.manifold.crossSection.operations.extrude": "ekstruzija",
    "bitbybit.manifold.crossSection.operations.extrude_description": "ekstruzuoja pjūvį į 3D formą",
    "nDivisions": "padalijimų skaičius",
    "twistDegrees": "sukimo laipsniai",
    "scaleTopX": "viršaus mastelis x",
    "scaleTopY": "viršaus mastelis y",
    "bitbybit.manifold.crossSection.operations.revolve": "apsukti",
    "bitbybit.manifold.crossSection.operations.revolve_description": "apsuka pjūvį į 3D formą",
    "revolveDegrees": "apsukimo laipsniai",
    "matchProfile": "atitikti profilį",
    "bitbybit.manifold.crossSection.operations.offset": "poslinkis",
    "bitbybit.manifold.crossSection.operations.offset_description": "poslinkis pjūvio su delta",
    "manifoldJoinTypeEnum": "manifold sujungimo tipas enum",
    "miterLimit": "kampo ribojimas",
    "bitbybit.manifold.crossSection.operations.simplify": "supaprastinti",
    "simplify": "supaprastinti",
    "bitbybit.manifold.crossSection.operations.simplify_description": "supaprastina pjūvio kontūrus",
    "epsilon": "epsilon",
    "bitbybit.manifold.crossSection.operations.compose": "sujungti",
    "bitbybit.manifold.crossSection.operations.compose_description": "sujungia kelis pjūvius į vieną",
    "bitbybit.manifold.crossSection.operations.decompose": "išskaidyti",
    "bitbybit.manifold.crossSection.operations.decompose_description": "išskaido pjūvius į dalis",
    "bitbybit.manifold.crossSection.booleans.subtract": "atimti",
    "bitbybit.manifold.crossSection.booleans.subtract_description": "atimtis tarp dviejų pjūvių",
    "crossSection1": "pjūvis 1",
    "crossSection2": "pjūvis 2",
    "bitbybit.manifold.crossSection.booleans.add": "pridėti",
    "bitbybit.manifold.crossSection.booleans.add_description": "sudėtis tarp dviejų pjūvių",
    "bitbybit.manifold.crossSection.booleans.intersect": "sankirta",
    "bitbybit.manifold.crossSection.booleans.intersect_description": "sankirta tarp dviejų pjūvių",
    "bitbybit.manifold.crossSection.booleans.differenceTwo": "dviejų skirtumas",
    "bitbybit.manifold.crossSection.booleans.differenceTwo_description": "dviejų pjūvių skirtumas",
    "2 cross sections": "2 pjūviai",
    "bitbybit.manifold.crossSection.booleans.unionTwo": "dviejų sąjunga",
    "bitbybit.manifold.crossSection.booleans.unionTwo_description": "dviejų pjūvių sąjunga",
    "bitbybit.manifold.crossSection.booleans.intersectionTwo": "dviejų sankirta",
    "bitbybit.manifold.crossSection.booleans.intersectionTwo_description": "dviejų pjūvių sankirta",
    "bitbybit.manifold.crossSection.booleans.difference": "skirtumas",
    "bitbybit.manifold.crossSection.booleans.difference_description": "skirtumas tarp kelių pjūvių",
    "bitbybit.manifold.crossSection.booleans.union": "sąjunga",
    "bitbybit.manifold.crossSection.booleans.union_description": "sąjunga tarp kelių pjūvių",
    "bitbybit.manifold.crossSection.booleans.intersection": "sankirta",
    "bitbybit.manifold.crossSection.booleans.intersection_description": "sankirta tarp kelių pjūvių",
    "bitbybit.manifold.crossSection.transforms.scale2D": "mastelis 2D",
    "scale2D": "mastelis 2D",
    "bitbybit.manifold.crossSection.transforms.scale2D_description": "mastelio pjūvį naudojant 2D vektorių",
    "bitbybit.manifold.crossSection.transforms.scale": "mastelis",
    "bitbybit.manifold.crossSection.transforms.scale_description": "mastelio pjūvį naudojant vieną faktorių",
    "bitbybit.manifold.crossSection.transforms.mirror": "veidrodis",
    "bitbybit.manifold.crossSection.transforms.mirror_description": "atspindi pjūvį per plokštumą",
    "bitbybit.manifold.crossSection.transforms.translate": "perkelti",
    "bitbybit.manifold.crossSection.transforms.translate_description": "perkelia pjūvį pagal vektorių",
    "bitbybit.manifold.crossSection.transforms.translateXY": "perkelti xy",
    "translateXY": "perkelti xy",
    "bitbybit.manifold.crossSection.transforms.translateXY_description": "perkelia pjūvį pagal x ir y",
    "bitbybit.manifold.crossSection.transforms.rotate": "sukti",
    "bitbybit.manifold.crossSection.transforms.rotate_description": "suka pjūvį pagal laipsnius",
    "degrees": "laipsniai",
    "bitbybit.manifold.crossSection.transforms.transform": "transformuoti",
    "bitbybit.manifold.crossSection.transforms.transform_description": "transformuoja pjūvį naudojant 3x3 matricą",
    "Base.TransformMatrix3x3": "bazinė transformacijos matrica 3x3",
    "bitbybit.manifold.crossSection.evaluate.area": "plotas",
    "area": "plotas",
    "bitbybit.manifold.crossSection.evaluate.area_description": "gauna pjūvio plotą",
    "bitbybit.manifold.crossSection.evaluate.isEmpty": "yra tuščias",
    "bitbybit.manifold.crossSection.evaluate.isEmpty_description": "patikrina, ar pjūvis yra tuščias",
    "bitbybit.manifold.crossSection.evaluate.numVert": "viršūnių skaičius",
    "bitbybit.manifold.crossSection.evaluate.numVert_description": "gauna viršūnių skaičių pjūvyje",
    "bitbybit.manifold.crossSection.evaluate.numContour": "kontūrų skaičius",
    "numContour": "kontūrų skaičius",
    "bitbybit.manifold.crossSection.evaluate.numContour_description": "gauna kontūrų skaičių pjūvyje",
    "bitbybit.manifold.crossSection.evaluate.bounds": "ribos",
    "bounds": "ribos",
    "bitbybit.manifold.crossSection.evaluate.bounds_description": "gauna kontūro ribas kaip stačiakampį",
    "bitbybit.manifold.mesh.operations.merge": "sujungti",
    "merge": "sujungti",
    "bitbybit.manifold.mesh.operations.merge_description": "sujungia viršūnes, kad sukurtų manifold solidą",
    "bitbybit.manifold.mesh.evaluate.position": "pozicija",
    "bitbybit.manifold.mesh.evaluate.position_description": "gauna poziciją pagal tinklo viršūnės indeksą",
    "vertexIndex": "viršūnės indeksas",
    "bitbybit.manifold.mesh.evaluate.verts": "viršūnės",
    "verts": "viršūnės",
    "bitbybit.manifold.mesh.evaluate.verts_description": "gauna tris trikampio viršūnių indeksus",
    "triangleIndex": "trikampio indeksas",
    "bitbybit.manifold.mesh.evaluate.tangent": "tangentė",
    "tangent": "tangentė",
    "bitbybit.manifold.mesh.evaluate.tangent_description": "gauna pusės briaunos tangentės vektorių",
    "halfEdgeIndex": "pusės briaunos indeksas",
    "bitbybit.manifold.mesh.evaluate.extras": "papildomi duomenys",
    "extras": "papildomi duomenys",
    "bitbybit.manifold.mesh.evaluate.extras_description": "gauna papildomas viršūnės savybes",
    "bitbybit.manifold.mesh.evaluate.transform": "transformuoti",
    "bitbybit.manifold.mesh.evaluate.transform_description": "gauna tinklo 4x4 transformacijos matricą",
    "bitbybit.manifold.mesh.evaluate.numProp": "savybių skaičius",
    "bitbybit.manifold.mesh.evaluate.numProp_description": "gauna savybių skaičių vienai viršūnei",
    "bitbybit.manifold.mesh.evaluate.numVert": "viršūnių skaičius",
    "bitbybit.manifold.mesh.evaluate.numVert_description": "gauna savybių viršūnių skaičių",
    "bitbybit.manifold.mesh.evaluate.numTri": "trikampių skaičius",
    "bitbybit.manifold.mesh.evaluate.numTri_description": "gauna trikampių skaičių tinkle",
    "bitbybit.manifold.mesh.evaluate.numRun": "trikampių serijų skaičius",
    "numRun": "trikampių serijų skaičius",
    "bitbybit.manifold.mesh.evaluate.numRun_description": "gauna trikampių serijų skaičių",
    "bitbybit.logic.boolean": "loginė reikšmė",
    "logic": "logika",
    "bitbybit.logic.boolean_description": "sukuria loginę reikšmę",
    "bitbybit.logic.randomBooleans": "atsitiktinės loginės reikšmės",
    "randomBooleans": "atsitiktinės loginės reikšmės",
    "bitbybit.logic.randomBooleans_description": "sukuria atsitiktinių loginių reikšmių sąrašą",
    "trueThreshold": "tiesos slenkstis",
    "bitbybit.logic.twoThresholdRandomGradient": "dviejų slenksčių atsitiktinis gradientas",
    "twoThresholdRandomGradient": "dviejų slenksčių atsitiktinis gradientas",
    "bitbybit.logic.twoThresholdRandomGradient_description": "sukuria atsitiktinių loginių reikšmių sąrašą su slenksčiais",
    "numbers": "skaičiai",
    "thresholdTotalTrue": "viso tiesa slenkstis",
    "thresholdTotalFalse": "viso klaida slenkstis",
    "nrLevels": "lygių skaičius",
    "bitbybit.logic.thresholdBooleanList": "slenksčio loginės reikšmės sąrašas",
    "thresholdBooleanList": "slenksčio loginės reikšmės sąrašas",
    "bitbybit.logic.thresholdBooleanList_description": "sukuria loginių reikšmių sąrašą su slenksčiu",
    "threshold": "slenkstis",
    "bitbybit.logic.thresholdGapsBooleanList": "slenksčių tarpų loginis sąrašas",
    "thresholdGapsBooleanList": "slenksčių tarpų loginis sąrašas",
    "bitbybit.logic.thresholdGapsBooleanList_description": "sukuria loginį sąrašą su tarpų slenksčiais",
    "gapThresholds": "tarpų slenksčiai",
    "Base.Vector2[]": "bazinis vektorius 2 masyvas",
    "bitbybit.logic.not": "ne",
    "not": "ne",
    "bitbybit.logic.not_description": "taiko ne operatorių loginėms reikšmėms",
    "bitbybit.logic.notList": "ne sąrašas",
    "notList": "ne sąrašas",
    "bitbybit.logic.notList_description": "taiko ne operatorių loginio sąrašo reikšmėms",
    "bitbybit.logic.compare": "palyginti",
    "compare": "palyginti",
    "bitbybit.logic.compare_description": "palygina dvi reikšmes",
    "operator": "operatorius",
    "BooleanOperatorsEnum": "loginiai operatoriai enum",
    "bitbybit.logic.valueGate": "reikšmės vartai",
    "valueGate": "reikšmės vartai",
    "bitbybit.logic.valueGate_description": "perduoda reikšmę, jei loginė reikšmė yra tiesa",
    "bitbybit.logic.firstDefinedValueGate": "pirmųjų apibrėžtų reikšmių vartai",
    "firstDefinedValueGate": "pirmųjų apibrėžtų reikšmių vartai",
    "bitbybit.logic.firstDefinedValueGate_description": "grąžina pirmą apibrėžtą reikšmę",
    "value1": "reikšmė 1",
    "value2": "reikšmė 2",
    "bitbybit.math.number": "skaičius",
    "math": "matematika",
    "bitbybit.math.number_description": "sukuria skaičių",
    "bitbybit.math.twoNrOperation": "dviejų skaičių operacija",
    "twoNrOperation": "dviejų skaičių operacija",
    "bitbybit.math.twoNrOperation_description": "atlieka pagrindines matematines operacijas",
    "operation": "operacija",
    "mathTwoNrOperatorEnum": "dviejų skaičių operatoriai enum",
    "bitbybit.math.modulus": "modulis",
    "modulus": "modulis",
    "bitbybit.math.modulus_description": "atlieka moduliavimo operaciją",
    "bitbybit.math.roundToDecimals": "apvalinti iki dešimtainių",
    "roundToDecimals": "apvalinti iki dešimtainių",
    "bitbybit.math.roundToDecimals_description": "apvalina iki nurodyto dešimtainių skaičiaus",
    "decimalPlaces": "dešimtainės vietos",
    "bitbybit.math.oneNrOperation": "vieno skaičiaus operacija",
    "oneNrOperation": "vieno skaičiaus operacija",
    "bitbybit.math.oneNrOperation_description": "atlieka matematines operacijas su vienu skaičiumi",
    "mathOneNrOperatorEnum": "vieno skaičiaus operatoriai enum",
    "bitbybit.math.remap": "peržeminti",
    "remap": "peržeminti",
    "bitbybit.math.remap_description": "peržemina skaičių tarp nurodytų intervalų",
    "fromLow": "nuo mažo",
    "fromHigh": "nuo didelio",
    "toLow": "iki mažo",
    "toHigh": "iki didelio",
    "bitbybit.math.random": "atsitiktinis",
    "random": "atsitiktinis",
    "bitbybit.math.random_description": "sukuria atsitiktinį skaičių nuo 0 iki 1",
    "generate": "generuoti",
    "bitbybit.math.randomNumber": "atsitiktinis skaičius",
    "randomNumber": "atsitiktinis skaičius",
    "bitbybit.math.randomNumber_description": "sukuria atsitiktinį skaičių nurodytame intervale",
    "low": "mažiausias",
    "high": "didžiausias",
    "bitbybit.math.randomNumbers": "atsitiktiniai skaičiai",
    "randomNumbers": "atsitiktiniai skaičiai",
    "bitbybit.math.randomNumbers_description": "sukuria atsitiktinius skaičius nurodytame intervale",
    "bitbybit.math.pi": "pi",
    "pi": "pi",
    "bitbybit.math.pi_description": "sukuria pi reikšmę",
    "bitbybit.math.toFixed": "fiksuoti iki",
    "toFixed": "fiksuoti iki",
    "bitbybit.math.toFixed_description": "apvalina skaičių iki nurodyto dešimtainių skaičiaus",
    "bitbybit.math.add": "sudėti",
    "bitbybit.math.add_description": "sudeda du skaičius",
    "basics": "pagrindai",
    "bitbybit.math.subtract": "atimti",
    "bitbybit.math.subtract_description": "atimti du skaičius",
    "bitbybit.math.multiply": "dauginti",
    "bitbybit.math.multiply_description": "daugina du skaičius",
    "bitbybit.math.divide": "dalinti",
    "divide": "dalinti",
    "bitbybit.math.divide_description": "dalyja du skaičius",
    "bitbybit.math.power": "kelti laipsniu",
    "power": "kelti laipsniu",
    "bitbybit.math.power_description": "kelia skaičių laipsniu",
    "bitbybit.math.sqrt": "kvadratinė šaknis",
    "sqrt": "kvadratinė šaknis",
    "bitbybit.math.sqrt_description": "gauna kvadratinę šaknį",
    "bitbybit.math.abs": "absoliuti reikšmė",
    "abs": "absoliuti reikšmė",
    "bitbybit.math.abs_description": "gauna absoliučią reikšmę",
    "bitbybit.math.round": "apvalinti",
    "round": "apvalinti",
    "bitbybit.math.round_description": "apvalina skaičių",
    "bitbybit.math.floor": "apvalinti žemyn",
    "floor": "apvalinti žemyn",
    "bitbybit.math.floor_description": "apvalina skaičių žemyn",
    "bitbybit.math.ceil": "apvalinti aukštyn",
    "ceil": "apvalinti aukštyn",
    "bitbybit.math.ceil_description": "apvalina skaičių aukštyn",
    "bitbybit.math.negate": "neigti",
    "negate": "neigti",
    "bitbybit.math.negate_description": "neigia skaičių",
    "bitbybit.math.ln": "ln",
    "ln": "ln",
    "bitbybit.math.ln_description": "gauna natūralų logaritmą",
    "bitbybit.math.log10": "log10",
    "log10": "log10",
    "bitbybit.math.log10_description": "gauna logaritmą pagal pagrindą 10",
    "bitbybit.math.tenPow": "10 laipsniu",
    "tenPow": "10 laipsniu",
    "bitbybit.math.tenPow_description": "kelia 10 laipsniu",
    "bitbybit.math.sin": "sin",
    "sin": "sin",
    "bitbybit.math.sin_description": "gauna sinusą",
    "bitbybit.math.cos": "cos",
    "cos": "cos",
    "bitbybit.math.cos_description": "gauna kosinusą",
    "bitbybit.math.tan": "tan",
    "tan": "tan",
    "bitbybit.math.tan_description": "gauna tangentą",
    "bitbybit.math.asin": "asin",
    "asin": "asin",
    "bitbybit.math.asin_description": "gauna arkusinusą",
    "bitbybit.math.acos": "acos",
    "acos": "acos",
    "bitbybit.math.acos_description": "gauna arkuskosinusą",
    "bitbybit.math.atan": "atan",
    "atan": "atan",
    "bitbybit.math.atan_description": "gauna arkustangentą",
    "bitbybit.math.exp": "eksponentė",
    "exp": "eksponentė",
    "bitbybit.math.exp_description": "gauna natūralų eksponentą",
    "bitbybit.math.degToRad": "laipsniai į radianus",
    "degToRad": "laipsniai į radianus",
    "bitbybit.math.degToRad_description": "konvertuoja laipsnius į radianus",
    "bitbybit.math.radToDeg": "radianai į laipsnius",
    "radToDeg": "radianai į laipsnius",
    "bitbybit.math.radToDeg_description": "konvertuoja radianus į laipsnius",
    "bitbybit.math.ease": "sklandinti",
    "bitbybit.math.ease_description": "sklandina skaičių pagal intervalą",
    "easeEnum": "sklandinimo enum",
    "bitbybit.lists.getItem": "gauti elementą",
    "lists": "sąrašai",
    "getItem": "gauti elementą",
    "bitbybit.lists.getItem_description": "gauna elementą iš sąrašo pagal indeksą",
    "list": "sąrašas",
    "bitbybit.lists.randomGetThreshold": "atsitiktinis gavimo slenkstis",
    "randomGetThreshold": "atsitiktinis gavimo slenkstis",
    "bitbybit.lists.randomGetThreshold_description": "gauna elementus atsitiktinai pagal slenkstį",
    "bitbybit.lists.getSubList": "gauti posąrašį",
    "getSubList": "gauti posąrašį",
    "bitbybit.lists.getSubList_description": "gauna posąrašį tarp indeksų",
    "indexStart": "pradžios indeksas",
    "indexEnd": "pabaigos indeksas",
    "bitbybit.lists.getNthItem": "gauti n-tąjį elementą",
    "getNthItem": "gauti n-tąjį elementą",
    "bitbybit.lists.getNthItem_description": "gauna n-tąjį elementą sąraše",
    "nth": "n-tasis",
    "bitbybit.lists.getByPattern": "gauti pagal šabloną",
    "getByPattern": "gauti pagal šabloną",
    "bitbybit.lists.getByPattern_description": "gauna elementus pagal šabloną",
    "pattern": "šablonas",
    "bitbybit.lists.mergeElementsOfLists": "sujungti sąrašų elementus",
    "mergeElementsOfLists": "sujungti sąrašų elementus",
    "bitbybit.lists.mergeElementsOfLists_description": "sujungia sąrašų elementus pagal lygį",
    "level": "lygis",
    "bitbybit.lists.getLongestListLength": "gauti ilgiausio sąrašo ilgį",
    "getLongestListLength": "gauti ilgiausio sąrašo ilgį",
    "bitbybit.lists.getLongestListLength_description": "gauna ilgiausio sąrašo ilgį",
    "bitbybit.lists.reverse": "apversti",
    "bitbybit.lists.reverse_description": "apverčia sąrašą",
    "bitbybit.lists.flipLists": "apkeisti sąrašus",
    "flipLists": "apkeisti sąrašus",
    "bitbybit.lists.flipLists_description": "apkeičia 2D sąrašus",
    "bitbybit.lists.groupNth": "grupuoti po n",
    "groupNth": "grupuoti po n",
    "bitbybit.lists.groupNth_description": "grupuoja sąrašą po n elementų",
    "nrElements": "elementų skaičius",
    "keepRemainder": "išlaikyti likutį",
    "bitbybit.lists.getListDepth": "gauti sąrašo gylį",
    "getListDepth": "gauti sąrašo gylį",
    "bitbybit.lists.getListDepth_description": "gauna sąrašo gylį",
    "bitbybit.lists.listLength": "sąrašo ilgis",
    "listLength": "sąrašo ilgis",
    "bitbybit.lists.listLength_description": "gauna sąrašo ilgį",
    "bitbybit.lists.addItemAtIndex": "pridėti elementą pagal indeksą",
    "addItemAtIndex": "pridėti elementą pagal indeksą",
    "bitbybit.lists.addItemAtIndex_description": "prideda elementą į sąrašą pagal indeksą",
    "item": "elementas",
    "bitbybit.lists.addItemAtIndexes": "pridėti elementą pagal indeksus",
    "addItemAtIndexes": "pridėti elementą pagal indeksus",
    "bitbybit.lists.addItemAtIndexes_description": "prideda elementą į sąrašą pagal indeksus",
    "bitbybit.lists.addItemsAtIndexes": "pridėti elementus pagal indeksus",
    "addItemsAtIndexes": "pridėti elementus pagal indeksus",
    "bitbybit.lists.addItemsAtIndexes_description": "prideda elementus į sąrašą pagal indeksus",
    "items": "elementai",
    "bitbybit.lists.removeItemAtIndex": "pašalinti elementą pagal indeksą",
    "removeItemAtIndex": "pašalinti elementą pagal indeksą",
    "bitbybit.lists.removeItemAtIndex_description": "pašalina elementą iš sąrašo pagal indeksą",
    "bitbybit.lists.removeItemsAtIndexes": "pašalinti elementus pagal indeksus",
    "removeItemsAtIndexes": "pašalinti elementus pagal indeksus",
    "bitbybit.lists.removeItemsAtIndexes_description": "pašalina elementus iš sąrašo pagal indeksus",
    "bitbybit.lists.removeAllItems": "pašalinti visus elementus",
    "removeAllItems": "pašalinti visus elementus",
    "bitbybit.lists.removeAllItems_description": "pašalina visus elementus iš sąrašo",
    "bitbybit.lists.removeNthItem": "pašalinti n-tąjį elementą",
    "removeNthItem": "pašalinti n-tąjį elementą",
    "bitbybit.lists.removeNthItem_description": "pašalina n-tąjį elementą iš sąrašo",
    "bitbybit.lists.randomRemoveThreshold": "atsitiktinio pašalinimo slenkstis",
    "randomRemoveThreshold": "atsitiktinio pašalinimo slenkstis",
    "bitbybit.lists.randomRemoveThreshold_description": "atsitiktinai pašalina elementus pagal slenkstį",
    "bitbybit.lists.removeDuplicateNumbers": "pašalinti pasikartojančius skaičius",
    "removeDuplicateNumbers": "pašalinti pasikartojančius skaičius",
    "bitbybit.lists.removeDuplicateNumbers_description": "pašalina pasikartojančius skaičius iš sąrašo",
    "bitbybit.lists.removeDuplicateNumbersTolerance": "pašalinti pasikartojančius skaičius su tolerancija",
    "removeDuplicateNumbersTolerance": "pašalinti pasikartojančius skaičius su tolerancija",
    "bitbybit.lists.removeDuplicateNumbersTolerance_description": "pašalina pasikartojančius skaičius pagal toleranciją",
    "bitbybit.lists.addItem": "pridėti elementą",
    "addItem": "pridėti elementą",
    "bitbybit.lists.addItem_description": "prideda elementą į sąrašo pabaigą",
    "bitbybit.lists.prependItem": "pridėti elementą į pradžią",
    "prependItem": "pridėti elementą į pradžią",
    "bitbybit.lists.prependItem_description": "prideda elementą į sąrašo pradžią",
    "bitbybit.lists.addItemFirstLast": "pridėti elementą į pradžią arba pabaigą",
    "addItemFirstLast": "pridėti elementą į pradžią arba pabaigą",
    "bitbybit.lists.addItemFirstLast_description": "prideda elementą į sąrašo pradžią arba pabaigą",
    "firstLastEnum": "pradžia arba pabaiga",
    "bitbybit.lists.createEmptyList": "tuščias sąrašas",
    "createEmptyList": "tuščias sąrašas",
    "bitbybit.lists.createEmptyList_description": "sukuria tuščią sąrašą",
    "bitbybit.lists.repeat": "kartoti",
    "repeat": "kartoti",
    "bitbybit.lists.repeat_description": "kartoja elementą naujame sąraše",
    "times": "kartų",
    "bitbybit.lists.repeatInPattern": "kartoti pagal šabloną",
    "repeatInPattern": "kartoti pagal šabloną",
    "bitbybit.lists.repeatInPattern_description": "kartoja sąrašo elementus iki ilgio ribos",
    "lengthLimit": "ilgio riba",
    "bitbybit.lists.sortNumber": "rūšiuoti skaičius",
    "sortNumber": "rūšiuoti skaičius",
    "bitbybit.lists.sortNumber_description": "rūšiuoja skaičių sąrašą",
    "sorting": "rūšiavimas",
    "orderAsc": "didėjimo tvarka",
    "bitbybit.lists.sortTexts": "rūšiuoti tekstus",
    "sortTexts": "rūšiuoti tekstus",
    "bitbybit.lists.sortTexts_description": "rūšiuoja tekstų sąrašą abėcėlės tvarka",
    "bitbybit.lists.sortByPropValue": "rūšiuoti pagal savybės reikšmę",
    "sortByPropValue": "rūšiuoti pagal savybės reikšmę",
    "bitbybit.lists.sortByPropValue_description": "rūšiuoja pagal skaitinę JSON savybę",
    "property": "savybė",
    "bitbybit.color.hexColor": "hex spalva",
    "hexColor": "hex spalva",
    "bitbybit.color.hexColor_description": "sukuria hex spalvą",
    "bitbybit.color.hexToRgb": "hex į ržm",
    "hexToRgb": "hex į ržm",
    "bitbybit.color.hexToRgb_description": "sukuria ržm iš hex",
    "convert": "konvertuoti",
    "bitbybit.color.rgbToHex": "ržm į hex",
    "rgbToHex": "ržm į hex",
    "bitbybit.color.rgbToHex_description": "sukuria hex iš ržm",
    "r": "r",
    "g": "ž",
    "b": "m",
    "bitbybit.color.rgbObjToHex": "ržm objektas į hex",
    "rgbObjToHex": "ržm objektas į hex",
    "bitbybit.color.rgbObjToHex_description": "sukuria hex iš ržm objekto",
    "rgb": "ržm",
    "Base.ColorRGB": "bazinė spalva ržm",
    "bitbybit.color.hexToRgbMapped": "hex į ržm su žemėlapiu",
    "hexToRgbMapped": "hex į ržm su žemėlapiu",
    "bitbybit.color.hexToRgbMapped_description": "sukuria ržm iš hex su diapazono žemėlapiu",
    "bitbybit.color.getRedParam": "gauti raudonos parametrą",
    "getRedParam": "gauti raudonos parametrą",
    "bitbybit.color.getRedParam_description": "gauna raudonos parametrą",
    "hex to": "hex į",
    "bitbybit.color.getGreenParam": "gauti žalios parametrą",
    "getGreenParam": "gauti žalios parametrą",
    "bitbybit.color.getGreenParam_description": "gauna žalios parametrą",
    "bitbybit.color.getBlueParam": "gauti mėlynos parametrą",
    "getBlueParam": "gauti mėlynos parametrą",
    "bitbybit.color.getBlueParam_description": "gauna mėlynos parametrą",
    "bitbybit.color.rgbToRed": "ržm į raudoną",
    "rgbToRed": "ržm į raudoną",
    "bitbybit.color.rgbToRed_description": "gauna raudoną iš ržm",
    "rgb to": "ržm į",
    "bitbybit.color.rgbToGreen": "ržm į žalią",
    "rgbToGreen": "ržm į žalią",
    "bitbybit.color.rgbToGreen_description": "gauna žalią iš ržm",
    "bitbybit.color.rgbToBlue": "ržm į mėlyną",
    "rgbToBlue": "ržm į mėlyną",
    "bitbybit.color.rgbToBlue_description": "gauna mėlyną iš ržm",
    "bitbybit.color.invert": "invertuoti",
    "invert": "invertuoti",
    "bitbybit.color.invert_description": "invertuoja spalvą",
    "blackAndWhite": "juoda ir balta",
    "bitbybit.text.create": "sukurti",
    "bitbybit.text.create_description": "sukuria tekstą",
    "bitbybit.text.split": "padalinti",
    "bitbybit.text.split_description": "padalina tekstą pagal skyriklį",
    "separator": "skyriklis",
    "bitbybit.text.replaceAll": "pakeisti viską",
    "replaceAll": "pakeisti viską",
    "bitbybit.text.replaceAll_description": "pakeičia visas teksto pasikartojančias vietas",
    "search": "ieškoti",
    "replaceWith": "pakeisti į",
    "bitbybit.text.join": "sujungti",
    "join": "sujungti",
    "bitbybit.text.join_description": "sujungia elementus į tekstą su skyrikliu",
    "string[]": "tekstų masyvas",
    "bitbybit.text.toString": "į tekstą",
    "toString": "į tekstą",
    "bitbybit.text.toString_description": "konvertuoja elementą į tekstą",
    "bitbybit.text.toStringEach": "konvertuoti kiekvieną į tekstą",
    "toStringEach": "konvertuoti kiekvieną į tekstą",
    "bitbybit.text.toStringEach_description": "konvertuoja kiekvieną sąrašo elementą į tekstą",
    "bitbybit.text.format": "formatuoti",
    "format": "formatuoti",
    "bitbybit.text.format_description": "formatuoja tekstą su reikšmėmis",
    "values": "reikšmės",
    "bitbybit.text.vectorChar": "vektorinis simbolis",
    "vectorChar": "vektorinis simbolis",
    "bitbybit.text.vectorChar_description": "Sukuría vektorinius segmentus simboliui ir įtraukia informaciją apie plotį bei aukštį.",
    "char": "simbolis",
    "bitbybit.text.vectorText": "vektorinis tekstas",
    "vectorText": "vektorinis tekstas",
    "bitbybit.text.vectorText_description": "Sukuría vektorines teksto eilutes pateiktam tekstui ir įtraukia informaciją apie plotį bei aukštį.",
    "bitbybit.dates.toDateString": "į datos eilutę",
    "dates": "datos",
    "toDateString": "į datos eilutę",
    "bitbybit.dates.toDateString_description": "pateikia datą kaip eilutės reikšmę.",
    "date": "data",
    "Date": "data",
    "bitbybit.dates.toISOString": "į ISO eilutę",
    "toISOString": "į ISO eilutę",
    "bitbybit.dates.toISOString_description": "pateikia datą kaip eilutės reikšmę ISO formatu.",
    "bitbybit.dates.toJSON": "į JSON",
    "toJSON": "į JSON",
    "bitbybit.dates.toJSON_description": "pateikia datą kaip eilutės reikšmę JSON formatu.",
    "bitbybit.dates.toString": "į eilutę",
    "bitbybit.dates.toString_description": "pateikia datos eilutės reprezentaciją. eilutės formatas priklauso nuo lokalės.",
    "bitbybit.dates.toTimeString": "į laiko eilutę",
    "toTimeString": "į laiko eilutę",
    "bitbybit.dates.toTimeString_description": "pateikia laiką kaip eilutės reikšmę.",
    "bitbybit.dates.toUTCString": "į UTC eilutę",
    "toUTCString": "į UTC eilutę",
    "bitbybit.dates.toUTCString_description": "pateikia datą, konvertuotą į eilutę naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.now": "dabar",
    "now": "dabar",
    "bitbybit.dates.now_description": "pateikia dabartinę datą ir laiką.",
    "bitbybit.dates.createDate": "data",
    "createDate": "data",
    "bitbybit.dates.createDate_description": "sukuria naują datos objektą naudojant pateiktus datos parametrus.",
    "year": "metai",
    "month": "mėnuo",
    "day": "diena",
    "hours": "valandos",
    "minutes": "minutės",
    "seconds": "sekundės",
    "milliseconds": "milisekundės",
    "bitbybit.dates.createDateUTC": "data UTC",
    "createDateUTC": "data UTC",
    "bitbybit.dates.createDateUTC_description": "pateikia milisekundžių skaičių tarp vidurnakčio, 1970 m. sausio 1 d. universalaus koordinuotojo laiko (UTC) (arba GMT) ir nurodytos datos.",
    "bitbybit.dates.createFromUnixTimeStamp": "iš unix laiko žymos",
    "createFromUnixTimeStamp": "iš unix laiko žymos",
    "bitbybit.dates.createFromUnixTimeStamp_description": "sukuria naują datos objektą naudojant pateiktą unix laiko žymą.",
    "unixTimeStamp": "unix laiko žyma",
    "bitbybit.dates.parseDate": "analizuoti datą",
    "parseDate": "analizuoti datą",
    "bitbybit.dates.parseDate_description": "analizuoja eilutę, kurioje yra data, ir pateikia milisekundžių skaičių tarp tos datos ir vidurnakčio, 1970 m. sausio 1 d.",
    "parse": "analizuoti",
    "dateString": "datos eilutė",
    "bitbybit.dates.getDayOfMonth": "gauti mėnesio dieną",
    "getDayOfMonth": "gauti mėnesio dieną",
    "bitbybit.dates.getDayOfMonth_description": "gauna mėnesio dieną, naudojant vietinį laiką.",
    "bitbybit.dates.getWeekday": "gauti savaitės dieną",
    "getWeekday": "gauti savaitės dieną",
    "bitbybit.dates.getWeekday_description": "gauna savaitės dieną, naudojant vietinį laiką.",
    "bitbybit.dates.getYear": "gauti metus",
    "getYear": "gauti metus",
    "bitbybit.dates.getYear_description": "gauna metus, naudojant vietinį laiką.",
    "bitbybit.dates.getMonth": "gauti mėnesį",
    "getMonth": "gauti mėnesį",
    "bitbybit.dates.getMonth_description": "gauna mėnesį, naudojant vietinį laiką.",
    "bitbybit.dates.getHours": "gauti valandas",
    "getHours": "gauti valandas",
    "bitbybit.dates.getHours_description": "gauna valandas datoje, naudojant vietinį laiką.",
    "bitbybit.dates.getMinutes": "gauti minutes",
    "getMinutes": "gauti minutes",
    "bitbybit.dates.getMinutes_description": "gauna datos objekto minutes, naudojant vietinį laiką.",
    "bitbybit.dates.getSeconds": "gauti sekundes",
    "getSeconds": "gauti sekundes",
    "bitbybit.dates.getSeconds_description": "gauna datos objekto sekundes, naudojant vietinį laiką.",
    "bitbybit.dates.getMilliseconds": "gauti milisekundes",
    "getMilliseconds": "gauti milisekundes",
    "bitbybit.dates.getMilliseconds_description": "gauna datos objekto milisekundes, naudojant vietinį laiką.",
    "bitbybit.dates.getTime": "gauti laiką",
    "getTime": "gauti laiką",
    "bitbybit.dates.getTime_description": "pateikia saugomą laiko reikšmę milisekundėmis nuo vidurnakčio, 1970 m. sausio 1 d. UTC.",
    "bitbybit.dates.getUTCYear": "gauti UTC metus",
    "getUTCYear": "gauti UTC metus",
    "bitbybit.dates.getUTCYear_description": "gauna metus naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.getUTCMonth": "gauti UTC mėnesį",
    "getUTCMonth": "gauti UTC mėnesį",
    "bitbybit.dates.getUTCMonth_description": "gauna datos objekto mėnesį naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.getUTCDay": "gauti UTC dieną",
    "getUTCDay": "gauti UTC dieną",
    "bitbybit.dates.getUTCDay_description": "gauna mėnesio dieną, naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.getUTCHours": "gauti UTC valandas",
    "getUTCHours": "gauti UTC valandas",
    "bitbybit.dates.getUTCHours_description": "gauna datos objekto valandų reikšmę naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.getUTCMinutes": "gauti UTC minutes",
    "getUTCMinutes": "gauti UTC minutes",
    "bitbybit.dates.getUTCMinutes_description": "gauna datos objekto minučių reikšmę naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.getUTCSeconds": "gauti UTC sekundes",
    "getUTCSeconds": "gauti UTC sekundes",
    "bitbybit.dates.getUTCSeconds_description": "gauna datos objekto sekundžių reikšmę naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.getUTCMilliseconds": "gauti UTC milisekundes",
    "getUTCMilliseconds": "gauti UTC milisekundes",
    "bitbybit.dates.getUTCMilliseconds_description": "gauna datos objekto milisekundžių reikšmę naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.setYear": "nustatyti metus",
    "setYear": "nustatyti metus",
    "bitbybit.dates.setYear_description": "nustato datos objekto metus naudojant vietinį laiką.",
    "bitbybit.dates.setMonth": "nustatyti mėnesį",
    "setMonth": "nustatyti mėnesį",
    "bitbybit.dates.setMonth_description": "nustato mėnesio reikšmę datos objekte naudojant vietinį laiką.",
    "bitbybit.dates.setDayOfMonth": "nustatyti mėnesio dieną",
    "setDayOfMonth": "nustatyti mėnesio dieną",
    "bitbybit.dates.setDayOfMonth_description": "nustato skaitinę mėnesio dienos reikšmę datos objekte naudojant vietinį laiką.",
    "bitbybit.dates.setHours": "nustatyti valandas",
    "setHours": "nustatyti valandas",
    "bitbybit.dates.setHours_description": "nustato valandų reikšmę datos objekte naudojant vietinį laiką.",
    "bitbybit.dates.setMinutes": "nustatyti minutes",
    "setMinutes": "nustatyti minutes",
    "bitbybit.dates.setMinutes_description": "nustato minučių reikšmę datos objekte naudojant vietinį laiką.",
    "bitbybit.dates.setSeconds": "nustatyti sekundes",
    "setSeconds": "nustatyti sekundes",
    "bitbybit.dates.setSeconds_description": "nustato sekundžių reikšmę datos objekte naudojant vietinį laiką.",
    "bitbybit.dates.setMilliseconds": "nustatyti milisekundes",
    "setMilliseconds": "nustatyti milisekundes",
    "bitbybit.dates.setMilliseconds_description": "nustato milisekundžių reikšmę datos objekte naudojant vietinį laiką.",
    "bitbybit.dates.setTime": "nustatyti laiką",
    "setTime": "nustatyti laiką",
    "bitbybit.dates.setTime_description": "nustato datos ir laiko reikšmę datos objekte.",
    "time": "laikas",
    "bitbybit.dates.setUTCYear": "nustatyti UTC metus",
    "setUTCYear": "nustatyti UTC metus",
    "bitbybit.dates.setUTCYear_description": "nustato metų reikšmę datos objekte naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.setUTCMonth": "nustatyti UTC mėnesį",
    "setUTCMonth": "nustatyti UTC mėnesį",
    "bitbybit.dates.setUTCMonth_description": "nustato mėnesio reikšmę datos objekte naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.setUTCDay": "nustatyti UTC dieną",
    "setUTCDay": "nustatyti UTC dieną",
    "bitbybit.dates.setUTCDay_description": "nustato skaitinę mėnesio dienos reikšmę datos objekte naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.setUTCHours": "nustatyti UTC valandas",
    "setUTCHours": "nustatyti UTC valandas",
    "bitbybit.dates.setUTCHours_description": "nustato valandų reikšmę datos objekte naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.setUTCMinutes": "nustatyti UTC minutes",
    "setUTCMinutes": "nustatyti UTC minutes",
    "bitbybit.dates.setUTCMinutes_description": "nustato minučių reikšmę datos objekte naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.setUTCSeconds": "nustatyti UTC sekundes",
    "setUTCSeconds": "nustatyti UTC sekundes",
    "bitbybit.dates.setUTCSeconds_description": "nustato sekundžių reikšmę datos objekte naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.dates.setUTCMilliseconds": "nustatyti UTC milisekundes",
    "setUTCMilliseconds": "nustatyti UTC milisekundes",
    "bitbybit.dates.setUTCMilliseconds_description": "nustato milisekundžių reikšmę datos objekte naudojant universalųjį koordinuotąjį laiką (UTC).",
    "bitbybit.json.stringify": "konvertuoti į tekstą",
    "json": "json",
    "stringify": "konvertuoti į tekstą",
    "bitbybit.json.stringify_description": "konvertuoja įvesties reikšmę į tekstą",
    "bitbybit.json.parse": "analizuoti",
    "bitbybit.json.parse_description": "analizuoja įvesties reikšmę",
    "bitbybit.json.query": "užklausa",
    "query": "užklausa",
    "bitbybit.json.query_description": "vykdo užklausą įvesties reikšmei",
    "jsonpath": "json kelias",
    "bitbybit.json.setValueOnProp": "nustatyti reikšmę savybei",
    "setValueOnProp": "nustatyti reikšmę savybei",
    "bitbybit.json.setValueOnProp_description": "nustato reikšmę JSON savybei",
    "props": "savybės",
    "bitbybit.json.getJsonFromArrayByFirstPropMatch": "gauti JSON iš masyvo pagal pirmą savybės atitikimą",
    "getJsonFromArrayByFirstPropMatch": "gauti JSON iš masyvo pagal pirmą savybės atitikimą",
    "bitbybit.json.getJsonFromArrayByFirstPropMatch_description": "gauna JSON iš masyvo pagal pirmą savybės atitikimą",
    "jsonArray": "JSON masyvas",
    "any[]": "bet koks masyvas",
    "match": "atitikimas",
    "bitbybit.json.getValueOnProp": "gauti reikšmę savybei",
    "getValueOnProp": "gauti reikšmę savybei",
    "bitbybit.json.getValueOnProp_description": "gauna JSON savybės reikšmę",
    "bitbybit.json.setValue": "nustatyti reikšmę",
    "bitbybit.json.setValue_description": "nustato reikšmę JSON pagal kelią",
    "prop": "savybė",
    "bitbybit.json.setValuesOnPaths": "nustatyti reikšmes keliuose",
    "setValuesOnPaths": "nustatyti reikšmes keliuose",
    "bitbybit.json.setValuesOnPaths_description": "nustato kelias reikšmes JSON pagal kelius",
    "paths": "keliai",
    "bitbybit.json.paths": "keliai",
    "bitbybit.json.paths_description": "randa objektų elementų kelius",
    "bitbybit.json.createEmpty": "tuščias json",
    "bitbybit.json.createEmpty_description": "sukuria tuščią JavaScript objektą",
    "bitbybit.json.previewAndSaveJson": "peržiūrėti ir išsaugoti JSON",
    "previewAndSaveJson": "peržiūrėti ir išsaugoti JSON",
    "bitbybit.json.previewAndSaveJson_description": "peržiūri JSON ir siūlo išsaugojimo parinktį",
    "preview": "peržiūra",
    "bitbybit.json.previewJson": "peržiūrėti JSON",
    "previewJson": "peržiūrėti JSON",
    "bitbybit.json.previewJson_description": "peržiūri JSON",
    "bitbybit.verb.curve.createCurveByKnotsControlPointsWeights": "kreivė pagal mazgus, kontrolinius taškus ir svorius",
    "verb": "verb",
    "createCurveByKnotsControlPointsWeights": "kreivę pagal mazgus, kontrolinius taškus ir svorius",
    "bitbybit.verb.curve.createCurveByKnotsControlPointsWeights_description": "sukuria NURBS kreivę su mazgais, kontroliniais taškais ir svoriais",
    "degree": "laipsnis",
    "knots": "mazgai",
    "bitbybit.verb.curve.createCurveByPoints": "kreivė pagal taškus",
    "createCurveByPoints": "kreivė pagal taškus",
    "bitbybit.verb.curve.createCurveByPoints_description": "sukuria NURBS kreivę su kontroliniais taškais",
    "bitbybit.verb.curve.createBezierCurve": "Bezier kreivė",
    "createBezierCurve": "Bezier kreivė",
    "bitbybit.verb.curve.createBezierCurve_description": "sukuria Bezier NURBS kreivę su kontroliniais taškais ir svoriais",
    "bitbybit.verb.curve.clone": "kopijuoti",
    "bitbybit.verb.curve.clone_description": "kopijuoja NURBS kreivę",
    "bitbybit.verb.curve.closestParam": "artimiausias parametras",
    "closestParam": "artimiausias parametras",
    "bitbybit.verb.curve.closestParam_description": "randa artimiausią parametrą NURBS kreivėje nuo taško",
    "bitbybit.verb.curve.closestParams": "artimiausi parametrai",
    "closestParams": "artimiausi parametrai",
    "bitbybit.verb.curve.closestParams_description": "randa artimiausius parametrus NURBS kreivėje nuo taškų",
    "bitbybit.verb.curve.closestPoint": "artimiausias taškas",
    "closestPoint": "artimiausias taškas",
    "bitbybit.verb.curve.closestPoint_description": "randa artimiausią tašką NURBS kreivėje nuo taško",
    "bitbybit.verb.curve.closestPoints": "artimiausi taškai",
    "closestPoints": "artimiausi taškai",
    "bitbybit.verb.curve.closestPoints_description": "randa artimiausius taškus NURBS kreivėje nuo taškų",
    "bitbybit.verb.curve.controlPoints": "kontroliniai taškai",
    "controlPoints": "kontroliniai taškai",
    "bitbybit.verb.curve.controlPoints_description": "randa NURBS kreivės kontrolinius taškus",
    "bitbybit.verb.curve.degree": "laipsnis",
    "bitbybit.verb.curve.degree_description": "randa NURBS kreivės laipsnį",
    "bitbybit.verb.curve.derivatives": "išvestinės",
    "derivatives": "išvestinės",
    "bitbybit.verb.curve.derivatives_description": "randa NURBS kreivės išvestines pagal parametrą",
    "numDerivatives": "išvestinių skaičius",
    "parameter": "parametras",
    "bitbybit.verb.curve.divideByEqualArcLengthToParams": "padalinti pagal lygų lanko ilgį į parametrus",
    "divideByEqualArcLengthToParams": "padalinti pagal lygų lanko ilgį į parametrus",
    "bitbybit.verb.curve.divideByEqualArcLengthToParams_description": "padalina kreivę pagal lygų lanko ilgį į parametrus",
    "subdivision": "padalijimas",
    "bitbybit.verb.curve.divideByEqualArcLengthToPoints": "padalinti pagal lygų lanko ilgį į taškus",
    "divideByEqualArcLengthToPoints": "padalinti pagal lygų lanko ilgį į taškus",
    "bitbybit.verb.curve.divideByEqualArcLengthToPoints_description": "padalina kreivę pagal lygų lanko ilgį į taškus",
    "bitbybit.verb.curve.divideByArcLengthToParams": "padalinti pagal lanko ilgį į parametrus",
    "divideByArcLengthToParams": "padalinti pagal lanko ilgį į parametrus",
    "bitbybit.verb.curve.divideByArcLengthToParams_description": "padalina kreivę pagal lanko ilgį į parametrus",
    "bitbybit.verb.curve.divideByArcLengthToPoints": "padalinti pagal lanko ilgį į taškus",
    "divideByArcLengthToPoints": "padalinti pagal lanko ilgį į taškus",
    "bitbybit.verb.curve.divideByArcLengthToPoints_description": "padalina kreivę pagal lanko ilgį į taškus",
    "bitbybit.verb.curve.divideCurvesByEqualArcLengthToPoints": "padalinti kreives pagal lygų lanko ilgį į taškus",
    "divideCurvesByEqualArcLengthToPoints": "padalinti kreives pagal lygų lanko ilgį į taškus",
    "bitbybit.verb.curve.divideCurvesByEqualArcLengthToPoints_description": "padalina kelias kreives pagal lygų lanko ilgį į taškus",
    "bitbybit.verb.curve.divideCurvesByArcLengthToPoints": "padalinti kreives pagal lanko ilgį į taškus",
    "divideCurvesByArcLengthToPoints": "padalinti kreives pagal lanko ilgį į taškus",
    "bitbybit.verb.curve.divideCurvesByArcLengthToPoints_description": "padalina kelias kreives pagal lanko ilgį į taškus",
    "bitbybit.verb.curve.domain": "domenas",
    "bitbybit.verb.curve.domain_description": "randa kreivės parametrų intervalo domeną",
    "bitbybit.verb.curve.startPoint": "pradžios taškas",
    "bitbybit.verb.curve.startPoint_description": "kreivės pradžios taškas",
    "bitbybit.verb.curve.endPoint": "pabaigos taškas",
    "bitbybit.verb.curve.endPoint_description": "kreivės pabaigos taškas",
    "bitbybit.verb.curve.startPoints": "pradžios taškai",
    "bitbybit.verb.curve.startPoints_description": "kreivių pradžios taškai",
    "bitbybit.verb.curve.endPoints": "pabaigos taškai",
    "bitbybit.verb.curve.endPoints_description": "kreivių pabaigos taškai",
    "bitbybit.verb.curve.knots": "mazgai",
    "bitbybit.verb.curve.knots_description": "randa NURBS kreivės mazgus",
    "bitbybit.verb.curve.lengthAtParam": "ilgis pagal parametrą",
    "lengthAtParam": "ilgis pagal parametrą",
    "bitbybit.verb.curve.lengthAtParam_description": "gauna NURBS kreivės ilgį pagal parametrą",
    "bitbybit.verb.curve.length": "ilgis",
    "bitbybit.verb.curve.length_description": "gauna NURBS kreivės ilgį",
    "bitbybit.verb.curve.paramAtLength": "parametras pagal ilgį",
    "paramAtLength": "parametras pagal ilgį",
    "bitbybit.verb.curve.paramAtLength_description": "gauna parametrą pagal ilgį NURBS kreivėje",
    "bitbybit.verb.curve.pointAtParam": "taškas pagal parametrą",
    "pointAtParam": "taškas pagal parametrą",
    "bitbybit.verb.curve.pointAtParam_description": "gauna tašką pagal parametrą NURBS kreivėje",
    "bitbybit.verb.curve.pointsAtParam": "taškai pagal parametrą",
    "pointsAtParam": "taškai pagal parametrą",
    "bitbybit.verb.curve.pointsAtParam_description": "gauna taškus pagal parametrą NURBS kreivėse",
    "bitbybit.verb.curve.reverse": "apversti",
    "bitbybit.verb.curve.reverse_description": "apverčia NURBS kreivę",
    "bitbybit.verb.curve.split": "padalinti",
    "bitbybit.verb.curve.split_description": "padalina NURBS kreivę pagal parametrą",
    "bitbybit.verb.curve.tangent": "lietė",
    "bitbybit.verb.curve.tangent_description": "NURBS kreivės lietė pagal parametrą",
    "bitbybit.verb.curve.tessellate": "tinkluoti",
    "tessellate": "tinkluoti",
    "bitbybit.verb.curve.tessellate_description": "tinkluoja NURBS kreivę į taškus",
    "bitbybit.verb.curve.transform": "transformuoti",
    "bitbybit.verb.curve.transform_description": "transformuoja NURBS kreivę",
    "bitbybit.verb.curve.transformCurves": "transformuoti kreives",
    "transformCurves": "transformuoti kreives",
    "bitbybit.verb.curve.transformCurves_description": "transformuoja NURBS kreives",
    "bitbybit.verb.curve.weights": "svoriai",
    "bitbybit.verb.curve.weights_description": "NURBS kreivės svoriai",
    "bitbybit.verb.curve.circle.createCircle": "apskritimas",
    "createCircle": "apskritimas",
    "bitbybit.verb.curve.circle.createCircle_description": "sukuria apskritimo NURBS kreivę",
    "xAxis": "x ašis",
    "yAxis": "y ašis",
    "bitbybit.verb.curve.circle.createArc": "lankas",
    "createArc": "lankas",
    "bitbybit.verb.curve.circle.createArc_description": "sukuria lanko NURBS kreivę",
    "minAngle": "minimalus kampas",
    "maxAngle": "maksimalus kampas",
    "bitbybit.verb.curve.circle.center": "centras",
    "bitbybit.verb.curve.circle.center_description": "gauna apskritimo ar lanko centrą",
    "bitbybit.verb.curve.circle.radius": "spindulys",
    "bitbybit.verb.curve.circle.radius_description": "gauna apskritimo ar lanko spindulį",
    "bitbybit.verb.curve.circle.maxAngle": "maksimalus kampas",
    "bitbybit.verb.curve.circle.maxAngle_description": "gauna lanko maksimalų kampą laipsniais",
    "bitbybit.verb.curve.circle.minAngle": "minimalus kampas",
    "bitbybit.verb.curve.circle.minAngle_description": "gauna lanko minimalų kampą laipsniais",
    "bitbybit.verb.curve.circle.xAxis": "x ašis",
    "bitbybit.verb.curve.circle.xAxis_description": "gauna lanko x kampą",
    "bitbybit.verb.curve.circle.yAxis": "y ašis",
    "bitbybit.verb.curve.circle.yAxis_description": "gauna lanko y kampą",
    "bitbybit.verb.curve.ellipse.createEllipse": "elipsė",
    "createEllipse": "elipsė",
    "bitbybit.verb.curve.ellipse.createEllipse_description": "sukuria elipsės nurbs kreivę",
    "bitbybit.verb.curve.ellipse.createArc": "lankas",
    "bitbybit.verb.curve.ellipse.createArc_description": "sukuria elipsės lanko nurbs kreivę",
    "bitbybit.verb.curve.ellipse.center": "centras",
    "bitbybit.verb.curve.ellipse.center_description": "gauna elipsės arba lanko centrą",
    "bitbybit.verb.curve.ellipse.maxAngle": "maksimalus kampas",
    "bitbybit.verb.curve.ellipse.maxAngle_description": "gauna lanko maksimalų kampą laipsniais",
    "bitbybit.verb.curve.ellipse.minAngle": "minimalus kampas",
    "bitbybit.verb.curve.ellipse.minAngle_description": "gauna lanko minimalų kampą laipsniais",
    "bitbybit.verb.curve.ellipse.xAxis": "x ašis",
    "bitbybit.verb.curve.ellipse.xAxis_description": "gauna elipsės arba lanko x kampą",
    "bitbybit.verb.curve.ellipse.yAxis": "y ašis",
    "bitbybit.verb.curve.ellipse.yAxis_description": "gauna elipsės arba lanko y kampą",
    "bitbybit.verb.surface.boundaries": "ribos",
    "boundaries": "ribos",
    "bitbybit.verb.surface.boundaries_description": "gauna paviršiaus ribines nurbs kreives",
    "bitbybit.verb.surface.createSurfaceByCorners": "paviršius pagal kampus",
    "createSurfaceByCorners": "paviršius pagal kampus",
    "bitbybit.verb.surface.createSurfaceByCorners_description": "sukuria paviršių su 4 kampiniais taškais",
    "point3": "taškas 3",
    "point4": "taškas 4",
    "bitbybit.verb.surface.createSurfaceByKnotsControlPointsWeights": "paviršių pagal mazgus, kontrolinius taškus ir svorius",
    "createSurfaceByKnotsControlPointsWeights": "paviršių pagal mazgus, kontrolinius taškus ir svorius",
    "bitbybit.verb.surface.createSurfaceByKnotsControlPointsWeights_description": "sukuria nurbs paviršių su uv mazgais, laipsniais, taškais ir svoriais",
    "degreeU": "laipsnis u",
    "degreeV": "laipsnis v",
    "knotsU": "mazgai u",
    "knotsV": "mazgai v",
    "bitbybit.verb.surface.createSurfaceByLoftingCurves": "paviršius iš kreivių",
    "createSurfaceByLoftingCurves": "paviršius iš kreivių",
    "bitbybit.verb.surface.createSurfaceByLoftingCurves_description": "sukuria nurbs paviršių iš kreivių",
    "bitbybit.verb.surface.clone": "klonuoti",
    "bitbybit.verb.surface.clone_description": "klonuoja nurbs paviršių",
    "bitbybit.verb.surface.closestParam": "artimiausias parametras",
    "bitbybit.verb.surface.closestParam_description": "randa artimiausią parametrą paviršiuje nuo taško",
    "bitbybit.verb.surface.closestPoint": "artimiausias taškas",
    "bitbybit.verb.surface.closestPoint_description": "randa artimiausią tašką paviršiuje nuo taško",
    "bitbybit.verb.surface.controlPoints": "kontroliniai taškai",
    "bitbybit.verb.surface.controlPoints_description": "gauna kontrolinius taškus paviršiuje",
    "bitbybit.verb.surface.degreeU": "laipsnis u",
    "bitbybit.verb.surface.degreeU_description": "gauna paviršiaus u laipsnį",
    "bitbybit.verb.surface.degreeV": "laipsnis v",
    "bitbybit.verb.surface.degreeV_description": "gauna paviršiaus v laipsnį",
    "bitbybit.verb.surface.derivatives": "išvestinės",
    "bitbybit.verb.surface.derivatives_description": "gauna paviršiaus išvestines ties uv",
    "u": "u",
    "v": "v",
    "bitbybit.verb.surface.domainU": "domenas u",
    "domainU": "domenas u",
    "bitbybit.verb.surface.domainU_description": "gauna paviršiaus u domeną",
    "bitbybit.verb.surface.domainV": "domenas v",
    "domainV": "domenas v",
    "bitbybit.verb.surface.domainV_description": "gauna paviršiaus v domeną",
    "bitbybit.verb.surface.isocurve": "izokreivė",
    "isocurve": "izokreivė",
    "bitbybit.verb.surface.isocurve_description": "gauna nurbs izokreivę paviršiuje",
    "useV": "naudoti v",
    "bitbybit.verb.surface.isocurvesSubdivision": "izokreivių padalijimas",
    "isocurvesSubdivision": "izokreivių padalijimas",
    "bitbybit.verb.surface.isocurvesSubdivision_description": "padalija paviršių į izokreives",
    "isocurveSegments": "izokreivių segmentai",
    "bitbybit.verb.surface.isocurvesAtParams": "izokreivės ties parametrais",
    "isocurvesAtParams": "izokreivės ties parametrais",
    "bitbybit.verb.surface.isocurvesAtParams_description": "padalija paviršių į izokreives ties parametrais",
    "parameters": "parametrai",
    "bitbybit.verb.surface.knotsU": "mazgai u",
    "bitbybit.verb.surface.knotsU_description": "gauna paviršiaus u mazgus",
    "bitbybit.verb.surface.knotsV": "mazgai v",
    "bitbybit.verb.surface.knotsV_description": "gauna paviršiaus v mazgus",
    "bitbybit.verb.surface.normal": "normali",
    "bitbybit.verb.surface.normal_description": "gauna normalią paviršiaus ties uv",
    "bitbybit.verb.surface.point": "taškas",
    "bitbybit.verb.surface.point_description": "gauna tašką paviršiuje ties uv",
    "bitbybit.verb.surface.reverse": "apversti",
    "bitbybit.verb.surface.reverse_description": "apverčia nurbs paviršiaus uv ir izokreives",
    "bitbybit.verb.surface.split": "padalinti",
    "bitbybit.verb.surface.split_description": "padalija nurbs paviršių į dvi dalis",
    "bitbybit.verb.surface.transformSurface": "transformuoti paviršių",
    "transformSurface": "transformuoti paviršių",
    "bitbybit.verb.surface.transformSurface_description": "transformuoja nurbs paviršių su transformacijomis",
    "bitbybit.verb.surface.weights": "svoriai",
    "bitbybit.verb.surface.weights_description": "gauna paviršiaus svorius",
    "bitbybit.verb.surface.cone.create": "sukurti",
    "cone": "kūgis",
    "bitbybit.verb.surface.cone.create_description": "sukuria kūginį nurbs paviršių",
    "bitbybit.verb.surface.cone.axis": "ašis",
    "bitbybit.verb.surface.cone.axis_description": "gauna kūgio ašį",
    "bitbybit.verb.surface.cone.base": "pagrindas",
    "bitbybit.verb.surface.cone.base_description": "gauna kūgio pagrindą",
    "bitbybit.verb.surface.cone.height": "aukštis",
    "bitbybit.verb.surface.cone.height_description": "gauna kūgio aukštį",
    "bitbybit.verb.surface.cone.radius": "spindulys",
    "bitbybit.verb.surface.cone.radius_description": "gauna kūgio spindulį",
    "bitbybit.verb.surface.cone.xAxis": "x ašis",
    "bitbybit.verb.surface.cone.xAxis_description": "gauna kūgio x ašį",
    "bitbybit.verb.surface.cylinder.create": "sukurti",
    "bitbybit.verb.surface.cylinder.create_description": "sukuria cilindrinį nurbs paviršių",
    "bitbybit.verb.surface.cylinder.axis": "ašis",
    "bitbybit.verb.surface.cylinder.axis_description": "gauna cilindro ašį",
    "bitbybit.verb.surface.cylinder.base": "pagrindas",
    "bitbybit.verb.surface.cylinder.base_description": "gauna cilindro pagrindą",
    "bitbybit.verb.surface.cylinder.height": "aukštis",
    "bitbybit.verb.surface.cylinder.height_description": "gauna cilindro aukštį",
    "bitbybit.verb.surface.cylinder.radius": "spindulys",
    "bitbybit.verb.surface.cylinder.radius_description": "gauna cilindro spindulį",
    "bitbybit.verb.surface.cylinder.xAxis": "x ašis",
    "bitbybit.verb.surface.cylinder.xAxis_description": "gauna cilindro x ašį",
    "bitbybit.verb.surface.extrusion.create": "sukurti",
    "extrusion": "ekstruzija",
    "bitbybit.verb.surface.extrusion.create_description": "sukuria nurbs paviršiaus ekstruziją iš kreivės",
    "profile": "profilis",
    "bitbybit.verb.surface.extrusion.direction": "kryptis",
    "bitbybit.verb.surface.extrusion.direction_description": "gauna ekstruzijos krypties vektorių",
    "bitbybit.verb.surface.extrusion.profile": "profilis",
    "bitbybit.verb.surface.extrusion.profile_description": "gauna ekstruzijos profilio nurbs kreivę",
    "bitbybit.verb.surface.sphere.create": "sukurti",
    "bitbybit.verb.surface.sphere.create_description": "sukuria sferinį nurbs paviršių",
    "bitbybit.verb.surface.sphere.radius": "spindulys",
    "bitbybit.verb.surface.sphere.radius_description": "gauna sferinio nurbs paviršiaus spindulį",
    "bitbybit.verb.surface.sphere.center": "centras",
    "bitbybit.verb.surface.sphere.center_description": "gauna sferinio nurbs paviršiaus centrą",
    "bitbybit.verb.surface.revolved.create": "sukurti",
    "revolved": "apsuktas",
    "bitbybit.verb.surface.revolved.create_description": "sukuria apsuktą nurbs paviršių",
    "bitbybit.verb.surface.revolved.profile": "profilis",
    "bitbybit.verb.surface.revolved.profile_description": "gauna apsukto paviršiaus profilio nurbs kreivę",
    "revolution": "revoliucija",
    "bitbybit.verb.surface.revolved.center": "centras",
    "bitbybit.verb.surface.revolved.center_description": "gauna apsukto paviršiaus centro nurbs kreivę",
    "bitbybit.verb.surface.revolved.axis": "ašis",
    "bitbybit.verb.surface.revolved.axis_description": "gauna apsukto paviršiaus sukimosi ašį",
    "bitbybit.verb.surface.revolved.angle": "kampas",
    "bitbybit.verb.surface.revolved.angle_description": "gauna apsukto paviršiaus sukimosi kampą",
    "bitbybit.verb.surface.sweep.create": "sukurti",
    "sweep": "šlavimas",
    "bitbybit.verb.surface.sweep.create_description": "sukuria šlavimo nurbs paviršių",
    "rail": "bėgis",
    "bitbybit.verb.surface.sweep.profile": "profilis",
    "bitbybit.verb.surface.sweep.profile_description": "gauna šlavimo paviršiaus profilio nurbs kreivę",
    "bitbybit.verb.surface.sweep.rail": "bėgis",
    "bitbybit.verb.surface.sweep.rail_description": "gauna šlavimo paviršiaus bėgio nurbs kreivę",
    "bitbybit.verb.intersect.curves": "kreivės",
    "bitbybit.verb.intersect.curves_description": "sankirta tarp dviejų verb nurbs kreivių",
    "firstCurve": "pirma kreivė",
    "secondCurve": "antra kreivė",
    "bitbybit.verb.intersect.curveAndSurface": "kreivė ir paviršius",
    "curveAndSurface": "kreivė ir paviršius",
    "bitbybit.verb.intersect.curveAndSurface_description": "sankirta tarp kreivės ir paviršiaus",
    "bitbybit.verb.intersect.surfaces": "paviršiai",
    "bitbybit.verb.intersect.surfaces_description": "sankirta tarp dviejų paviršių",
    "firstSurface": "pirmas paviršius",
    "secondSurface": "antras paviršius",
    "bitbybit.verb.intersect.curveCurveFirstParams": "kreivė kreivė pirmi parametrai",
    "curveCurveFirstParams": "kreivė kreivė pirmi parametrai",
    "bitbybit.verb.intersect.curveCurveFirstParams_description": "gauna sankirtos parametrus pirmoje kreivėje",
    "intersections": "sankirtos",
    "BaseTypes.CurveCurveIntersection[]": "bazinių tipų kreivė kreivė sankirtos masyvas",
    "bitbybit.verb.intersect.curveCurveSecondParams": "kreivė kreivė antri parametrai",
    "curveCurveSecondParams": "kreivė kreivė antri parametrai",
    "bitbybit.verb.intersect.curveCurveSecondParams_description": "gauna sankirtos parametrus antroje kreivėje",
    "bitbybit.verb.intersect.curveCurveFirstPoints": "kreivė kreivė pirmi taškai",
    "curveCurveFirstPoints": "kreivė kreivė pirmi taškai",
    "bitbybit.verb.intersect.curveCurveFirstPoints_description": "gauna sankirtos taškus pirmoje kreivėje",
    "bitbybit.verb.intersect.curveCurveSecondPoints": "kreivė kreivė antri taškai",
    "curveCurveSecondPoints": "kreivė kreivė antri taškai",
    "bitbybit.verb.intersect.curveCurveSecondPoints_description": "gauna sankirtos taškus antroje kreivėje",
    "bitbybit.verb.intersect.curveSurfaceCurveParams": "kreivė paviršius kreivės parametrai",
    "curveSurfaceCurveParams": "kreivė paviršius kreivės parametrai",
    "bitbybit.verb.intersect.curveSurfaceCurveParams_description": "gauna sankirtos parametrus kreivėje",
    "BaseTypes.CurveSurfaceIntersection[]": "bazinių tipų kreivė paviršius sankirtos masyvas",
    "bitbybit.verb.intersect.curveSurfaceSurfaceParams": "kreivė paviršius paviršiaus parametrai",
    "curveSurfaceSurfaceParams": "kreivė paviršius paviršiaus parametrai",
    "bitbybit.verb.intersect.curveSurfaceSurfaceParams_description": "gauna sankirtos parametrus paviršiuje",
    "bitbybit.verb.intersect.curveSurfaceCurvePoints": "kreivė paviršius kreivės taškai",
    "curveSurfaceCurvePoints": "kreivė paviršius kreivės taškai",
    "bitbybit.verb.intersect.curveSurfaceCurvePoints_description": "gauna sankirtos taškus kreivėje",
    "bitbybit.verb.intersect.curveSurfaceSurfacePoints": "kreivė paviršius paviršiaus taškai",
    "curveSurfaceSurfacePoints": "kreivė paviršius paviršiaus taškai",
    "bitbybit.verb.intersect.curveSurfaceSurfacePoints_description": "gauna sankirtos taškus paviršiuje",
    "bitbybit.tag.create": "sukurti",
    "tag": "žyma",
    "bitbybit.tag.create_description": "sukuria žymos dto",
    "adaptDepth": "prisitaikymo gylis",
    "needsUpdate": "reikia atnaujinti",
    "bitbybit.time.registerRenderFunction": "registruoti atvaizdavimo funkciją",
    "registerRenderFunction": "registruoti atvaizdavimo funkciją",
    "bitbybit.time.registerRenderFunction_description": "registruoja funkciją atvaizdavimo ciklui",
    "bitbybit.asset.getFile": "gauti failą",
    "asset": "turtas",
    "getFile": "gauti failą",
    "bitbybit.asset.getFile_description": "gauna turto failą",
    "bitbybit.asset.getLocalFile": "gauti vietinį failą",
    "getLocalFile": "gauti vietinį failą",
    "bitbybit.asset.getLocalFile_description": "gauna vietinį failą iš naršyklės",
    "bitbybit.asset.fetchBlob": "gauti blob",
    "fetchBlob": "gauti blob",
    "bitbybit.asset.fetchBlob_description": "gauna blob iš CORS URL",
    "fetch": "gauti",
    "bitbybit.asset.fetchFile": "gauti failą",
    "fetchFile": "gauti failą",
    "bitbybit.asset.fetchFile_description": "gauna failą iš CORS URL",
    "bitbybit.asset.fetchJSON": "gauti json",
    "fetchJSON": "gauti json",
    "bitbybit.asset.fetchJSON_description": "gauna json iš CORS URL",
    "bitbybit.asset.fetchText": "gauti tekstą",
    "fetchText": "gauti tekstą",
    "bitbybit.asset.fetchText_description": "gauna tekstą iš CORS URL",
    "bitbybit.asset.createObjectURL": "objekto URL",
    "createObjectURL": "objekto URL",
    "bitbybit.asset.createObjectURL_description": "sukuria URL failui atmintyje",
    "file": "failas",
    "File | Blob": "failas arba blob",
    "bitbybit.asset.createObjectURLs": "objektų URL",
    "createObjectURLs": "objektų URL",
    "bitbybit.asset.createObjectURLs_description": "sukuria URL failams atmintyje",
    "files": "failai",
    "(File | Blob)[]": "failų arba blob masyvas",
    "exec": "vykdyti",
    "Visible": "Matomas",
    "Hidden": "Paslėptas",
    "flatten": "išlyginti",
    "force exec": "priverstinis vykdymas",
    "console log": "konsolės žurnalas",
    "preview data": "peržiūrėti duomenis",
    "flow": "srautas",
    "code": "kodas",
    "runner": "vykdytojas",
    "counters": "skaitikliai",
    "actions": "veiksmai",
    "loops": "ciklai",
    "interval": "intervalas",
    "delay": "vėlavimas",
    "expire": "pasibaigti",
    "timeout": "laiko limitas",
    "counter min max": "skaitiklio min max",
    "counter steps": "skaitiklio žingsniai",
    "reset": "atstatyti",
    "trigger": "paleisti",
    "mouse": "pelė",
    "mouse click": "pelės paspaudimas",
    "key": "klavišas",
    "pointer": "rodyklė",
    "pick info": "pasirinkimo informacija",
    "down": "žemyn",
    "wheel": "ratukas",
    "tap": "bakstelėti",
    "double tap": "dvigubas bakstelėjimas",
    "render": "atvaizduoti",
    "passed ms": "praėjo ms",
    "babylon observable listener": "babylon stebėtojo klausytojas",
    "object": "objektas",
    "observable selector": "stebėtojo selektorius",
    "get event data": "gauti įvykio duomenis",
    "exec click": "vykdyti paspaudimą",
    "exec down": "vykdyti žemyn",
    "toggle": "perjungti",
    "flip flop": "perjungiklis",
    "boolean gate": "loginiai vartai",
    "boolean gate silent": "loginiai vartai tyliai",
    "is undefined": "nėra apibrėžta",
    "for loop": "for ciklas",
    "last": "paskutinis",
    "for each loop": "for each ciklas",
    "element": "elementas",
    "body": "kūnas",
    "complete": "užbaigti",
    "editors": "redaktoriai",
    "inputs": "įvestys",
    "outputs": "išvestys",
    "recent": "naujausi",
    "Clear": "Išvalyti",
    "Run": "Vykdyti",
    "Swap Canvas": "Pakeisti drobę",
    "Local Assets": "Vietiniai ištekliai",
    "Import": "Importuoti",
    "Export": "Eksportuoti",
    "Copy to Clipboard": "Kopijuoti į iškarpinę",
    "Paste from Clipboard": "Įklijuoti iš iškarpinės",
    "Export to runner": "Eksportuoti į vykdytoją",
    "Clean Cache": "Išvalyti talpyklą",
    "Community": "Bendruomenė",
    "Sponsors and Partners": "Rėmėjai ir partneriai",
    "API Documentation": "API dokumentacija",
    "About": "Apie",
    "Toolbox": "Įrankių dėžė",
    "More": "Daugiau",
    "bitbybit.code.typeScriptEditor": "typescript redaktorius",
    "bitbybit.code.typeScriptEditor_description": "Leidžia rašyti TypeScript kodą su pilnu bitbybit intellisense vienoje funkcijoje. Ką grąžina start funkcija, tai bus matoma kaip komponento išvestis.",
    "bitbybit.code.javaScriptEditor": "javascript redaktorius",
    "bitbybit.code.javaScriptEditor_description": "Leidžia rašyti JavaScript kodą vienoje funkcijoje. Ką grąžina start funkcija, tai bus matoma kaip komponento išvestis.",
    "bitbybit.code.jsonEditor": "json redaktorius",
    "bitbybit.code.jsonEditor_description": "Leidžia rašyti JSON kodą. Ką grąžina start funkcija, tai bus matoma kaip komponento išvestis.",
    "bitbybit.flow.actions.keyboard": "klaviatūra",
    "bitbybit.flow.actions.keyboard_description": "Bus vykdoma klaviatūros įvykių metu paspaudus mygtukus.",
    "bitbybit.flow.actions.mouseClick": "pelės paspaudimas",
    "bitbybit.flow.actions.mouseClick_description": "Bus vykdoma pelės įvykių metu paspaudus mygtukus.",
    "bitbybit.flow.actions.start": "pradėti",
    "bitbybit.flow.actions.start_description": "Pradeda valdymo srautą ir sukelia vykdymus.",
    "bitbybit.flow.actions.trigger": "paleisti",
    "bitbybit.flow.actions.trigger_description": "Paleidžia vykdymą paspaudus mygtuką.",
    "bitbybit.flow.babylon.gui.button": "mygtukas",
    "bitbybit.flow.babylon.gui.button_description": "Bus vykdoma įvairių rodyklės įvykių metu paspaudus kairįjį pelės mygtuką ant babylonjs drobės.",
    "bitbybit.flow.babylon.scene.pointerEvents": "rodyklė",
    "bitbybit.flow.babylon.scene.pointerEvents_description": "Bus vykdoma įvairių rodyklės įvykių metu paspaudus kairįjį pelės mygtuką ant babylonjs drobės.",
    "bitbybit.flow.babylon.getEventDataFromObservedResult": "gauti įvykio duomenis",
    "bitbybit.flow.babylon.getEventDataFromObservedResult_description": "Gauti įvykio duomenis iš stebėtojo klausytojo rezultato.",
    "bitbybit.flow.babylon.observableListener": "babylon stebėtojo klausytojas",
    "bitbybit.flow.babylon.observableListener_description": "Prenumeruos ir klausys bet kurio babylonjs stebėtojo.",
    "bitbybit.flow.babylon.render": "atvaizduoti",
    "bitbybit.flow.babylon.render_description": "Vykdoma kiekviename babylonjs atvaizdavimo kadre.",
    "bitbybit.flow.counters.counterMinMax": "skaitiklio min max",
    "bitbybit.flow.counters.counterMinMax_description": "Skaičiuoja vykdymų skaičių tarp minimalių ir maksimalių reikšmių. Pasiekus maksimumą, skaitiklis atstatomas.",
    "bitbybit.flow.counters.counterSteps": "skaitiklio žingsniai",
    "bitbybit.flow.counters.counterSteps_description": "Skaičiuoja vykdymų skaičių, pradedant nuo nurodytos reikšmės ir didinant kiekvieną vykdymą pagal nurodytą žingsnį, kol žingsniai baigiasi. Pasiekus pabaigą, skaitiklis atstatomas.",
    "bitbybit.flow.counters.counter": "skaitiklis",
    "bitbybit.flow.counters.counter_description": "Skaičiuoja vykdymų skaičių.",
    "bitbybit.flow.logic.booleanGateSilent": "loginiai vartai tyliai",
    "bitbybit.flow.logic.booleanGateSilent_description": "Sukelia skirtingus vykdymo įvykius pagal pateiktą loginę reikšmę, tačiau vykdo tik tada, kai loginė reikšmė pasikeičia, taip išvengiant daugybės įvykių paleidimo be pokyčių.",
    "bitbybit.flow.logic.booleanGate": "loginiai vartai",
    "bitbybit.flow.logic.booleanGate_description": "Sukelia skirtingus vykdymo įvykius pagal pateiktą loginę reikšmę.",
    "bitbybit.flow.logic.flipFlop": "perjungiklis",
    "bitbybit.flow.logic.flipFlop_description": "Kiekvieną kartą įvykus įvykiui, bus paleistas kitas įvykis, iš esmės sukuriant perjungimo funkcionalumą.",
    "bitbybit.flow.logic.isUndefined": "nėra apibrėžta",
    "bitbybit.flow.logic.isUndefined_description": "Patikrina, ar pateikta reikšmė nėra apibrėžta, ir sukelia true arba false įvykį.",
    "bitbybit.flow.loops.forEach": "for each ciklas",
    "bitbybit.flow.loops.forEach_description": "For each ciklas, kuris pereina per visus sąrašo elementus.",
    "bitbybit.flow.loops.for": "for ciklas",
    "bitbybit.flow.loops.for_description": "For ciklas, kuris vykdo kūną tarp dviejų reikšmių.",
    "bitbybit.flow.time.delay": "vėlavimas",
    "bitbybit.flow.time.delay_description": "Vėluoja vykdymą nurodytu laiko limitu ms.",
    "bitbybit.flow.time.interval": "intervalas",
    "bitbybit.flow.time.interval_description": "Vykdo srautą kas nurodytą intervalą ms.",
    "bitbybit.lists.createList": "sąrašas",
    "bitbybit.lists.createList_description": "Sukuria sąrašą iš pateiktų elementų.",
    "bitbybit.lists.flatten": "išlyginti",
    "bitbybit.lists.flatten_description": "Išlygina sąrašų sąrašą į vieną sąrašą.",
    "bitbybit.lists.passThrough": "perduoti",
    "bitbybit.lists.passThrough_description": "Paverčia reikšmę į 'any' tipą ir perduoda įvestį į išvestį be jokių pakeitimų.",
    "bitbybit.math.numberSlider": "skaičiaus slankiklis",
    "bitbybit.math.numberSlider_description": "Sukuria skaičių su slankikliu. Galite nustatyti min, max ir žingsnio reikšmes.",
    "bitbybit.consoleLog": "konsolės žurnalas",
    "bitbybit.consoleLog_description": "Registruoja įvestį naršyklės konsolėje.",
    "bitbybit.previewData": "peržiūrėti duomenis",
    "bitbybit.previewData_description": "Rodo įvesties duomenis peržiūros srityje. Tai gali būti tekstas, skaičiai, json objektai, masyvai ir kt. Cikliniai Javascript objektai neleidžiami.",
    "bitbybit.runner.getRunnerInputValue": "gauti vykdytojo įvesties reikšmę",
    "bitbybit.runner.getRunnerInputValue_description": "Gauti vykdytojo įvesties reikšmę iš JSON įvesčių. Šis komponentas redaktoriaus kontekste visada grąžins neapibrėžtą reikšmę.",
    "bitbybit.runner.getRunnerInputs": "gauti vykdytojo įvestis",
    "bitbybit.runner.getRunnerInputs_description": "Gauti vykdytojo įvestis JSON formatu. Šis komponentas redaktoriaus kontekste visada grąžins tuščią objektą.",
    "bitbybit.runner.run": "vykdyti",
    "bitbybit.runner.run_description": "Vykdo vykdytojo JavaScript kodą.",
    "bitbybit.runner.setRunnerResult": "nustatyti vykdytojo rezultatą",
    "bitbybit.runner.setRunnerResult_description": "Nustato visą JSON rezultatą vykdytojui. Atminkite, kad saugiau nustatyti reikšmes, nes ši metodika perrašys visą rezultatų objektą su pateikta reikšme.",
    "bitbybit.runner.setRunnerResultArrayValue": "nustatyti vykdytojo rezultatų masyvo reikšmę",
    "bitbybit.runner.setRunnerResultArrayValue_description": "Nustato vykdytojo rezultatų reikšmę JSON objekto savybei. Kiekviena reikšmė bus pridėta prie masyvo, kuris yra savybės reikšmė.",
    "bitbybit.runner.setRunnerResultValue": "nustatyti vykdytojo rezultato reikšmę",
    "bitbybit.runner.setRunnerResultValue_description": "Nustato vykdytojo rezultatų reikšmę JSON objekto savybei.",
    "bitbybit.text.areaCreate": "teksto sritis",
    "bitbybit.text.areaCreate_description": "Sukuria teksto sritį redaktoriuje. Galite nustatyti teksto, pločio ir aukščio parametrus.",
    "update on drag": "atnaujinti tempiant",
    "paste": "įklijuoti",
    "duplicate": "dublikuoti",
    "delete": "ištrinti",
    "keyboard": "klaviatūra",
    "data": "duomenys",
    "observables": "stebėtojai",
    "buttons": "mygtukai",
    "variables": "kintamieji",
    "functions": "funkcijos",
    "loop": "ciklas",
    "apply": "taikyty",
    "async context": "asinchroninis kontekstas",
    "async context description": "Sukuria asinchroninį kontekstą, kuris gali naudoti await komponentus, supaprastindamas asinchroninio kodo vykdymą ir skaitomumą.",
    "then": "tada",
    "await": "laukti",
    "await description": "Laukia, kol pažadas bus išspręstas, ir grąžina reikšmę.",
    "when the": "kai",
    "error": "klaida",
    "happens in the promise": "įvyksta pažade",
    "catch": "sugauti",
    "catch description": "Sugeria klaidą, kuri gali įvykti vykdant asinchroninį kodą. Vartotojas gali pasirinkti tinkamai tvarkyti klaidas.",
    "cancel the interval execution": "atšaukti intervalo vykdymą",
    "cancel the interval description": "Atšaukia intervalo vykdymą, pateikus tvarkyklę.",
    "cancel the timeout execution": "atšaukti laiko limito vykdymą",
    "cancel the timeout description": "Atšaukia laiko limito vykdymą, pateikus tvarkyklę.",
    "key down": "klavišo nuspaudimas",
    "key down descritpion": "Paleidžia kodą, kai įvyksta klavišo nuspaudimo įvykis.",
    "key up": "klavišo atleidimas",
    "key up description": "Paleidžia kodą, kai įvyksta klavišo atleidimo įvykis.",
    "key press": "klavišo paspaudimas",
    "key press description": "Paleidžia kodą, kai įvyksta klavišo paspaudimo įvykis.",
    "is key pressed": "ar klavišas paspaustas",
    "block_validation_required": "turi būti pateikta",
    "block_validation_of_length": "turi turėti elementų skaičių",
    "block_validation_higher_or_equal": "turi būti didesnis arba lygus",
    "block_validation_lower_or_equal": "turi būti mažesnis arba lygus",
    "block_validation_range": "turi būti diapazone",
    "block_validation_smaller_than": "turi būti mažesnis nei",
    "block_validation_smaller_or_equal_than": "turi būti mažesnis arba lygus nei",
    "block_validation_larger_than": "turi būti didesnis nei",
    "block_validation_larger_or_equal_than": "turi būti didesnis arba lygus nei",
    "save text to file": "išsaugoti tekstą į failą",
    "save text to file description": "Išsaugo tekstą į failą ir leidžia pasirinkti pavadinimą bei plėtinį. Šis komponentas nerodo teksto peržiūros ir gali būti naudojamas, kai tekstas yra per didelis redaguoti teksto srityje.",
    "print text on screen": "spausdinti tekstą ekrane",
    "print text on screen description": "Spausdina tekstą ekrane. Šis komponentas naudingas derinimo tikslais.",
    "preview text and save to file": "peržiūrėti tekstą ir išsaugoti į failą",
    "preview text and save to file description": "Spausdina tekstą ekrane ir leidžia jį išsaugoti į failą. Šis komponentas naudingas derinimo tikslais.",
    "register render loop listener": "registruoti atvaizdavimo ciklo klausytoją",
    "and update": "ir atnaujinti",
    "register render loop listener description": "Vykdo sakinį atvaizdavimo cikle ir nurodo, kiek laiko praėjo nuo paskutinio kadro, naudojant kintamąjį timeElapsedFromPreviousFrame.",
    "timeElapsedFromPreviousFrame_var": "praėjęs laikas nuo ankstesnio kadro",
    "computing": "skaičiavimas",
    "result": "rezultatas",
    "of promise is returned": "pažado rezultatas grąžinamas",
    "on pointer up": "kai rodyklė pakelta",
    "on pointer move": "kai rodyklė juda",
    "on pointer down": "kai rodyklė nuspausta",
    "of babylonjs observable object": "babylonjs stebimo objekto",
    "observable name": "stebimo objekto pavadinimas",
    "is key pressed description": "Patikrina, ar klavišas paspaustas, ir grąžina true arba false.",
    "execute code after": "vykdyti kodą po",
    "execute code after description": "Vykdo kodą po nurodyto laiko limito sekundėmis.",
    "execute code every": "vykdyti kodą kas",
    "second(s)": "sekundę(-es)",
    "execute code every description": "Vykdo kodą kas nurodytą intervalą sekundėmis.",
    "handler": "tvarkyklė",
    "workers initialising": "naršyklės darbuotojai inicializuojami",
    "Assets": "Ištekliai",
    "Local assets stored in browser cache:": "Vietiniai ištekliai saugomi naršyklės talpykloje:",
    "Asset Name": "Išteklių pavadinimas",
    "Name is required": "Pavadinimas yra privalomas",
    "Asset with this name already exists, choose a different one": "Išteklius su šiuo pavadinimu jau egzistuoja, pasirinkite kitą",
    "Allowed file formats:": "Leidžiami failų formatai:",
    "You must select an asset file": "Turite pasirinkti išteklių failą",
    "Upload Local Asset": "Įkelti vietinį išteklį",
    "File Name": "Failo pavadinimas",
    "File Size": "Failo dydis",
    "Your browser does not support indexDB and you can't upload local asset files.": "Jūsų naršyklė nepalaiko indexDB, todėl negalite įkelti vietinių išteklių failų.",
    "Upload": "Įkelti",
    "elements": "elementai",
    "bitbybit.vector.vectorsTheSame": "vektoriai vienodi",
    "vectorsTheSame": "vektoriai vienodi",
    "bitbybit.vector.vectorsTheSame_description": "Patikrina, ar du vektoriai yra vienodi nurodytos tolerancijos ribose",
    "vec1": "vektorius 1",
    "vec2": "vektorius 2",
    "bitbybit.point.boundingBoxOfPoints": "taškų aprėminimo laukas",
    "boundingBoxOfPoints": "taškų aprėminimo laukas",
    "bitbybit.point.boundingBoxOfPoints_description": "Nustato taškų aprėminimo lauką",
    "bitbybit.point.normalFromThreePoints": "normalė iš trijų taškų",
    "normalFromThreePoints": "normalė iš trijų taškų",
    "bitbybit.point.normalFromThreePoints_description": "Sukuria normalės vektorių iš 3 taškų",
    "reverseNormal": "atvirkštinė normalė",
    "bitbybit.occt.shapes.wire.createLineWireWithExtensions": "linijinis kontūras su prailginimais",
    "createLineWireWithExtensions": "linijinis kontūras su prailginimais",
    "bitbybit.occt.shapes.wire.createLineWireWithExtensions_description": "Sukuria OpenCascade linijinį kontūrą su prailginimais",
    "extensionStart": "prailginimo pradžia",
    "extensionEnd": "prailginimo pabaiga",
    "bitbybit.occt.shapes.wire.midPointOnWire": "vidurio taškas kontūre",
    "midPointOnWire": "vidurio taškas kontūre",
    "bitbybit.occt.shapes.wire.midPointOnWire_description": "Apskaičiuoja vidurio tašką kontūre ties parametru 0.5",
    "centerOnOrigin": "centruoti pradžios taške",
    "bitbybit.occt.shapes.wire.textWiresWithData": "teksto kontūrai su duomenimis",
    "textWiresWithData": "teksto kontūrai su duomenimis",
    "bitbybit.occt.shapes.wire.textWiresWithData_description": "Sukuria OpenCascade junginį iš teksto kontūrų ir grąžina papildomą informaciją, pagrįstą Dr. A. V. Hershey sukurtu simplex šriftu",
    "bitbybit.occt.transforms.alignNormAndAxis": "sulygiuoti normalę ir ašį",
    "alignNormAndAxis": "sulygiuoti normalę ir ašį",
    "bitbybit.occt.transforms.alignNormAndAxis_description": "Sulygiuoja formą su normale ir ašimi",
    "fromNorm": "iš normalės",
    "fromAx": "iš ašies",
    "toNorm": "į normalę",
    "toAx": "į ašį",
    "bitbybit.occt.dimensions.simpleLinearLengthDimension": "paprastas linijinis ilgio matmuo",
    "simpleLinearLengthDimension": "paprastas linijinis ilgio matmuo",
    "bitbybit.occt.dimensions.simpleLinearLengthDimension_description": "Sukuria paprastą linijinį ilgio matmenį tarp dviejų taškų - matavimo vienetai",
    "offsetFromPoints": "atitraukimas nuo taškų",
    "crossingSize": "kirtimo dydis",
    "labelSuffix": "žymės priesaga",
    "labelSize": "žymės dydis",
    "labelOffset": "žymės atitraukimas",
    "bitbybit.occt.dimensions.simpleAngularDimension": "paprastas kampinis matmuo",
    "simpleAngularDimension": "paprastas kampinis matmuo",
    "bitbybit.occt.dimensions.simpleAngularDimension_description": "Sukuria paprastą kampinį matmenį. Pagal nutylėjimą rodomi laipsniai, bet galite pasirinkti naudoti radianus.",
    "direction1": "kryptis 1",
    "direction2": "kryptis 2",
    "offsetFromCenter": "poslinkis nuo centro",
    "extraSize": "papildomas dydis",
    "radians": "radianai",
    "bitbybit.occt.dimensions.pinWithLabel": "smeigtukas su užrašu",
    "pinWithLabel": "smeigtukas su užrašu",
    "bitbybit.occt.dimensions.pinWithLabel_description": "Sukuria smeigtuką su užrašu. Jį galima naudoti paaiškinti informaciją apie modelius arba pažymėti svarbius dalykus 3D scenoje.",
    "offsetFromStart": "poslinkis nuo pradžios",
    "bitbybit.vector.lengthSq": "ilgis kvadratu",
    "lengthSq": "ilgis kvadratu",
    "bitbybit.vector.lengthSq_description": "Apskaičiuoja vektoriaus ilgį kvadratu",
    "bitbybit.point.twoPointsAlmostEqual": "du taškai lygūs",
    "twoPointsAlmostEqual": "du taškai lygūs",
    "bitbybit.point.twoPointsAlmostEqual_description": "Tikrina, ar du taškai yra beveik lygūs",
    "bitbybit.line.lineToSegment": "tiesė į atkarpą",
    "lineToSegment": "tiesė į atkarpą",
    "bitbybit.line.lineToSegment_description": "Konvertuoja tiesę į atkarpą",
    "bitbybit.line.linesToSegments": "tiesės į atkarpas",
    "linesToSegments": "tiesės į atkarpas",
    "bitbybit.line.linesToSegments_description": "Konvertuoja tieses į atkarpas",
    "bitbybit.line.segmentToLine": "atkarpa į tiesę",
    "segmentToLine": "atkarpa į tiesę",
    "bitbybit.line.segmentToLine_description": "Konvertuoja atkarpą į tiesę",
    "segment": "atkarpa",
    "Base.Segment3": "Base.Segment3",
    "bitbybit.line.segmentsToLines": "atkarpos į tieses",
    "segmentsToLines": "atkarpos į tieses",
    "bitbybit.line.segmentsToLines_description": "Konvertuoja atkarpas į tieses",
    "Base.Segment3[]": "Base.Segment3[]",
    "bitbybit.polyline.sortSegmentsIntoPolylines": "atkarpų rūšiavimas į polilinijas",
    "sortSegmentsIntoPolylines": "atkarpų rūšiavimas į polilinijas",
    "bitbybit.polyline.sortSegmentsIntoPolylines_description": "Sukuria polilinijas iš atkarpų, kurios potencialiai yra sujungtos, bet atsitiktinai sumaišytos",
    "sort": "rūšiavimas",
    "bitbybit.mesh.signedDistanceToPlane": "ženklinis atstumas iki plokštumos",
    "signedDistanceToPlane": "ženklinis atstumas iki plokštumos",
    "bitbybit.mesh.signedDistanceToPlane_description": "Apskaičiuoja ženklinį atstumą nuo taško iki plokštumos.",
    "plane": "plokštuma",
    "Base.TrianglePlane3": "Base.TrianglePlane3",
    "bitbybit.mesh.calculateTrianglePlane": "trikampio plokštumos apskaičiavimas",
    "calculateTrianglePlane": "trikampio plokštumos apskaičiavimas",
    "bitbybit.mesh.calculateTrianglePlane_description": "Apskaičiuoja trikampio plokštumą iš trikampio.",
    "triangle": "trikampis",
    "Base.Triangle3": "Base.Triangle3",
    "bitbybit.mesh.triangleTriangleIntersection": "trikampių sankirta",
    "triangleTriangleIntersection": "trikampių sankirta",
    "bitbybit.mesh.triangleTriangleIntersection_description": "Apskaičiuoja dviejų trikampių sankirtą.",
    "triangle1": "trikampis 1",
    "triangle2": "trikampis 2",
    "bitbybit.mesh.meshMeshIntersectionSegments": "tinklų sankirtos atkarpos",
    "meshMeshIntersectionSegments": "tinklų sankirtos atkarpos",
    "bitbybit.mesh.meshMeshIntersectionSegments_description": "Apskaičiuoja dviejų tinklų sankirtos atkarpas.",
    "mesh1": "tinklas 1",
    "Base.Mesh3": "Base.Mesh3",
    "mesh2": "tinklas 2",
    "bitbybit.mesh.meshMeshIntersectionPolylines": "tinklų sankirtos polilinijos",
    "meshMeshIntersectionPolylines": "tinklų sankirtos polilinijos",
    "bitbybit.mesh.meshMeshIntersectionPolylines_description": "Apskaičiuoja dviejų tinklų sankirtos polilinijas.",
    "bitbybit.occt.shapeFacesToPolygonPoints": "formos sienelės į daugiakampio taškus",
    "shapeFacesToPolygonPoints": "formos sienelės į daugiakampio taškus",
    "bitbybit.occt.shapeFacesToPolygonPoints_description": "Sukuria daugiakampio taškus iš formos sienelių",
    "reversedPoints": "apversti taškai",
    "bitbybit.occt.shapeToMesh": "forma į tinklą",
    "shapeToMesh": "forma į tinklą",
    "bitbybit.occt.shapeToMesh_description": "Sukuria tinklą iš formos",
    "bitbybit.occt.shapesToMeshes": "formos į tinklus",
    "shapesToMeshes": "formos į tinklus",
    "bitbybit.occt.shapesToMeshes_description": "Sukuria tinklą iš formos",
    "bitbybit.manifold.manifold.shapes.fromPolygonPoints": "iš daugiakampio taškų",
    "bitbybit.manifold.manifold.shapes.fromPolygonPoints_description": "Sukurti kolektorių iš daugiakampio taškų aibės, aprašančios trikampius.",
    "traingle": "trikampis",
    "bitbybit.point.stretchPointsDirFromCenter": "taškų tempimas kryptimi nuo centro",
    "stretchPointsDirFromCenter": "taškų tempimas kryptimi nuo centro",
    "bitbybit.point.stretchPointsDirFromCenter_description": "Ištempia kelis taškus, pateikiant centro tašką, kryptį ir vienodą mastelio koeficientą",
    "bitbybit.point.hexGridScaledToFit": "pagal matmenis masteliuotas šešiakampių tinklelis",
    "hexGridScaledToFit": "pagal matmenis masteliuotas šešiakampių tinklelis",
    "bitbybit.point.hexGridScaledToFit_description": "Sukuria šešiakampių tinklelį smailiomis viršūnėmis į viršų, keičiant šešiakampių mastelį, kad tiksliai atitiktų nurodytus matmenis. Grąžina tiek centro taškus, tiek kiekvieno (galimai masteliuoto) šešiakampio viršūnes. Šešiakampiai išdėstyti pirmiausia stulpeliais, paskui eilutėmis.",
    "nrHexagonsU": "šešiakampių sk. U",
    "nrHexagonsV": "šešiakampių sk. V",
    "extendTop": "pratęsti viršuje",
    "extendBottom": "pratęsti apačioje",
    "extendLeft": "pratęsti kairėje",
    "extendRight": "pratęsti dešinėje",
    "centerGrid": "centruoti tinklelį",
    "bitbybit.point.sortPoints": "rūšiuoti taškus",
    "sortPoints": "rūšiuoti taškus",
    "bitbybit.point.sortPoints_description": "Rūšiuoja taškus leksikografiškai (X, tada Y, tada Z)",
    "bitbybit.line.lineLineIntersection": "linijos ir linijos sankirta",
    "lineLineIntersection": "linijos ir linijos sankirta",
    "bitbybit.line.lineLineIntersection_description": "Jei dvi linijos kertasi, grąžina sankirtos tašką",
    "line1": "linija 1",
    "line2": "linija 2",
    "checkSegmentsOnly": "tikrinti tik atkarpas",
    "bitbybit.polyline.polylineToLines": "polilinija į linijas",
    "polylineToLines": "polilinija į linijas",
    "bitbybit.polyline.polylineToLines_description": "Sukuria linijas iš polilinijos",
    "bitbybit.polyline.polylineToSegments": "polilinija į atkarpas",
    "polylineToSegments": "polilinija į atkarpas",
    "bitbybit.polyline.polylineToSegments_description": "Sukuria atkarpas iš polilinijos",
    "bitbybit.polyline.polylineSelfIntersection": "polilinijos savęs sankirta",
    "polylineSelfIntersection": "polilinijos savęs sankirta",
    "bitbybit.polyline.polylineSelfIntersection_description": "Randa polilinijos savęs sankirtos taškus",
    "bitbybit.polyline.twoPolylineIntersection": "dviejų polilinijų sankirta",
    "twoPolylineIntersection": "dviejų polilinijų sankirta",
    "bitbybit.polyline.twoPolylineIntersection_description": "Randa sankirtos taškus tarp dviejų polilinijų.",
    "polyline1": "polilinija 1",
    "polyline2": "polilinija 2",
    "bitbybit.occt.shapes.face.subdivideToHexagonWires": "suskirstyti į šešiakampius kontūrus",
    "subdivideToHexagonWires": "suskirstyti į šešiakampius kontūrus",
    "bitbybit.occt.shapes.face.subdivideToHexagonWires_description": "Suskirsto paviršių į šešiakampius kontūrus",
    "extendUUp": "pratęsti U aukštyn",
    "extendUBottom": "pratęsti U žemyn",
    "extendVUp": "pratęsti V aukštyn",
    "extendVBottom": "pratęsti V žemyn",
    "nrHexagonsInHeight": "šešiakampių sk. aukštyje",
    "nrHexagonsInWidth": "šešiakampių sk. plotyje",
    "bitbybit.vector.length": "vektoriaus ilgis",
    "bitbybit.vector.length_description": "Apskaičiuoja vektoriaus ilgį",
    "bitbybit.point.maxFilletRadius": "maks. suapvalinimo spindulys",
    "maxFilletRadius": "maks. suapvalinimo spindulys",
    "bitbybit.point.maxFilletRadius_description": "Apskaičiuoja didžiausią įmanomą suapvalinimo spindulį kampe, sudarytame iš dviejų linijų atkarpų, turinčių bendrą galinį tašką (C), taip, kad suapvalinimo lankas liestųsi su abiem atkarpom ir visas būtų jų viduje.",
    "bitbybit.point.maxFilletRadiusHalfLine": "maks. suapvalinimo spindulys pagal pusės atkarpos taisyklę",
    "maxFilletRadiusHalfLine": "maks. suapvalinimo spindulys pagal pusės atkarpos taisyklę",
    "bitbybit.point.maxFilletRadiusHalfLine_description": "Apskaičiuoja didžiausią įmanomą suapvalinimo spindulį kampe C taip, kad suapvalinimo lankas liestųsi su abiem atkarpomis (P1-C, P2-C), o lietimosi taškai būtų pirmoje kiekvienos atkarpos pusėje (matuojant nuo C).",
    "bitbybit.point.maxFilletsHalfLine": "maks. suapvalinimai pagal pusės atkarpos taisyklę",
    "maxFilletsHalfLine": "maks. suapvalinimai pagal pusės atkarpos taisyklę",
    "bitbybit.point.maxFilletsHalfLine_description": "Apskaičiuoja didžiausią įmanomą suapvalinimo spindulį kiekvienam polilinijos kampui, sudarytam iš taškų sekos. Suapvalinimo spindulys skaičiuojamas kiekvienam vidiniam kampui ir, pasirinktinai, uždarantiems kampams, jei polilinija yra uždara.",
    "checkLastWithFirst": "tikrinti paskutinį su pirmu",
    "bitbybit.point.safestPointsMaxFilletHalfLine": "saugiausias maks. suapvalinimas taškams pagal pusės atkarpos taisyklę",
    "safestPointsMaxFilletHalfLine": "saugiausias maks. suapvalinimas taškams pagal pusės atkarpos taisyklę",
    "bitbybit.point.safestPointsMaxFilletHalfLine_description": "Apskaičiuoja vieną saugiausią maksimalų suapvalinimo spindulį, kurį galima vienodai taikyti visiems taškų rinkinio kampams, remiantis 'pusės atkarpos' taisykle. Jis nustatomas surandant mažiausią iš maksimalių galimų suapvalinimo spindulių, apskaičiuotų kiekvienam atskiram kampui.",
    "bitbybit.polyline.maxFilletsHalfLine": "maks. suapvalinimai pagal pusės atkarpos taisyklę",
    "bitbybit.polyline.maxFilletsHalfLine_description": "Apskaičiuoja didžiausią įmanomą suapvalinimo spindulį pagal pusės atkarpos taisyklę kiekvienam nurodytos polilinijos kampui. Uždaroje polilinijoje įtraukiami kampai, jungiantys paskutinę atkarpą su pirmąja. Skaičiavime naudojama 'pusės atkarpos' taisyklė, reiškianti, kad suapvalinimo lietimosi taškai turi būti pirmoje kiekvienos su kampu susijusios atkarpos pusėje.",
    "bitbybit.polyline.safestFilletRadius": "saugiausias suapvalinimo spindulys",
    "safestFilletRadius": "saugiausias suapvalinimo spindulys",
    "bitbybit.polyline.safestFilletRadius_description": "Apskaičiuoja vieną saugiausią maksimalų suapvalinimo spindulį, kurį galima vienodai taikyti visiems polilinijos kampams, remiantis 'pusės atkarpos' taisykle. Jis nustatomas surandant mažiausią iš maksimalių galimų suapvalinimo spindulių, apskaičiuotų kiekvienam atskiram kampui.",
    "flatTop": "plokščia viršūnė",
    "bitbybit.mesh.meshMeshIntersectionPoints": "tinklų sankirtos taškai",
    "meshMeshIntersectionPoints": "tinklų sankirtos taškai",
    "bitbybit.mesh.meshMeshIntersectionPoints_description": "Apskaičiuoja dviejų tinklų sankirtos taškus.",
    "bitbybit.occt.shapes.wire.hexagonsInGrid": "šešiakampiai tinklelyje",
    "hexagonsInGrid": "šešiakampiai tinklelyje",
    "bitbybit.occt.shapes.wire.hexagonsInGrid_description": "Sukuria OpenCascade šešiakampių kontūrus tinklelyje",
    "scalePatternWidth": "masteliuoti šablono plotį",
    "scalePatternHeight": "masteliuoti šablono aukštį",
    "bitbybit.occt.booleans.meshMeshIntersectionWires": "tinklų sankirtos kontūrai",
    "meshMeshIntersectionWires": "tinklų sankirtos kontūrai",
    "bitbybit.occt.booleans.meshMeshIntersectionWires_description": "Atlieka tinklų sankirtos operaciją tarp dviejų formų - abi formos gali turėti savo tinklo sudarymo tikslumą. Šis algoritmas suranda tinklų sankirtą ir grąžina sankirtos kontūrus, kurie yra polilinijos arba daugiakampiai.",
    "mesh based": "pagrįsta tinklu",
    "precision1": "tikslumas 1",
    "precision2": "tikslumas 2",
    "bitbybit.occt.booleans.meshMeshIntersectionPoints": "tinklų sankirtos taškai",
    "bitbybit.occt.booleans.meshMeshIntersectionPoints_description": "Atlieka tinklų sankirtos operaciją tarp dviejų formų - abi formos gali turėti savo tinklo sudarymo tikslumą. Šis algoritmas suranda tinklų sankirtą ir grąžina sankirtos taškus.",
    "bitbybit.occt.booleans.meshMeshIntersectionOfShapesWires": "formų tinklų sankirta į kontūrus",
    "meshMeshIntersectionOfShapesWires": "formų tinklų sankirta į kontūrus",
    "bitbybit.occt.booleans.meshMeshIntersectionOfShapesWires_description": "Atlieka tinklų sankirtos operaciją tarp vienos formos ir kelių kitų formų - visos formos gali turėti savo tinklo sudarymo tikslumą. Šis algoritmas suranda tinklų sankirtą ir grąžina sankirtos kontūrus, kurie yra polilinijos arba daugiakampiai.",
    "precisionShapes": "formų tikslumas",
    "bitbybit.occt.booleans.meshMeshIntersectionOfShapesPoints": "formų tinklų sankirta į taškus",
    "meshMeshIntersectionOfShapesPoints": "formų tinklų sankirta į taškus",
    "bitbybit.occt.booleans.meshMeshIntersectionOfShapesPoints_description": "Atlieka tinklų sankirtos operaciją tarp vienos formos ir kelių kitų formų - visos formos gali turėti savo tinklo sudarymo tikslumą. Šis algoritmas suranda tinklų sankirtą ir grąžina sankirtos taškus.",
    "bitbybit.occt.shapes.face.hexagonsInGrid": "šešiakampiai tinklelyje",
    "bitbybit.occt.shapes.face.hexagonsInGrid_description": "Sukuria OpenCascade šešiakampius tinklelyje",
    "bitbybit.jscad.toPolygonPoints": "į daugiakampio taškus",
    "toPolygonPoints": "į daugiakampio taškus",
    "bitbybit.jscad.toPolygonPoints_description": "Paverčia jscad formą į daugiakampio taškų rinkinį, reprezentuojantį tinklą",
    "conversions": "konvertavimai",
    "bitbybit.manifold.toPolygonPoints": "į daugiakampio taškus",
    "bitbybit.manifold.toPolygonPoints_description": "Paverčia manifold formą į daugiakampio taškų rinkinį, reprezentuojantį tinklą.",
    "flatU": "plokščias U",
    "bitbybit.occt.shapes.face.subdivideToHexagonHoles": "suskirstyti į šešiakampes skyles",
    "subdivideToHexagonHoles": "suskirstyti į šešiakampes skyles",
    "bitbybit.occt.shapes.face.subdivideToHexagonHoles_description": "Suskirsto paviršių į šešiakampes skyles",
    "bitbybit.verb.curve.convertLinesToNurbsCurves": "konvertuoti linijas į NURBS kreives",
    "bitbybit.verb.curve.convertLinesToNurbsCurves_description": "Konvertuoja linijas į NURBS kreives. Grąžina verbnurbs Line objektų masyvą.",
    "bitbybit.verb.curve.convertLineToNurbsCurve": "konvertuoti liniją į NURBS kreivę",
    "convertLineToNurbsCurve": "konvertuoti liniją į NURBS kreivę",
    "bitbybit.verb.curve.convertLineToNurbsCurve_description": "Konvertuoja liniją į NURBS kreivę. Grąžina verbnurbs Line objektą.",
    "Base.Line3": "Base.Line3",
    "bitbybit.verb.curve.convertPolylineToNurbsCurve": "konvertuoti poliliniją į NURBS kreivę",
    "convertPolylineToNurbsCurve": "konvertuoti poliliniją į NURBS kreivę",
    "bitbybit.verb.curve.convertPolylineToNurbsCurve_description": "Konvertuoja poliliniją į NURBS kreivę. Grąžina verbnurbs NurbsCurve objektą.",
    "Base.Polyline3": "Base.Polyline3",
    "bitbybit.verb.curve.convertPolylinesToNurbsCurves": "konvertuoti polilinijas į NURBS kreives",
    "convertPolylinesToNurbsCurves": "konvertuoti polilinijas į NURBS kreives",
    "bitbybit.verb.curve.convertPolylinesToNurbsCurves_description": "Konvertuoja polilinijas į NURBS kreives. Grąžina verbnurbs NurbsCurve objektus.",
    "Base.Polyline3[]": "Base.Polyline3[]",
    "bitbybit.line.createSegment": "segmentas",
    "createSegment": "segmentas",
    "bitbybit.line.createSegment_description": "Sukurti segmentą",
    "bitbybit.occt.shapes.edge.fromBaseLine": "kraštas iš bazinės linijos",
    "fromBaseLine": "iš bazinės linijos",
    "bitbybit.occt.shapes.edge.fromBaseLine_description": "Sukuria tiesinį kraštą iš bazinės linijos formato {start: Point3, end: Point3}",
    "from base": "iš bazės",
    "bitbybit.occt.shapes.edge.fromBaseLines": "kraštas iš bazinių linijų",
    "fromBaseLines": "iš bazinių linijų",
    "bitbybit.occt.shapes.edge.fromBaseLines_description": "Sukuria tiesinius kraštus iš bazinių linijų formato {start: Point3, end: Point3}[]",
    "bitbybit.occt.shapes.edge.fromBaseSegment": "kraštas iš bazinio segmento",
    "fromBaseSegment": "iš bazinio segmento",
    "bitbybit.occt.shapes.edge.fromBaseSegment_description": "Sukuria tiesinį kraštą iš bazinio segmento formato [Point3, Point3]",
    "bitbybit.occt.shapes.edge.fromBaseSegments": "kraštai iš bazinių segmentų",
    "fromBaseSegments": "iš bazinių segmentų",
    "bitbybit.occt.shapes.edge.fromBaseSegments_description": "Sukuria tiesinį kraštą iš bazinių segmentų formato [Point3, Point3][]",
    "bitbybit.occt.shapes.edge.fromPoints": "kraštai iš taškų",
    "fromPoints": "iš taškų",
    "bitbybit.occt.shapes.edge.fromPoints_description": "Sukuria tiesinius kraštus iš taškų rinkinio",
    "bitbybit.occt.shapes.edge.fromBasePolyline": "kraštai iš bazinės polilinijos",
    "fromBasePolyline": "iš bazinės polilinijos",
    "bitbybit.occt.shapes.edge.fromBasePolyline_description": "Sukuria tiesinius kraštus iš polilinijos apibrėžimo",
    "bitbybit.occt.shapes.edge.fromBaseTriangle": "kraštai iš bazinio trikampio",
    "fromBaseTriangle": "iš bazinio trikampio",
    "bitbybit.occt.shapes.edge.fromBaseTriangle_description": "Sukuria tiesinius kraštus iš trikampio apibrėžimo",
    "bitbybit.occt.shapes.edge.fromBaseMesh": "kraštai iš bazinio tinklo",
    "fromBaseMesh": "iš bazinio tinklo",
    "bitbybit.occt.shapes.edge.fromBaseMesh_description": "Sukuria tiesinius kraštus iš tinklo apibrėžimo",
    "bitbybit.occt.shapes.wire.fromBaseLine": "kontūras iš bazinės linijos",
    "bitbybit.occt.shapes.wire.fromBaseLine_description": "Sukuria tiesinį kontūrą iš bazinės linijos formato {start: Point3, end: Point3}",
    "bitbybit.occt.shapes.wire.fromBaseLines": "kontūrai iš bazinių linijų",
    "bitbybit.occt.shapes.wire.fromBaseLines_description": "Sukuria tiesinius kontūrus iš bazinių linijų formato {start: Point3, end: Point3}[]",
    "bitbybit.occt.shapes.wire.fromBaseSegment": "kontūras iš bazinio segmento",
    "bitbybit.occt.shapes.wire.fromBaseSegment_description": "Sukuria tiesinį kontūrą iš bazinio segmento formato [Point3, Point3]",
    "bitbybit.occt.shapes.wire.fromBaseSegments": "kontūrai iš bazinių segmentų",
    "bitbybit.occt.shapes.wire.fromBaseSegments_description": "Sukuria tiesinius kontūrus iš bazinių segmentų formato [Point3, Point3][]",
    "bitbybit.occt.shapes.wire.fromPoints": "kontūras iš taškų",
    "bitbybit.occt.shapes.wire.fromPoints_description": "Sukuria kontūrą iš taškų rinkinio",
    "bitbybit.occt.shapes.wire.fromBasePolyline": "kontūras iš bazinės polilinijos",
    "bitbybit.occt.shapes.wire.fromBasePolyline_description": "Sukuria kontūrą iš polilinijos apibrėžimo",
    "bitbybit.occt.shapes.wire.fromBaseTriangle": "kontūras iš bazinio trikampio",
    "bitbybit.occt.shapes.wire.fromBaseTriangle_description": "Sukuria kontūrą iš trikampio apibrėžimo",
    "bitbybit.occt.shapes.wire.fromBaseMesh": "kontūrai iš bazinio tinklo",
    "bitbybit.occt.shapes.wire.fromBaseMesh_description": "Sukuria kontūrus iš tinklo apibrėžimo",
    "bitbybit.occt.shapes.face.fromBaseTriangle": "paviršius iš bazinio trikampio",
    "bitbybit.occt.shapes.face.fromBaseTriangle_description": "Sukuria paviršių iš trikampio apibrėžimo",
    "bitbybit.occt.shapes.face.fromBaseMesh": "paviršiai iš bazinio tinklo",
    "bitbybit.occt.shapes.face.fromBaseMesh_description": "Sukuria paviršius iš tinklo apibrėžimo",
    "fromRightHanded": "iš dešiniarankio",
     "bitbybit.advanced.text3d.createWithUrl": "tekstas su url",
    "createWithUrl": "tekstas su url",
    "bitbybit.advanced.text3d.createWithUrl_description": "Sukuria 3d tekstą su šrifto URL. Tai naudinga, kai norite naudoti pasirinktinį šriftą, kuris nėra įtrauktas į biblioteką. Šriftas bus įkeltas iš pateikto URL ir naudojamas 3d tekstui generuoti. Įsitikinkite, kad šriftuose nėra savęs susikirtimų ir kitų blogų simbolių - tai yra dažna problema su pasirinktiniais šriftais. Palaikomi šriftų formatai: ttf, otf, woff. Atkreipkite dėmesį, kad Woff2 nepalaiko opentype.js, nes tai yra suspaustas formatas.",
    "fontUrl": "šrifto url",
    "bitbybit.advanced.text3d.createTextOnFaceUrl": "tekstas ant paviršiaus url",
    "createTextOnFaceUrl": "tekstas ant paviršiaus url",
    "bitbybit.advanced.text3d.createTextOnFaceUrl_description": "Sukuria 3d tekstą ant paviršiaus naudojant šrifto URL. Tai naudinga, kai norite naudoti pasirinktinį šriftą, kuris nėra įtrauktas į biblioteką. Šriftas bus įkeltas iš pateikto URL ir naudojamas 3d tekstui generuoti. Įsitikinkite, kad šriftuose nėra savęs susikirtimų ir kitų blogų simbolių - tai yra dažna problema su pasirinktiniais šriftais. Palaikomi šriftų formatai: ttf, otf, woff. Atkreipkite dėmesį, kad Woff2 nepalaiko opentype.js, nes tai yra suspaustas formatas.",
    "bitbybit.advanced.text3d.createTextsOnFaceUrl": "tekstai ant paviršiaus url",
    "createTextsOnFaceUrl": "tekstai ant paviršiaus url",
    "bitbybit.advanced.text3d.createTextsOnFaceUrl_description": "Sukuria 3d tekstus ant paviršiaus iš kelių URL apibrėžimų. Tai naudinga, kai norite naudoti pasirinktinį šriftą, kuris nėra įtrauktas į biblioteką. Šriftas bus įkeltas iš pateikto URL ir naudojamas 3d tekstui generuoti. Įsitikinkite, kad šriftuose nėra savęs susikirtimų ir kitų blogų simbolių - tai yra dažna problema su pasirinktiniais šriftais. Palaikomi šriftų formatai: ttf, otf, woff. Atkreipkite dėmesį, kad Woff2 nepalaiko opentype.js, nes tai yra suspaustas formatas.",
    "Text3DFaceDefinitionUrlDto[]": "Text3DFaceDefinitionUrlDto[]",
    "bitbybit.advanced.text3d.definition3dTextOnFaceUrl": "3d teksto apibrėžimas ant paviršiaus url",
    "definition3dTextOnFaceUrl": "3d teksto apibrėžimas ant paviršiaus url",
    "bitbybit.advanced.text3d.definition3dTextOnFaceUrl_description": "Sukuria 3d tekstą, kuris bus naudojamas paviršiaus URL apibrėžime. Tai naudinga, kai norite naudoti pasirinktinį šriftą, kuris nėra įtrauktas į biblioteką. Šriftas bus įkeltas iš pateikto URL ir naudojamas 3d tekstui generuoti. Įsitikinkite, kad šriftuose nėra savęs susikirtimų ir kitų blogų simbolių - tai yra dažna problema su pasirinktiniais šriftais. Palaikomi šriftų formatai: ttf, otf, woff. Atkreipkite dėmesį, kad Woff2 nepalaiko opentype.js, nes tai yra suspaustas formatas.",
      "bitbybit.advanced.navigation.pointOfInterest": "lankytinas taškas",
    "navigation": "navigacija",
    "pointOfInterest": "lankytinas taškas",
    "bitbybit.advanced.navigation.pointOfInterest_description": "skrydžio per mazgą",
    "cameraTarget": "kameros taikinys",
    "cameraPosition": "kameros pozicija",
    "bitbybit.advanced.navigation.pointsOfInterestSystem": "lankytinų taškų sistema",
    "pointsOfInterestSystem": "lankytinų taškų sistema",
    "bitbybit.advanced.navigation.pointsOfInterestSystem_description": "",
    "pointsOfInterest": "lankytini taškai",
    "PointOfInterestDto[]": "PointOfInterestDto[]",
    "point of interest": "lankytinas taškas",
    "style": "stilius",
    "PointOfInterestStyleDto": "PointOfInterestStyleDto",
    "bitbybit.advanced.navigation.pointOfInterestStyle": "lankytino taško stilius",
    "pointOfInterestStyle": "lankytino taško stilius",
    "bitbybit.advanced.navigation.pointOfInterestStyle_description": "Sukurti lankytino taško stilių - naudojamas stilizuoti lankytinų taškų indikatorius 3D erdvėje. Galite pritaikyti taško dydį, spalvą, spalvą užvedus pelę, pulsavimo efektą, teksto etiketės spalvą ir dydį.",
    "pointSize": "taško dydis",
    "pointColor": "taško spalva",
    "hoverPointColor": "taško spalva užvedus pelę",
    "pulseColor": "pulsavimo spalva",
    "hoverPulseColor": "pulsavimo spalva užvedus pelę",
    "pulseMinSize": "minimalus pulsavimo dydis",
    "pulseMaxSize": "maksimalus pulsavimo dydis",
    "pulseThickness": "pulsavimo storis",
    "pulseSpeed": "pulsavimo greitis",
    "textColor": "teksto spalva",
    "hoverTextColor": "teksto spalva užvedus pelę",
    "textSize": "teksto dydis",
    "hideSkybox": "paslėpti dangaus foną",
    "textureUrl": "tekstūros URL",
    "hdrTexture": "HDR tekstūra",
    "textureSize": "tekstūros dydis",
    "bitbybit.babylon.scene.enableSkyboxCustomTexture": "įjungti pasirinktinę dangaus fono tekstūrą",
    "enableSkyboxCustomTexture": "įjungti pasirinktinę dangaus fono tekstūrą",
    "bitbybit.babylon.scene.enableSkyboxCustomTexture_description": "Įjungia dangaus foną su pasirinktine tekstūra",
    "bitbybit.babylon.scene.canvasCSSBackgroundImage": "audeklo CSS fono vaizdas",
    "canvasCSSBackgroundImage": "audeklo CSS fono vaizdas",
    "bitbybit.babylon.scene.canvasCSSBackgroundImage_description": "Pakeičia scenos foną į CSS fono vaizdą 3D erdvei",
    "cssBackgroundImage": "CSS fono vaizdas",
    "bitbybit.babylon.scene.twoColorLinearGradient": "dviejų spalvų tiesinis gradientas",
    "twoColorLinearGradient": "dviejų spalvų tiesinis gradientas",
    "bitbybit.babylon.scene.twoColorLinearGradient_description": "Sukuria dviejų spalvų tiesinį gradientinį foną 3D erdvei",
    "colorFrom": "spalva nuo",
    "colorTo": "spalva iki",
    "Base.gradientDirectionEnum": "Base.gradientDirectionEnum",
    "stopFrom": "sustojimas nuo",
    "stopTo": "sustojimas iki",
    "bitbybit.babylon.scene.twoColorRadialGradient": "dviejų spalvų radialinis gradientas",
    "twoColorRadialGradient": "dviejų spalvų radialinis gradientas",
    "bitbybit.babylon.scene.twoColorRadialGradient_description": "Sukuria dviejų spalvų radialinį gradientinį foną 3D erdvei",
    "Base.gradientPositionEnum": "Base.gradientPositionEnum",
    "Base.gradientShapeEnum": "Base.gradientShapeEnum",
    "bitbybit.babylon.scene.multiColorLinearGradient": "daugiaspalvis tiesinis gradientas",
    "multiColorLinearGradient": "daugiaspalvis tiesinis gradientas",
    "bitbybit.babylon.scene.multiColorLinearGradient_description": "Sukuria daugiaspalvį tiesinį gradientinį foną 3D erdvei",
    "Base.Color[]": "Base.Color[]",
    "stops": "sustojimai",
    "bitbybit.babylon.scene.multiColorRadialGradient": "daugiaspalvis radialinis gradientas",
    "multiColorRadialGradient": "daugiaspalvis radialinis gradientas",
    "bitbybit.babylon.scene.multiColorRadialGradient_description": "Sukuria daugiaspalvį radialinį gradientinį foną 3D erdvei",
    "bitbybit.babylon.scene.canvasBackgroundImage": "audeklo fono vaizdas",
    "canvasBackgroundImage": "audeklo fono vaizdas",
    "bitbybit.babylon.scene.canvasBackgroundImage_description": "Nustato fono vaizdą su įvairiomis pritaikymo parinktimis 3D erdvei",
    "imageUrl": "vaizdo URL",
    "Base.backgroundRepeatEnum": "Base.backgroundRepeatEnum",
    "Base.backgroundSizeEnum": "Base.backgroundSizeEnum",
    "attachment": "priedas",
    "Base.backgroundAttachmentEnum": "Base.backgroundAttachmentEnum",
    "Base.backgroundOriginClipEnum": "Base.backgroundOriginClipEnum",
    "clip": "kirpimas",
    "labelRotation": "etiketės sukimas",
    "bitbybit.advanced.dimensions.linearDimension": "tiesinis matmuo",
    "linearDimension": "tiesinis matmuo",
    "bitbybit.advanced.dimensions.linearDimension_description": "Sukuria tiesinį matmenį - matavimo liniją tarp dviejų taškų su pratęsimo linijomis ir teksto etikete. Matmuo rodo atstumą tarp taškų ir gali būti stilizuotas su DimensionStyleDto.",
    "linear dimension": "tiesinis matmuo",
    "DimensionStyleDto": "DimensionStyleDto",
    "bitbybit.advanced.dimensions.angularDimension": "kampinis matmuo",
    "angularDimension": "kampinis matmuo",
    "bitbybit.advanced.dimensions.angularDimension_description": "Sukuria kampinį matmenį - matavimo lanką tarp dviejų krypties vektorių su pratęsimo linijomis ir teksto etikete. Matmuo rodo kampą tarp krypčių ir gali būti stilizuotas su DimensionStyleDto.",
    "angular dimension": "kampinis matmuo",
    "centerPoint": "centrinis taškas",
    "bitbybit.advanced.dimensions.dimensionStyle": "matmens stilius",
    "dimensionStyle": "matmens stilius",
    "bitbybit.advanced.dimensions.dimensionStyle_description": "Sukurti matmens stilių - naudojamas matmenų linijų, rodyklių ir teksto stilizavimui 3D erdvėje. Galite pritaikyti linijų spalvas, storį, teksto dydį, rodyklių dydį ir fono spalvas.",
    "dimension style": "matmens stilius",
    "lineColor": "linijos spalva",
    "lineThickness": "linijos storis",
    "extensionLineLength": "pratęsimo linijos ilgis",
    "textBackgroundColor": "teksto fono spalva",
    "textBackgroundOpacity": "teksto fono nepermatomumas",
    "arrowSize": "rodyklės dydis",
    "arrowColor": "rodyklės spalva",
    "textRenderMode": "teksto atvaizdavimo režimas",
    "textRenderModeEnum": "textRenderModeEnum",
    "textBillboard": "teksto skelbimas",
    "occlusionCheckInterval": "užstojimo tikrinimo intervalas",
    "arrowTailLength": "rodyklės uodegos ilgis",
    "showArrows": "rodyti rodykles",
    "labelOverwrite": "etiketės perrašymas",
    "bitbybit.advanced.dimensions.radialDimension": "radialinis matmuo",
    "radialDimension": "radialinis matmuo",
    "bitbybit.advanced.dimensions.radialDimension_description": "Sukuria radialinį matmenį - matavimo liniją nuo centro iki perimetro, rodančią spindulį arba skersmenį. Rodo 'R' prefiksą spinduliui arba '⌀' prefiksą skersmeniui su pasirinktiniu centro žymeniu.",
    "radial dimension": "radialinis matmuo",
    "radiusPoint": "spindulio taškas",
    "showDiameter": "rodyti skersmenį",
    "showCenterMark": "rodyti centro žymenį",
    "bitbybit.advanced.dimensions.diametralDimension": "skersmens matmuo",
    "diametralDimension": "skersmens matmuo",
    "bitbybit.advanced.dimensions.diametralDimension_description": "Sukuria skersmens matmenį - matavimo liniją, apimančią visą apskritos formos elementų skersmenį. Rodo '⌀' prefiksą su pasirinktiniu centro žymeniu ir rodyklėmis abiejuose galuose.",
    "diametral dimension": "skersmens matmuo",
    "bitbybit.advanced.dimensions.ordinateDimension": "ordinatos matmuo",
    "ordinateDimension": "ordinatos matmuo",
    "bitbybit.advanced.dimensions.ordinateDimension_description": "Sukuria ordinatos matmenį - rodo X, Y arba Z koordinatę nuo atskaitos taško su vedamąja linija. Naudingas koordinačių anotacijoms ir duomenų nuorodoms techniniuose brėžiniuose.",
    "ordinate dimension": "ordinatos matmuo",
    "measurementPoint": "matavimo taškas",
    "referencePoint": "atskaitos taškas",
    "ordinateAxisEnum": "ordinateAxisEnum",
    "showLeaderLine": "rodyti vedamąją liniją",
    "viewMode": "peržiūros režimas",
    "schema": "schema",
    "json schema": "JSON schema",
    "metadata": "metaduomenys",
    "bitbybit.babylon.scene.twoColorLinearGradientBackground": "dviejų spalvų tiesinio gradiento fonas",
    "twoColorLinearGradientBackground": "dviejų spalvų tiesinio gradiento fonas",
    "bitbybit.babylon.scene.twoColorLinearGradientBackground_description": "Sukuria dviejų spalvų tiesinio gradiento foną 3D erdvei",
    "bitbybit.babylon.scene.twoColorRadialGradientBackground": "dviejų spalvų radialinio gradiento fonas",
    "twoColorRadialGradientBackground": "dviejų spalvų radialinio gradiento fonas",
    "bitbybit.babylon.scene.twoColorRadialGradientBackground_description": "Sukuria dviejų spalvų radialinio gradiento foną 3D erdvei",
    "bitbybit.babylon.scene.multiColorLinearGradientBackground": "daugiaspalvis tiesinio gradiento fonas",
    "multiColorLinearGradientBackground": "daugiaspalvis tiesinio gradiento fonas",
    "bitbybit.babylon.scene.multiColorLinearGradientBackground_description": "Sukuria daugiaspalvį tiesinio gradiento foną 3D erdvei",
    "bitbybit.babylon.scene.multiColorRadialGradientBackground": "daugiaspalvis radialinio gradiento fonas",
    "multiColorRadialGradientBackground": "daugiaspalvis radialinio gradiento fonas",
    "bitbybit.babylon.scene.multiColorRadialGradientBackground_description": "Sukuria daugiaspalvį radialinio gradiento foną 3D erdvei",
    "textBackgroundStroke": "teksto fono kontūras",
    "textBackgroundRadius": "teksto fono spindulys",
    "stableSize": "stabilus dydis",
    "alwaysOnTop": "visada viršuje",
    "textStableSize": "stabilus teksto dydis",
    "bitbybit.occt.io.shapeToDxfPaths": "figūra į DXF kelius",
    "shapeToDxfPaths": "figūra į DXF kelius",
    "bitbybit.occt.io.shapeToDxfPaths_description": "Sukuria DXF kelius iš OCCT figūros. Svarbu - figūros, kuriose yra vielų, turi būti XZ plokštumoje (Y=0), kad būtų teisingai eksportuojama į 2D DXF.",
    "dxf": "DXF",
    "bitbybit.occt.io.dxfPathsWithLayer": "DXF keliai su sluoksniu",
    "dxfPathsWithLayer": "DXF keliai su sluoksniu",
    "bitbybit.occt.io.dxfPathsWithLayer_description": "Prideda sluoksnio ir spalvos informaciją prie DXF kelių",
    "IO.DxfPathDto[]": "IO.DxfPathDto[]",
    "layer": "sluoksnis",
    "bitbybit.occt.io.dxfCreate": "sukurti DXF",
    "dxfCreate": "sukurti DXF",
    "bitbybit.occt.io.dxfCreate_description": "Sujungia kelių kelių dalis į pilną DXF failą",
    "pathsParts": "kelių dalys",
    "IO.DxfPathsPartDto[]": "IO.DxfPathsPartDto[]",
    "textFontWeight": "teksto šrifto storis",
    "textPosition": "teksto pozicija",
    "textBackgroundStrokeThickness": "kontūro storis",
    "Inputs.Base.topBottomEnum": "Inputs.Base.topBottomEnum"
}