{
    "bitbybit.draw.drawAnyAsyncNoReturn": "draw any async no return",
    "bitbybit": "bitbybit",
    "draw": "draw",
    "drawAnyAsyncNoReturn": "draw any async no return",
    "bitbybit.draw.drawAnyAsyncNoReturn_description": "draws any geometry without returning anything",
    "draw async": "draw async",
    "entity": "entity",
    "Entity": "entity",
    "options": "options",
    "DrawOptions": "draw options",
    "babylonMesh": "babylon mesh",
    "BABYLON.Mesh | BABYLON.LinesMesh": "babylon mesh or lines mesh",
    "bitbybit.draw.drawAnyAsync": "draw any async",
    "drawAnyAsync": "draw any async",
    "bitbybit.draw.drawAnyAsync_description": "draws any geometry and returns babylon mesh",
    "bitbybit.draw.drawAnyNoReturn": "draw any no return",
    "drawAnyNoReturn": "draw any no return",
    "bitbybit.draw.drawAnyNoReturn_description": "draws sync geometry, not for occt or jscad shapes",
    "draw sync": "draw sync",
    "bitbybit.draw.drawAny": "draw any",
    "drawAny": "draw any",
    "bitbybit.draw.drawAny_description": "draws sync geometry, not for occt or jscad shapes",
    "bitbybit.draw.drawGridMeshNoReturn": "draw grid mesh no return",
    "drawGridMeshNoReturn": "draw grid mesh no return",
    "bitbybit.draw.drawGridMeshNoReturn_description": "draws grid mesh on ground to aid orientation",
    "grid": "grid",
    "width": "width",
    "number": "number",
    "height": "height",
    "subdivisions": "subdivisions",
    "majorUnitFrequency": "major unit frequency",
    "minorUnitVisibility": "minor unit visibility",
    "gridRatio": "grid ratio",
    "opacity": "opacity",
    "backFaceCulling": "back face culling",
    "boolean": "boolean",
    "mainColor": "main color",
    "Base.Color": "base color",
    "secondaryColor": "secondary color",
    "bitbybit.draw.drawGridMesh": "draw grid mesh",
    "drawGridMesh": "draw grid mesh",
    "bitbybit.draw.drawGridMesh_description": "draws grid mesh on ground to aid orientation",
    "bitbybit.draw.optionsSimple": "options simple",
    "optionsSimple": "options simple",
    "bitbybit.draw.optionsSimple_description": "sets draw options for basic geometry like points and lines",
    "colours": "colours",
    "string | string[]": "string or string array",
    "size": "size",
    "updatable": "updatable",
    "hidden": "hidden",
    "bitbybit.draw.optionsOcctShape": "options occt shape",
    "optionsOcctShape": "options occt shape",
    "bitbybit.draw.optionsOcctShape_description": "sets draw options for occt shapes like edges and solids",
    "faceOpacity": "face opacity",
    "edgeOpacity": "edge opacity",
    "edgeColour": "edge colour",
    "faceColour": "face colour",
    "vertexColour": "vertex colour",
    "faceMaterial": "face material",
    "Base.Material": "base material",
    "edgeWidth": "edge width",
    "vertexSize": "vertex size",
    "drawEdges": "draw edges",
    "drawFaces": "draw faces",
    "drawVertices": "draw vertices",
    "precision": "precision",
    "drawEdgeIndexes": "draw edge indexes",
    "edgeIndexHeight": "edge index height",
    "edgeIndexColour": "edge index colour",
    "drawFaceIndexes": "draw face indexes",
    "faceIndexHeight": "face index height",
    "faceIndexColour": "face index colour",
    "bitbybit.draw.optionsOcctShapeSimple": "options occt shape simple",
    "optionsOcctShapeSimple": "options occt shape simple",
    "bitbybit.draw.optionsOcctShapeSimple_description": "sets simple draw options for occt shapes",
    "bitbybit.draw.optionsOcctShapeMaterial": "options occt shape material",
    "optionsOcctShapeMaterial": "options occt shape material",
    "bitbybit.draw.optionsOcctShapeMaterial_description": "sets draw options with custom face material for occt shapes",
    "any": "any",
    "bitbybit.draw.optionsManifoldShapeMaterial": "options manifold shape material",
    "optionsManifoldShapeMaterial": "options manifold shape material",
    "bitbybit.draw.optionsManifoldShapeMaterial_description": "sets draw options for manifold geometry",
    "crossSectionColour": "cross section colour",
    "crossSectionWidth": "cross section width",
    "crossSectionOpacity": "cross section opacity",
    "computeNormals": "compute normals",
    "bitbybit.draw.optionsBabylonNode": "options babylon node",
    "optionsBabylonNode": "options babylon node",
    "bitbybit.draw.optionsBabylonNode_description": "sets draw options for babylon js nodes",
    "colorX": "color x",
    "colorY": "color y",
    "colorZ": "color z",
    "bitbybit.babylon.mesh.dispose": "dispose mesh",
    "babylon": "babylon",
    "mesh": "mesh",
    "dispose": "dispose",
    "bitbybit.babylon.mesh.dispose_description": "removes drawn mesh from scene",
    "memory": "memory",
    "BABYLON.Mesh": "babylon mesh",
    "bitbybit.babylon.mesh.updateDrawn": "update drawn",
    "updateDrawn": "update drawn",
    "bitbybit.babylon.mesh.updateDrawn_description": "updates babylon js mesh without disposing",
    "updates": "updates",
    "position": "position",
    "Base.Point3": "base point 3",
    "rotation": "rotation",
    "Base.Vector3": "base vector 3",
    "scaling": "scaling",
    "bitbybit.babylon.mesh.setVisibility": "set visibility",
    "setVisibility": "set visibility",
    "bitbybit.babylon.mesh.setVisibility_description": "changes visibility of babylon js mesh",
    "visibility": "visibility",
    "includeChildren": "include children",
    "bitbybit.babylon.mesh.hide": "hide",
    "hide": "hide",
    "bitbybit.babylon.mesh.hide_description": "hides the mesh",
    "bitbybit.babylon.mesh.show": "show",
    "show": "show",
    "bitbybit.babylon.mesh.show_description": "shows the mesh",
    "bitbybit.babylon.mesh.setParent": "set parent",
    "setParent": "set parent",
    "bitbybit.babylon.mesh.setParent_description": "changes parent of drawn mesh",
    "set": "set",
    "BABYLON.Mesh | BABYLON.InstancedMesh | BABYLON.AbstractMesh": "babylon mesh or instanced mesh or abstract mesh",
    "parentMesh": "parent mesh",
    "bitbybit.babylon.mesh.getParent": "get parent",
    "getParent": "get parent",
    "bitbybit.babylon.mesh.getParent_description": "gets parent of drawn mesh",
    "get": "get",
    "bitbybit.babylon.mesh.setCheckCollisions": "set check collisions",
    "setCheckCollisions": "set check collisions",
    "bitbybit.babylon.mesh.setCheckCollisions_description": "changes collision check property of drawn mesh",
    "checkCollisions": "check collisions",
    "bitbybit.babylon.mesh.getCheckCollisions": "get check collisions",
    "getCheckCollisions": "get check collisions",
    "bitbybit.babylon.mesh.getCheckCollisions_description": "gets collision check property of drawn mesh",
    "bitbybit.babylon.mesh.setPickable": "set pickable",
    "setPickable": "set pickable",
    "bitbybit.babylon.mesh.setPickable_description": "changes pickable property of drawn mesh",
    "pickable": "pickable",
    "bitbybit.babylon.mesh.enablePointerMoveEvents": "enable pointer move events",
    "enablePointerMoveEvents": "enable pointer move events",
    "bitbybit.babylon.mesh.enablePointerMoveEvents_description": "makes mesh pickable by pointer move events, performance heavy",
    "bitbybit.babylon.mesh.disablePointerMoveEvents": "disable pointer move events",
    "disablePointerMoveEvents": "disable pointer move events",
    "bitbybit.babylon.mesh.disablePointerMoveEvents_description": "makes mesh ignore pointer move events",
    "bitbybit.babylon.mesh.getPickable": "get pickable",
    "getPickable": "get pickable",
    "bitbybit.babylon.mesh.getPickable_description": "gets pickable property of drawn mesh",
    "bitbybit.babylon.mesh.getMeshesWhereNameContains": "get meshes where name contains",
    "getMeshesWhereNameContains": "get meshes where name contains",
    "bitbybit.babylon.mesh.getMeshesWhereNameContains_description": "gets meshes with names containing given text",
    "name": "name",
    "string": "string",
    "bitbybit.babylon.mesh.getChildMeshes": "get child meshes",
    "getChildMeshes": "get child meshes",
    "bitbybit.babylon.mesh.getChildMeshes_description": "gets child meshes",
    "directDescendantsOnly": "direct descendants only",
    "bitbybit.babylon.mesh.getMeshesOfId": "get meshes of id",
    "getMeshesOfId": "get meshes of id",
    "bitbybit.babylon.mesh.getMeshesOfId_description": "gets meshes by id",
    "id": "id",
    "bitbybit.babylon.mesh.getMeshOfId": "get mesh of id",
    "getMeshOfId": "get mesh of id",
    "bitbybit.babylon.mesh.getMeshOfId_description": "gets mesh by id",
    "bitbybit.babylon.mesh.getMeshOfUniqueId": "get mesh of unique id",
    "getMeshOfUniqueId": "get mesh of unique id",
    "bitbybit.babylon.mesh.getMeshOfUniqueId_description": "gets mesh by unique id",
    "uniqueId": "unique id",
    "bitbybit.babylon.mesh.mergeMeshes": "merge meshes",
    "mergeMeshes": "merge meshes",
    "bitbybit.babylon.mesh.mergeMeshes_description": "merges multiple meshes into one",
    "edit": "edit",
    "arrayOfMeshes": "array of meshes",
    "BABYLON.Mesh[]": "babylon mesh array",
    "disposeSource": "dispose source",
    "allow32BitsIndices": "allow 32 bits indices",
    "meshSubclass": "mesh subclass",
    "subdivideWithSubMeshes": "subdivide with sub meshes",
    "multiMultiMaterials": "multi multi materials",
    "bitbybit.babylon.mesh.convertToFlatShadedMesh": "convert to flat shaded mesh",
    "convertToFlatShadedMesh": "convert to flat shaded mesh",
    "bitbybit.babylon.mesh.convertToFlatShadedMesh_description": "converts mesh to flat shaded mesh",
    "bitbybit.babylon.mesh.clone": "clone",
    "clone": "clone",
    "bitbybit.babylon.mesh.clone_description": "clones the mesh",
    "bitbybit.babylon.mesh.cloneToPositions": "clone to positions",
    "cloneToPositions": "clone to positions",
    "bitbybit.babylon.mesh.cloneToPositions_description": "clones mesh to multiple positions",
    "positions": "positions",
    "Base.Point3[]": "base point 3 array",
    "bitbybit.babylon.mesh.setId": "set id",
    "setId": "set id",
    "bitbybit.babylon.mesh.setId_description": "changes id of drawn mesh",
    "bitbybit.babylon.mesh.getId": "get id",
    "getId": "get id",
    "bitbybit.babylon.mesh.getId_description": "gets id of drawn mesh",
    "bitbybit.babylon.mesh.getUniqueId": "get unique id",
    "getUniqueId": "get unique id",
    "bitbybit.babylon.mesh.getUniqueId_description": "gets unique id of drawn mesh",
    "bitbybit.babylon.mesh.setName": "set name",
    "setName": "set name",
    "bitbybit.babylon.mesh.setName_description": "changes name of drawn mesh",
    "bitbybit.babylon.mesh.getVerticesAsPolygonPoints": "get vertices as polygon points",
    "getVerticesAsPolygonPoints": "get vertices as polygon points",
    "bitbybit.babylon.mesh.getVerticesAsPolygonPoints_description": "gets vertices as polygon points for mesh construction, requires triangulation",
    "bitbybit.babylon.mesh.getName": "get name",
    "getName": "get name",
    "bitbybit.babylon.mesh.getName_description": "gets name of babylon mesh",
    "bitbybit.babylon.mesh.setMaterial": "set material",
    "setMaterial": "set material",
    "bitbybit.babylon.mesh.setMaterial_description": "changes material of drawn mesh",
    "material": "material",
    "BABYLON.Material": "babylon material",
    "bitbybit.babylon.mesh.getMaterial": "get material",
    "getMaterial": "get material",
    "bitbybit.babylon.mesh.getMaterial_description": "gets material of babylon mesh",
    "bitbybit.babylon.mesh.getPosition": "get position",
    "getPosition": "get position",
    "bitbybit.babylon.mesh.getPosition_description": "gets position as point of babylon js mesh",
    "bitbybit.babylon.mesh.getAbsolutePosition": "get absolute position",
    "getAbsolutePosition": "get absolute position",
    "bitbybit.babylon.mesh.getAbsolutePosition_description": "gets absolute position in world as point of babylon js mesh",
    "bitbybit.babylon.mesh.getRotation": "get rotation",
    "getRotation": "get rotation",
    "bitbybit.babylon.mesh.getRotation_description": "gets rotation vector of babylon js mesh",
    "bitbybit.babylon.mesh.getScale": "get scale",
    "getScale": "get scale",
    "bitbybit.babylon.mesh.getScale_description": "gets scale vector of babylon js mesh",
    "bitbybit.babylon.mesh.moveForward": "move forward",
    "moveForward": "move forward",
    "bitbybit.babylon.mesh.moveForward_description": "moves babylon js mesh forward in local space",
    "move": "move",
    "distance": "distance",
    "bitbybit.babylon.mesh.moveBackward": "move backward",
    "moveBackward": "move backward",
    "bitbybit.babylon.mesh.moveBackward_description": "moves babylon js mesh backward in local space",
    "bitbybit.babylon.mesh.moveUp": "move up",
    "moveUp": "move up",
    "bitbybit.babylon.mesh.moveUp_description": "moves babylon js mesh up in local space",
    "bitbybit.babylon.mesh.moveDown": "move down",
    "moveDown": "move down",
    "bitbybit.babylon.mesh.moveDown_description": "moves babylon js mesh down in local space",
    "bitbybit.babylon.mesh.moveRight": "move right",
    "moveRight": "move right",
    "bitbybit.babylon.mesh.moveRight_description": "moves babylon js mesh right in local space",
    "bitbybit.babylon.mesh.moveLeft": "move left",
    "moveLeft": "move left",
    "bitbybit.babylon.mesh.moveLeft_description": "moves babylon js mesh left in local space",
    "bitbybit.babylon.mesh.yaw": "yaw",
    "yaw": "yaw",
    "bitbybit.babylon.mesh.yaw_description": "rotates babylon js mesh around local y axis",
    "rotate": "rotate",
    "bitbybit.babylon.mesh.pitch": "pitch",
    "pitch": "pitch",
    "bitbybit.babylon.mesh.pitch_description": "rotates babylon js mesh around local x axis",
    "bitbybit.babylon.mesh.roll": "roll",
    "roll": "roll",
    "bitbybit.babylon.mesh.roll_description": "rotates babylon js mesh around local z axis",
    "bitbybit.babylon.mesh.rotateAroundAxisWithPosition": "rotate around axis with position",
    "rotateAroundAxisWithPosition": "rotate around axis with position",
    "bitbybit.babylon.mesh.rotateAroundAxisWithPosition_description": "rotates mesh around axis and position by angle",
    "axis": "axis",
    "angle": "angle",
    "bitbybit.babylon.mesh.setPosition": "set position",
    "setPosition": "set position",
    "bitbybit.babylon.mesh.setPosition_description": "updates position of babylon js mesh or instanced mesh",
    "BABYLON.Mesh | BABYLON.InstancedMesh": "babylon mesh or instanced mesh",
    "bitbybit.babylon.mesh.setRotation": "set rotation",
    "setRotation": "set rotation",
    "bitbybit.babylon.mesh.setRotation_description": "updates rotation of babylon js mesh or instanced mesh",
    "bitbybit.babylon.mesh.setScale": "set scale",
    "setScale": "set scale",
    "bitbybit.babylon.mesh.setScale_description": "updates scale of babylon js mesh or instanced mesh",
    "scale": "scale",
    "bitbybit.babylon.mesh.intersectsMesh": "intersects mesh",
    "intersectsMesh": "intersects mesh",
    "bitbybit.babylon.mesh.intersectsMesh_description": "checks if mesh intersects another mesh",
    "intersects": "intersects",
    "babylonMesh2": "babylon mesh 2",
    "precise": "precise",
    "includeDescendants": "include descendants",
    "bitbybit.babylon.mesh.intersectsPoint": "intersects point",
    "intersectsPoint": "intersects point",
    "bitbybit.babylon.mesh.intersectsPoint_description": "checks if mesh intersects a point",
    "point": "point",
    "bitbybit.babylon.mesh.createMeshInstanceAndTransformNoReturn": "mesh instance and transform no return",
    "createMeshInstanceAndTransformNoReturn": "mesh instance and transform no return",
    "bitbybit.babylon.mesh.createMeshInstanceAndTransformNoReturn_description": "creates mesh instance with children for optimized rendering, no return",
    "instance": "instance",
    "bitbybit.babylon.mesh.createMeshInstanceAndTransform": "mesh instance and transform",
    "createMeshInstanceAndTransform": "mesh instance and transform",
    "bitbybit.babylon.mesh.createMeshInstanceAndTransform_description": "creates mesh instance with children for optimized rendering, returns mesh",
    "bitbybit.babylon.mesh.createMeshInstance": "mesh instance",
    "createMeshInstance": "mesh instance",
    "bitbybit.babylon.mesh.createMeshInstance_description": "creates mesh instance for optimized rendering with children",
    "bitbybit.babylon.gaussianSplatting.create": "gaussian splatting",
    "gaussianSplatting": "gaussian splatting",
    "create": "create",
    "bitbybit.babylon.gaussianSplatting.create_description": "creates gaussian splatting mesh",
    "url": "url",
    "bitbybit.babylon.gaussianSplatting.clone": "clone gaussian splatting",
    "bitbybit.babylon.gaussianSplatting.clone_description": "clones gaussian splatting mesh",
    "multiply": "multiply",
    "BABYLON.GaussianSplattingMesh": "babylon gaussian splatting mesh",
    "bitbybit.babylon.gaussianSplatting.getSplatPositions": "get splat positions",
    "getSplatPositions": "get splat positions",
    "bitbybit.babylon.gaussianSplatting.getSplatPositions_description": "gets splat positions of gaussian splatting mesh",
    "bitbybit.babylon.camera.freezeProjectionMatrix": "freeze projection matrix",
    "camera": "camera",
    "freezeProjectionMatrix": "freeze projection matrix",
    "bitbybit.babylon.camera.freezeProjectionMatrix_description": "freezes camera projection matrix",
    "adjust": "adjust",
    "BABYLON.Camera": "babylon camera",
    "bitbybit.babylon.camera.unfreezeProjectionMatrix": "unfreeze projection matrix",
    "unfreezeProjectionMatrix": "unfreeze projection matrix",
    "bitbybit.babylon.camera.unfreezeProjectionMatrix_description": "unfreezes camera projection matrix",
    "bitbybit.babylon.camera.setPosition": "set position",
    "bitbybit.babylon.camera.setPosition_description": "changes camera position",
    "BABYLON.TargetCamera": "babylon target camera",
    "bitbybit.babylon.camera.getPosition": "get position",
    "bitbybit.babylon.camera.getPosition_description": "gets camera position",
    "bitbybit.babylon.camera.setTarget": "set target",
    "setTarget": "set target",
    "bitbybit.babylon.camera.setTarget_description": "changes camera target",
    "target": "target",
    "bitbybit.babylon.camera.getTarget": "get target",
    "getTarget": "get target",
    "bitbybit.babylon.camera.getTarget_description": "gets camera target",
    "bitbybit.babylon.camera.setSpeed": "set speed",
    "setSpeed": "set speed",
    "bitbybit.babylon.camera.setSpeed_description": "changes camera speed",
    "speed": "speed",
    "bitbybit.babylon.camera.getSpeed": "get speed",
    "getSpeed": "get speed",
    "bitbybit.babylon.camera.getSpeed_description": "gets camera speed",
    "bitbybit.babylon.camera.setMinZ": "set min z",
    "setMinZ": "set min z",
    "bitbybit.babylon.camera.setMinZ_description": "changes camera min z",
    "minZ": "min z",
    "bitbybit.babylon.camera.setMaxZ": "set max z",
    "setMaxZ": "set max z",
    "bitbybit.babylon.camera.setMaxZ_description": "changes camera max z",
    "maxZ": "max z",
    "bitbybit.babylon.camera.makeCameraOrthographic": "make camera orthographic",
    "makeCameraOrthographic": "make camera orthographic",
    "bitbybit.babylon.camera.makeCameraOrthographic_description": "sets camera to orthographic mode",
    "orthoLeft": "ortho left",
    "orthoRight": "ortho right",
    "orthoBottom": "ortho bottom",
    "orthoTop": "ortho top",
    "bitbybit.babylon.camera.makeCameraPerspective": "make camera perspective",
    "makeCameraPerspective": "make camera perspective",
    "bitbybit.babylon.camera.makeCameraPerspective_description": "sets camera to perspective mode",
    "bitbybit.babylon.camera.free.create": "free camera",
    "free": "free",
    "bitbybit.babylon.camera.free.create_description": "creates free camera",
    "bitbybit.babylon.camera.arcRotate.create": "arc rotate camera",
    "arcRotate": "arc rotate",
    "bitbybit.babylon.camera.arcRotate.create_description": "creates camera rotating around target on arc path, default for bitbybit",
    "radius": "radius",
    "alpha": "alpha",
    "beta": "beta",
    "lowerRadiusLimit": "lower radius limit",
    "upperRadiusLimit": "upper radius limit",
    "lowerAlphaLimit": "lower alpha limit",
    "upperAlphaLimit": "upper alpha limit",
    "lowerBetaLimit": "lower beta limit",
    "upperBetaLimit": "upper beta limit",
    "angularSensibilityX": "angular sensibility x",
    "angularSensibilityY": "angular sensibility y",
    "panningSensibility": "panning sensibility",
    "wheelPrecision": "wheel precision",
    "bitbybit.babylon.camera.target.create": "target camera",
    "bitbybit.babylon.camera.target.create_description": "creates target camera",
    "bitbybit.babylon.webXr.simple.createImmersiveARExperience": "immersive ar experience",
    "webXr": "web xr",
    "simple": "simple",
    "createImmersiveARExperience": "immersive ar experience",
    "bitbybit.babylon.webXr.simple.createImmersiveARExperience_description": "creates default xr experience in immersive ar mode",
    "scene": "scene",
    "bitbybit.babylon.webXr.simple.createDefaultXRExperienceWithTeleportation": "default xr experience with teleportation",
    "createDefaultXRExperienceWithTeleportation": "default xr experience with teleportation",
    "bitbybit.babylon.webXr.simple.createDefaultXRExperienceWithTeleportation_description": "creates basic xr experience with teleportation",
    "groundMeshes": "ground meshes",
    "bitbybit.babylon.webXr.simple.createDefaultXRExperienceWithTeleportationReturn": "default xr experience with teleportation return",
    "createDefaultXRExperienceWithTeleportationReturn": "default xr experience with teleportation return",
    "bitbybit.babylon.webXr.simple.createDefaultXRExperienceWithTeleportationReturn_description": "creates basic xr experience with teleportation, returns result",
    "bitbybit.babylon.node.drawNode": "draw node",
    "node": "node",
    "drawNode": "draw node",
    "bitbybit.babylon.node.drawNode_description": "draws node with size and axis colours",
    "BABYLON.TransformNode": "babylon transform node",
    "bitbybit.babylon.node.drawNodes": "draw nodes",
    "drawNodes": "draw nodes",
    "bitbybit.babylon.node.drawNodes_description": "draws multiple nodes with size and axis colours",
    "nodes": "nodes",
    "BABYLON.TransformNode[]": "babylon transform node array",
    "bitbybit.babylon.node.createNodeFromRotation": "node from rotation",
    "createNodeFromRotation": "node from rotation",
    "bitbybit.babylon.node.createNodeFromRotation_description": "creates node at origin with rotations in parent space",
    "parent": "parent",
    "BABYLON.TransformNode | null": "babylon transform node or null",
    "origin": "origin",
    "bitbybit.babylon.node.createWorldNode": "world node",
    "createWorldNode": "world node",
    "bitbybit.babylon.node.createWorldNode_description": "creates node with root as parent",
    "bitbybit.babylon.node.getAbsoluteForwardVector": "get absolute forward vector",
    "getAbsoluteForwardVector": "get absolute forward vector",
    "bitbybit.babylon.node.getAbsoluteForwardVector_description": "gets absolute forward vector in world space",
    "bitbybit.babylon.node.getAbsoluteRightVector": "get absolute right vector",
    "getAbsoluteRightVector": "get absolute right vector",
    "bitbybit.babylon.node.getAbsoluteRightVector_description": "gets absolute right vector in world space",
    "bitbybit.babylon.node.getAbsoluteUpVector": "get absolute up vector",
    "getAbsoluteUpVector": "get absolute up vector",
    "bitbybit.babylon.node.getAbsoluteUpVector_description": "gets absolute up vector in world space",
    "bitbybit.babylon.node.getAbsolutePosition": "get absolute position",
    "bitbybit.babylon.node.getAbsolutePosition_description": "gets absolute position of node in world space",
    "bitbybit.babylon.node.getAbsoluteRotationTransformation": "get absolute rotation transformation",
    "getAbsoluteRotationTransformation": "get absolute rotation transformation",
    "bitbybit.babylon.node.getAbsoluteRotationTransformation_description": "gets absolute rotation as transformation matrix (16 numbers)",
    "bitbybit.babylon.node.getRotationTransformation": "get rotation transformation",
    "getRotationTransformation": "get rotation transformation",
    "bitbybit.babylon.node.getRotationTransformation_description": "gets local rotation as transformation matrix (16 numbers)",
    "bitbybit.babylon.node.getChildren": "get children",
    "getChildren": "get children",
    "bitbybit.babylon.node.getChildren_description": "gets children of node",
    "bitbybit.babylon.node.getParent": "get parent",
    "bitbybit.babylon.node.getParent_description": "gets parent of node",
    "bitbybit.babylon.node.getPositionExpressedInLocalSpace": "get position in local space",
    "getPositionExpressedInLocalSpace": "get position in local space",
    "bitbybit.babylon.node.getPositionExpressedInLocalSpace_description": "gets node position in local space",
    "bitbybit.babylon.node.getRootNode": "get root node",
    "getRootNode": "get root node",
    "bitbybit.babylon.node.getRootNode_description": "gets root node",
    "bitbybit.babylon.node.getRotation": "get rotation",
    "bitbybit.babylon.node.getRotation_description": "gets euler rotations of node",
    "bitbybit.babylon.node.rotateAroundAxisWithPosition": "rotate around axis with position",
    "bitbybit.babylon.node.rotateAroundAxisWithPosition_description": "rotates node around axis and position by angle",
    "bitbybit.babylon.node.rotate": "rotate",
    "bitbybit.babylon.node.rotate_description": "rotates node around origin and axis",
    "bitbybit.babylon.node.setAbsolutePosition": "set absolute position",
    "setAbsolutePosition": "set absolute position",
    "bitbybit.babylon.node.setAbsolutePosition_description": "sets absolute position of node",
    "bitbybit.babylon.node.setDirection": "set direction",
    "setDirection": "set direction",
    "bitbybit.babylon.node.setDirection_description": "sets direction of node",
    "direction": "direction",
    "number[]": "number array",
    "bitbybit.babylon.node.setParent": "set parent",
    "bitbybit.babylon.node.setParent_description": "sets new parent for node",
    "parentNode": "parent node",
    "bitbybit.babylon.node.translate": "translate",
    "translate": "translate",
    "bitbybit.babylon.node.translate_description": "moves node by direction vector and distance",
    "bitbybit.babylon.scene.backgroundColour": "background colour",
    "backgroundColour": "background colour",
    "bitbybit.babylon.scene.backgroundColour_description": "changes scene background colour in 3d space",
    "environment": "environment",
    "colour": "colour",
    "bitbybit.babylon.scene.activateCamera": "activate camera",
    "activateCamera": "activate camera",
    "bitbybit.babylon.scene.activateCamera_description": "sets camera as active, replacing current one",
    "bitbybit.babylon.scene.useRightHandedSystem": "use right handed system",
    "useRightHandedSystem": "use right handed system",
    "bitbybit.babylon.scene.useRightHandedSystem_description": "switches to right handed coordinate system",
    "system": "system",
    "use": "use",
    "bitbybit.babylon.scene.drawPointLightNoReturn": "draw point light no return",
    "drawPointLightNoReturn": "draw point light no return",
    "bitbybit.babylon.scene.drawPointLightNoReturn_description": "adds point light to scene, no output",
    "lights": "lights",
    "intensity": "intensity",
    "diffuse": "diffuse",
    "specular": "specular",
    "shadowGeneratorMapSize": "shadow generator map size",
    "enableShadows": "enable shadows",
    "shadowDarkness": "shadow darkness",
    "shadowUsePercentageCloserFiltering": "shadow use percentage closer filtering",
    "shadowContactHardeningLightSizeUVRatio": "shadow contact hardening light size uv ratio",
    "shadowBias": "shadow bias",
    "shadowNormalBias": "shadow normal bias",
    "shadowMaxZ": "shadow max z",
    "shadowMinZ": "shadow min z",
    "bitbybit.babylon.scene.getShadowGenerators": "get shadow generators",
    "getShadowGenerators": "get shadow generators",
    "bitbybit.babylon.scene.getShadowGenerators_description": "gets shadow generators from bitbybit lights",
    "bitbybit.babylon.scene.drawPointLight": "draw point light",
    "drawPointLight": "draw point light",
    "bitbybit.babylon.scene.drawPointLight_description": "adds point light to scene",
    "bitbybit.babylon.scene.drawDirectionalLightNoReturn": "draw directional light no return",
    "drawDirectionalLightNoReturn": "draw directional light no return",
    "bitbybit.babylon.scene.drawDirectionalLightNoReturn_description": "adds directional light to scene, no output",
    "bitbybit.babylon.scene.drawDirectionalLight": "draw directional light",
    "drawDirectionalLight": "draw directional light",
    "bitbybit.babylon.scene.drawDirectionalLight_description": "adds directional light to scene",
    "bitbybit.babylon.scene.getActiveCamera": "get active camera",
    "getActiveCamera": "get active camera",
    "bitbybit.babylon.scene.getActiveCamera_description": "gets current active camera in scene",
    "bitbybit.babylon.scene.adjustActiveArcRotateCamera": "adjust active arc rotate camera",
    "adjustActiveArcRotateCamera": "adjust active arc rotate camera",
    "bitbybit.babylon.scene.adjustActiveArcRotateCamera_description": "tunes active arc rotate camera settings",
    "lookAt": "look at",
    "bitbybit.babylon.scene.clearAllDrawn": "clear all drawn",
    "clearAllDrawn": "clear all drawn",
    "bitbybit.babylon.scene.clearAllDrawn_description": "removes all drawn objects from 3d scene",
    "bitbybit.babylon.scene.enableSkybox": "enable skybox",
    "enableSkybox": "enable skybox",
    "bitbybit.babylon.scene.enableSkybox_description": "turns on skybox in scene",
    "skybox": "skybox",
    "Base.skyboxEnum": "base skybox enum",
    "blur": "blur",
    "environmentIntensity": "environment intensity",
    "bitbybit.babylon.scene.fog": "fog",
    "fog": "fog",
    "bitbybit.babylon.scene.fog_description": "turns on fog mode in scene",
    "mode": "mode",
    "Base.fogModeEnum": "base fog mode enum",
    "color": "color",
    "density": "density",
    "start": "start",
    "end": "end",
    "bitbybit.babylon.transforms.rotationCenterAxis": "rotation center axis",
    "transforms": "transforms",
    "rotationCenterAxis": "rotation center axis",
    "bitbybit.babylon.transforms.rotationCenterAxis_description": "creates rotation transform around center and axis",
    "center": "center",
    "bitbybit.babylon.transforms.rotationCenterX": "rotation center x",
    "rotationCenterX": "rotation center x",
    "bitbybit.babylon.transforms.rotationCenterX_description": "creates rotation transform around center and x axis",
    "bitbybit.babylon.transforms.rotationCenterY": "rotation center y",
    "rotationCenterY": "rotation center y",
    "bitbybit.babylon.transforms.rotationCenterY_description": "creates rotation transform around center and y axis",
    "bitbybit.babylon.transforms.rotationCenterZ": "rotation center z",
    "rotationCenterZ": "rotation center z",
    "bitbybit.babylon.transforms.rotationCenterZ_description": "creates rotation transform around center and z axis",
    "bitbybit.babylon.transforms.rotationCenterYawPitchRoll": "rotation center yaw pitch roll",
    "rotationCenterYawPitchRoll": "rotation center yaw pitch roll",
    "bitbybit.babylon.transforms.rotationCenterYawPitchRoll_description": "creates rotation transform with yaw pitch roll",
    "bitbybit.babylon.transforms.scaleCenterXYZ": "scale center xyz",
    "scaleCenterXYZ": "scale center xyz",
    "bitbybit.babylon.transforms.scaleCenterXYZ_description": "creates scale transform around center in xyz",
    "scaleXyz": "scale xyz",
    "bitbybit.babylon.transforms.scaleXYZ": "scale xyz",
    "scaleXYZ": "scale xyz",
    "bitbybit.babylon.transforms.scaleXYZ_description": "creates scale transform in x y z directions",
    "bitbybit.babylon.transforms.uniformScale": "uniform scale",
    "uniformScale": "uniform scale",
    "bitbybit.babylon.transforms.uniformScale_description": "creates uniform scale transform",
    "bitbybit.babylon.transforms.uniformScaleFromCenter": "uniform scale from center",
    "uniformScaleFromCenter": "uniform scale from center",
    "bitbybit.babylon.transforms.uniformScaleFromCenter_description": "creates uniform scale transform from center",
    "bitbybit.babylon.transforms.translationXYZ": "translation xyz",
    "translationXYZ": "translation xyz",
    "bitbybit.babylon.transforms.translationXYZ_description": "creates translation transform",
    "translation": "translation",
    "bitbybit.babylon.transforms.translationsXYZ": "translations xyz",
    "translationsXYZ": "translations xyz",
    "bitbybit.babylon.transforms.translationsXYZ_description": "creates multiple translation transforms",
    "translations": "translations",
    "Base.Vector3[]": "base vector 3 array",
    "bitbybit.babylon.io.loadAssetIntoScene": "load asset into scene",
    "io": "io",
    "loadAssetIntoScene": "load asset into scene",
    "bitbybit.babylon.io.loadAssetIntoScene_description": "imports mesh from uploaded project asset",
    "load": "load",
    "assetFile": "asset file",
    "File": "file",
    "bitbybit.babylon.io.loadAssetIntoSceneNoReturn": "load asset into scene no return",
    "loadAssetIntoSceneNoReturn": "load asset into scene no return",
    "bitbybit.babylon.io.loadAssetIntoSceneNoReturn_description": "imports mesh from uploaded project asset, no output",
    "bitbybit.babylon.io.loadAssetIntoSceneFromRootUrl": "load asset into scene from root url",
    "loadAssetIntoSceneFromRootUrl": "load asset into scene from root url",
    "bitbybit.babylon.io.loadAssetIntoSceneFromRootUrl_description": "imports mesh from public web url, requires cors",
    "rootUrl": "root url",
    "bitbybit.babylon.io.loadAssetIntoSceneFromRootUrlNoReturn": "load asset into scene from root url no return",
    "loadAssetIntoSceneFromRootUrlNoReturn": "load asset into scene from root url no return",
    "bitbybit.babylon.io.loadAssetIntoSceneFromRootUrlNoReturn_description": "imports mesh from public web url, no output, requires cors",
    "bitbybit.babylon.io.exportBabylon": "export babylon",
    "exportBabylon": "export babylon",
    "bitbybit.babylon.io.exportBabylon_description": "exports scene to .babylon format for editing",
    "export": "export",
    "fileName": "file name",
    "bitbybit.babylon.io.exportGLB": "export glb",
    "exportGLB": "export glb",
    "bitbybit.babylon.io.exportGLB_description": "exports scene to .glb format, web standard",
    "discardSkyboxAndGrid": "discard skybox and grid",
    "bitbybit.babylon.io.exportMeshToStl": "export mesh to stl",
    "exportMeshToStl": "export mesh to stl",
    "bitbybit.babylon.io.exportMeshToStl_description": "exports mesh and children to stl",
    "bitbybit.babylon.io.exportMeshesToStl": "export meshes to stl",
    "exportMeshesToStl": "export meshes to stl",
    "bitbybit.babylon.io.exportMeshesToStl_description": "exports multiple meshes to stl",
    "meshes": "meshes",
    "bitbybit.babylon.ray.createPickingRay": "picking ray",
    "ray": "ray",
    "createPickingRay": "picking ray",
    "bitbybit.babylon.ray.createPickingRay_description": "creates picking ray from mouse position in active camera",
    "bitbybit.babylon.ray.createRay": "ray",
    "createRay": "ray",
    "bitbybit.babylon.ray.createRay_description": "creates ray from origin with direction and optional length",
    "length": "length",
    "bitbybit.babylon.ray.createRayFromTo": "ray from to",
    "createRayFromTo": "ray from to",
    "bitbybit.babylon.ray.createRayFromTo_description": "creates ray between two points",
    "from": "from",
    "to": "to",
    "bitbybit.babylon.ray.getOrigin": "get origin",
    "getOrigin": "get origin",
    "bitbybit.babylon.ray.getOrigin_description": "gets ray origin",
    "BABYLON.Ray": "babylon ray",
    "bitbybit.babylon.ray.getDirection": "get direction",
    "getDirection": "get direction",
    "bitbybit.babylon.ray.getDirection_description": "gets ray direction",
    "bitbybit.babylon.ray.getLength": "get length",
    "getLength": "get length",
    "bitbybit.babylon.ray.getLength_description": "gets ray length",
    "bitbybit.babylon.pick.pickWithRay": "pick with ray",
    "pick": "pick",
    "pickWithRay": "pick with ray",
    "bitbybit.babylon.pick.pickWithRay_description": "gets hit result from ray picking",
    "bitbybit.babylon.pick.pickWithPickingRay": "pick with picking ray",
    "pickWithPickingRay": "pick with picking ray",
    "bitbybit.babylon.pick.pickWithPickingRay_description": "picks with ray from mouse position in active camera",
    "bitbybit.babylon.pick.getDistance": "get distance",
    "getDistance": "get distance",
    "bitbybit.babylon.pick.getDistance_description": "gets distance to object if picked",
    "get from pick info": "get from pick info",
    "pickInfo": "pick info",
    "BABYLON.PickingInfo": "babylon picking info",
    "bitbybit.babylon.pick.getPickedMesh": "get picked mesh",
    "getPickedMesh": "get picked mesh",
    "bitbybit.babylon.pick.getPickedMesh_description": "gets mesh that was picked",
    "bitbybit.babylon.pick.getPickedPoint": "get picked point",
    "getPickedPoint": "get picked point",
    "bitbybit.babylon.pick.getPickedPoint_description": "gets point that was picked",
    "bitbybit.babylon.pick.hit": "hit",
    "hit": "hit",
    "bitbybit.babylon.pick.hit_description": "checks if ray hit anything in scene",
    "bitbybit.babylon.pick.getSubMeshId": "get sub mesh id",
    "getSubMeshId": "get sub mesh id",
    "bitbybit.babylon.pick.getSubMeshId_description": "gets unique submesh id if picked",
    "bitbybit.babylon.pick.getSubMeshFaceId": "get sub mesh face id",
    "getSubMeshFaceId": "get sub mesh face id",
    "bitbybit.babylon.pick.getSubMeshFaceId_description": "gets unique submesh face id if picked",
    "bitbybit.babylon.pick.getBU": "get bu",
    "getBU": "get bu",
    "bitbybit.babylon.pick.getBU_description": "gets barycentric u for texture collision",
    "bitbybit.babylon.pick.getBV": "get bv",
    "getBV": "get bv",
    "bitbybit.babylon.pick.getBV_description": "gets barycentric v for texture collision",
    "bitbybit.babylon.pick.getPickedSprite": "get picked sprite",
    "getPickedSprite": "get picked sprite",
    "bitbybit.babylon.pick.getPickedSprite_description": "gets picked sprite",
    "bitbybit.babylon.material.pbrMetallicRoughness.create": "pbr metallic roughness",
    "pbrMetallicRoughness": "pbr metallic roughness",
    "bitbybit.babylon.material.pbrMetallicRoughness.create_description": "creates pbr metallic roughness material",
    "baseColor": "base color",
    "emissiveColor": "emissive color",
    "metallic": "metallic",
    "roughness": "roughness",
    "zOffset": "z offset",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBaseColor": "set base color",
    "setBaseColor": "set base color",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBaseColor_description": "sets material base color",
    "BABYLON.PBRMetallicRoughnessMaterial": "babylon pbr metallic roughness material",
    "bitbybit.babylon.material.pbrMetallicRoughness.setMetallic": "set metallic",
    "setMetallic": "set metallic",
    "bitbybit.babylon.material.pbrMetallicRoughness.setMetallic_description": "sets material metallic property",
    "bitbybit.babylon.material.pbrMetallicRoughness.setRoughness": "set roughness",
    "setRoughness": "set roughness",
    "bitbybit.babylon.material.pbrMetallicRoughness.setRoughness_description": "sets material roughness",
    "bitbybit.babylon.material.pbrMetallicRoughness.setAlpha": "set alpha",
    "setAlpha": "set alpha",
    "bitbybit.babylon.material.pbrMetallicRoughness.setAlpha_description": "sets material alpha",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBackFaceCulling": "set back face culling",
    "setBackFaceCulling": "set back face culling",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBackFaceCulling_description": "sets material back face culling",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBaseTexture": "set base texture",
    "setBaseTexture": "set base texture",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBaseTexture_description": "sets material texture",
    "baseTexture": "base texture",
    "BABYLON.Texture": "babylon texture",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBaseColor": "get base color",
    "getBaseColor": "get base color",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBaseColor_description": "gets material base color",
    "bitbybit.babylon.material.pbrMetallicRoughness.getMetallic": "get metallic",
    "getMetallic": "get metallic",
    "bitbybit.babylon.material.pbrMetallicRoughness.getMetallic_description": "gets material metallic property",
    "bitbybit.babylon.material.pbrMetallicRoughness.getRoughness": "get roughness",
    "getRoughness": "get roughness",
    "bitbybit.babylon.material.pbrMetallicRoughness.getRoughness_description": "gets material roughness",
    "bitbybit.babylon.material.pbrMetallicRoughness.getAlpha": "get alpha",
    "getAlpha": "get alpha",
    "bitbybit.babylon.material.pbrMetallicRoughness.getAlpha_description": "gets material alpha",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBackFaceCulling": "get back face culling",
    "getBackFaceCulling": "get back face culling",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBackFaceCulling_description": "gets material back face culling",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBaseTexture": "get base texture",
    "getBaseTexture": "get base texture",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBaseTexture_description": "gets material base texture",
    "bitbybit.babylon.material.skyMaterial.create": "sky material",
    "skyMaterial": "sky material",
    "bitbybit.babylon.material.skyMaterial.create_description": "creates sky material",
    "luminance": "luminance",
    "turbidity": "turbidity",
    "rayleigh": "rayleigh",
    "mieCoefficient": "mie coefficient",
    "mieDirectionalG": "mie directional g",
    "inclination": "inclination",
    "azimuth": "azimuth",
    "sunPosition": "sun position",
    "useSunPosition": "use sun position",
    "cameraOffset": "camera offset",
    "up": "up",
    "dithering": "dithering",
    "bitbybit.babylon.material.skyMaterial.setLuminance": "set luminance",
    "setLuminance": "set luminance",
    "bitbybit.babylon.material.skyMaterial.setLuminance_description": "sets sky material luminance",
    "MATERIALS.SkyMaterial": "materials sky material",
    "bitbybit.babylon.material.skyMaterial.setTurbidity": "set turbidity",
    "setTurbidity": "set turbidity",
    "bitbybit.babylon.material.skyMaterial.setTurbidity_description": "sets sky material turbidity",
    "bitbybit.babylon.material.skyMaterial.setRayleigh": "set rayleigh",
    "setRayleigh": "set rayleigh",
    "bitbybit.babylon.material.skyMaterial.setRayleigh_description": "sets sky material rayleigh",
    "bitbybit.babylon.material.skyMaterial.setMieCoefficient": "set mie coefficient",
    "setMieCoefficient": "set mie coefficient",
    "bitbybit.babylon.material.skyMaterial.setMieCoefficient_description": "sets sky material mie coefficient",
    "bitbybit.babylon.material.skyMaterial.setMieDirectionalG": "set mie directional g",
    "setMieDirectionalG": "set mie directional g",
    "bitbybit.babylon.material.skyMaterial.setMieDirectionalG_description": "sets sky material mie directional g",
    "bitbybit.babylon.material.skyMaterial.setDistance": "set distance",
    "setDistance": "set distance",
    "bitbybit.babylon.material.skyMaterial.setDistance_description": "sets sky material distance",
    "bitbybit.babylon.material.skyMaterial.setInclination": "set inclination",
    "setInclination": "set inclination",
    "bitbybit.babylon.material.skyMaterial.setInclination_description": "sets sky material inclination",
    "bitbybit.babylon.material.skyMaterial.setAzimuth": "set azimuth",
    "setAzimuth": "set azimuth",
    "bitbybit.babylon.material.skyMaterial.setAzimuth_description": "sets sky material azimuth",
    "bitbybit.babylon.material.skyMaterial.setSunPosition": "set sun position",
    "setSunPosition": "set sun position",
    "bitbybit.babylon.material.skyMaterial.setSunPosition_description": "sets sky material sun position",
    "bitbybit.babylon.material.skyMaterial.setUseSunPosition": "set use sun position",
    "setUseSunPosition": "set use sun position",
    "bitbybit.babylon.material.skyMaterial.setUseSunPosition_description": "sets sky material use sun position",
    "bitbybit.babylon.material.skyMaterial.setCameraOffset": "set camera offset",
    "setCameraOffset": "set camera offset",
    "bitbybit.babylon.material.skyMaterial.setCameraOffset_description": "sets sky material camera offset",
    "bitbybit.babylon.material.skyMaterial.setUp": "set up",
    "setUp": "set up",
    "bitbybit.babylon.material.skyMaterial.setUp_description": "sets sky material up direction",
    "bitbybit.babylon.material.skyMaterial.setDithering": "set dithering",
    "setDithering": "set dithering",
    "bitbybit.babylon.material.skyMaterial.setDithering_description": "sets sky material dithering",
    "bitbybit.babylon.material.skyMaterial.getLuminance": "get luminance",
    "getLuminance": "get luminance",
    "bitbybit.babylon.material.skyMaterial.getLuminance_description": "gets sky material luminance",
    "bitbybit.babylon.material.skyMaterial.getTurbidity": "get turbidity",
    "getTurbidity": "get turbidity",
    "bitbybit.babylon.material.skyMaterial.getTurbidity_description": "gets sky material turbidity",
    "bitbybit.babylon.material.skyMaterial.getRayleigh": "get rayleigh",
    "getRayleigh": "get rayleigh",
    "bitbybit.babylon.material.skyMaterial.getRayleigh_description": "gets sky material rayleigh",
    "bitbybit.babylon.material.skyMaterial.getMieCoefficient": "get mie coefficient",
    "getMieCoefficient": "get mie coefficient",
    "bitbybit.babylon.material.skyMaterial.getMieCoefficient_description": "gets sky material mie coefficient",
    "bitbybit.babylon.material.skyMaterial.getMieDirectionalG": "get mie directional g",
    "getMieDirectionalG": "get mie directional g",
    "bitbybit.babylon.material.skyMaterial.getMieDirectionalG_description": "gets sky material mie directional g",
    "bitbybit.babylon.material.skyMaterial.getDistance": "get distance",
    "bitbybit.babylon.material.skyMaterial.getDistance_description": "gets sky material distance",
    "bitbybit.babylon.material.skyMaterial.getInclination": "get inclination",
    "getInclination": "get inclination",
    "bitbybit.babylon.material.skyMaterial.getInclination_description": "gets sky material inclination",
    "bitbybit.babylon.material.skyMaterial.getAzimuth": "get azimuth",
    "getAzimuth": "get azimuth",
    "bitbybit.babylon.material.skyMaterial.getAzimuth_description": "gets sky material azimuth",
    "bitbybit.babylon.material.skyMaterial.getSunPosition": "get sun position",
    "getSunPosition": "get sun position",
    "bitbybit.babylon.material.skyMaterial.getSunPosition_description": "gets sky material sun position",
    "bitbybit.babylon.material.skyMaterial.getUseSunPosition": "get use sun position",
    "getUseSunPosition": "get use sun position",
    "bitbybit.babylon.material.skyMaterial.getUseSunPosition_description": "gets sky material use sun position",
    "bitbybit.babylon.material.skyMaterial.getCameraOffset": "get camera offset",
    "getCameraOffset": "get camera offset",
    "bitbybit.babylon.material.skyMaterial.getCameraOffset_description": "gets sky material camera offset",
    "bitbybit.babylon.material.skyMaterial.getUp": "get up",
    "getUp": "get up",
    "bitbybit.babylon.material.skyMaterial.getUp_description": "gets sky material up direction",
    "bitbybit.babylon.material.skyMaterial.getDithering": "get dithering",
    "getDithering": "get dithering",
    "bitbybit.babylon.material.skyMaterial.getDithering_description": "gets sky material dithering",
    "bitbybit.babylon.lights.shadowLight.setDirectionToTarget": "set direction to target",
    "shadowLight": "shadow light",
    "setDirectionToTarget": "set direction to target",
    "bitbybit.babylon.lights.shadowLight.setDirectionToTarget_description": "sets shadow light direction",
    "BABYLON.ShadowLight": "babylon shadow light",
    "bitbybit.babylon.lights.shadowLight.setPosition": "set position",
    "bitbybit.babylon.lights.shadowLight.setPosition_description": "sets shadow light position",
    "bitbybit.babylon.meshBuilder.createBox": "box",
    "meshBuilder": "mesh builder",
    "createBox": "box",
    "bitbybit.babylon.meshBuilder.createBox_description": "creates box mesh",
    "create simple": "create simple",
    "depth": "depth",
    "sideOrientation": "side orientation",
    "BabylonMesh.sideOrientationEnum": "babylon mesh side orientation enum",
    "bitbybit.babylon.meshBuilder.createCube": "cube",
    "createCube": "cube",
    "bitbybit.babylon.meshBuilder.createCube_description": "creates cube mesh",
    "bitbybit.babylon.meshBuilder.createSquarePlane": "square plane",
    "createSquarePlane": "square plane",
    "bitbybit.babylon.meshBuilder.createSquarePlane_description": "creates square plane mesh",
    "bitbybit.babylon.meshBuilder.createSphere": "sphere",
    "createSphere": "sphere",
    "bitbybit.babylon.meshBuilder.createSphere_description": "creates sphere mesh",
    "diameter": "diameter",
    "segments": "segments",
    "bitbybit.babylon.meshBuilder.createIcoSphere": "ico sphere",
    "createIcoSphere": "ico sphere",
    "bitbybit.babylon.meshBuilder.createIcoSphere_description": "creates ico sphere mesh",
    "radiusX": "radius x",
    "radiusY": "radius y",
    "radiusZ": "radius z",
    "flat": "flat",
    "bitbybit.babylon.meshBuilder.createDisc": "disc",
    "createDisc": "disc",
    "bitbybit.babylon.meshBuilder.createDisc_description": "creates disc mesh",
    "tessellation": "tessellation",
    "arc": "arc",
    "bitbybit.babylon.meshBuilder.createTorus": "torus",
    "createTorus": "torus",
    "bitbybit.babylon.meshBuilder.createTorus_description": "creates torus mesh",
    "thickness": "thickness",
    "bitbybit.babylon.meshBuilder.createTorusKnot": "torus knot",
    "createTorusKnot": "torus knot",
    "bitbybit.babylon.meshBuilder.createTorusKnot_description": "creates torus knot mesh",
    "tube": "tube",
    "radialSegments": "radial segments",
    "tubularSegments": "tubular segments",
    "p": "p",
    "q": "q",
    "bitbybit.babylon.meshBuilder.createPolygon": "polygon",
    "createPolygon": "polygon",
    "bitbybit.babylon.meshBuilder.createPolygon_description": "creates polygon mesh",
    "shape": "shape",
    "holes": "holes",
    "Base.Vector3[][]": "base vector 3 array array",
    "smoothingThreshold": "smoothing threshold",
    "wrap": "wrap",
    "bitbybit.babylon.meshBuilder.extrudePolygon": "extrude polygon",
    "extrudePolygon": "extrude polygon",
    "bitbybit.babylon.meshBuilder.extrudePolygon_description": "creates extruded polygon mesh",
    "bitbybit.babylon.meshBuilder.createTube": "tube",
    "createTube": "tube",
    "bitbybit.babylon.meshBuilder.createTube_description": "creates tube mesh",
    "path": "path",
    "cap": "cap",
    "bitbybit.babylon.meshBuilder.createPolyhedron": "polyhedron",
    "createPolyhedron": "polyhedron",
    "bitbybit.babylon.meshBuilder.createPolyhedron_description": "creates polyhedron mesh",
    "type": "type",
    "sizeX": "size x",
    "sizeY": "size y",
    "sizeZ": "size z",
    "custom": "custom",
    "bitbybit.babylon.meshBuilder.createGeodesic": "geodesic",
    "createGeodesic": "geodesic",
    "bitbybit.babylon.meshBuilder.createGeodesic_description": "creates geodesic mesh",
    "m": "m",
    "n": "n",
    "bitbybit.babylon.meshBuilder.createGoldberg": "goldberg",
    "createGoldberg": "goldberg",
    "bitbybit.babylon.meshBuilder.createGoldberg_description": "creates goldberg mesh",
    "bitbybit.babylon.meshBuilder.createCapsule": "capsule",
    "createCapsule": "capsule",
    "bitbybit.babylon.meshBuilder.createCapsule_description": "creates capsule mesh",
    "orientation": "orientation",
    "capSubdivisions": "cap subdivisions",
    "radiusTop": "radius top",
    "radiusBottom": "radius bottom",
    "topCapSubdivisions": "top cap subdivisions",
    "bottomCapSubdivisions": "bottom cap subdivisions",
    "bitbybit.babylon.meshBuilder.createCylinder": "cylinder",
    "createCylinder": "cylinder",
    "bitbybit.babylon.meshBuilder.createCylinder_description": "creates cylinder mesh",
    "diameterTop": "diameter top",
    "diameterBottom": "diameter bottom",
    "bitbybit.babylon.meshBuilder.createExtrudedSahpe": "extruded shape",
    "createExtrudedSahpe": "extruded shape",
    "bitbybit.babylon.meshBuilder.createExtrudedSahpe_description": "creates extruded shape mesh",
    "closeShape": "close shape",
    "closePath": "close path",
    "bitbybit.babylon.meshBuilder.createRibbon": "ribbon",
    "createRibbon": "ribbon",
    "bitbybit.babylon.meshBuilder.createRibbon_description": "creates ribbon mesh",
    "pathArray": "path array",
    "closeArray": "close array",
    "offset": "offset",
    "bitbybit.babylon.meshBuilder.createLathe": "lathe",
    "createLathe": "lathe",
    "bitbybit.babylon.meshBuilder.createLathe_description": "creates lathe mesh",
    "closed": "closed",
    "bitbybit.babylon.meshBuilder.createGround": "ground",
    "createGround": "ground",
    "bitbybit.babylon.meshBuilder.createGround_description": "creates ground mesh",
    "subdivisionsX": "subdivisions x",
    "subdivisionsY": "subdivisions y",
    "bitbybit.babylon.meshBuilder.createRectanglePlane": "rectangle plane",
    "createRectanglePlane": "rectangle plane",
    "bitbybit.babylon.meshBuilder.createRectanglePlane_description": "creates rectangle plane mesh",
    "bitbybit.babylon.texture.createSimple": "simple texture",
    "texture": "texture",
    "createSimple": "simple",
    "bitbybit.babylon.texture.createSimple_description": "creates texture from url with basic options",
    "invertY": "invert y",
    "invertZ": "invert z",
    "wAng": "w ang",
    "uScale": "u scale",
    "vScale": "v scale",
    "uOffset": "u offset",
    "vOffset": "v offset",
    "samplingMode": "sampling mode",
    "samplingModeEnum": "sampling mode enum",
    "bitbybit.babylon.tools.createScreenshot": "screenshot",
    "tools": "tools",
    "createScreenshot": "screenshot",
    "bitbybit.babylon.tools.createScreenshot_description": "captures scene screenshot",
    "screenshots": "screenshots",
    "mimeType": "mime type",
    "quality": "quality",
    "bitbybit.babylon.tools.createScreenshotAndDownload": "screenshot and download",
    "createScreenshotAndDownload": "screenshot and download",
    "bitbybit.babylon.tools.createScreenshotAndDownload_description": "captures and downloads scene screenshot",
    "bitbybit.babylon.gui.advancedDynamicTexture.createFullScreenUI": "full screen ui",
    "gui": "gui",
    "advancedDynamicTexture": "advanced dynamic texture",
    "createFullScreenUI": "full screen ui",
    "bitbybit.babylon.gui.advancedDynamicTexture.createFullScreenUI_description": "creates full screen ui",
    "spaces": "spaces",
    "foreground": "foreground",
    "adaptiveScaling": "adaptive scaling",
    "bitbybit.babylon.gui.advancedDynamicTexture.createForMesh": "for mesh",
    "createForMesh": "for mesh",
    "bitbybit.babylon.gui.advancedDynamicTexture.createForMesh_description": "creates texture for mesh",
    "BABYLON.AbstractMesh": "babylon abstract mesh",
    "supportPointerMove": "support pointer move",
    "onlyAlphaTesting": "only alpha testing",
    "sampling": "sampling",
    "BabylonTexture.samplingModeEnum": "babylon texture sampling mode enum",
    "bitbybit.babylon.gui.control.changeControlPadding": "change control padding",
    "control": "control",
    "changeControlPadding": "change control padding",
    "bitbybit.babylon.gui.control.changeControlPadding_description": "sets control padding",
    "positioning": "positioning",
    "BABYLON.GUI.Control": "babylon gui control",
    "paddingLeft": "padding left",
    "number | string": "number or string",
    "paddingRight": "padding right",
    "paddingTop": "padding top",
    "paddingBottom": "padding bottom",
    "bitbybit.babylon.gui.control.changeControlAlignment": "change control alignment",
    "changeControlAlignment": "change control alignment",
    "bitbybit.babylon.gui.control.changeControlAlignment_description": "sets control alignment",
    "T": "t",
    "horizontalAlignment": "horizontal alignment",
    "horizontalAlignmentEnum": "horizontal alignment enum",
    "verticalAlignment": "vertical alignment",
    "verticalAlignmentEnum": "vertical alignment enum",
    "bitbybit.babylon.gui.control.cloneControl": "clone control",
    "cloneControl": "clone control",
    "bitbybit.babylon.gui.control.cloneControl_description": "clones control",
    "container": "container",
    "BABYLON.GUI.Container": "babylon gui container",
    "host": "host",
    "BABYLON.GUI.AdvancedDynamicTexture": "babylon gui advanced dynamic texture",
    "bitbybit.babylon.gui.control.createControlObservableSelector": "control observable selector",
    "createControlObservableSelector": "control observable selector",
    "bitbybit.babylon.gui.control.createControlObservableSelector_description": "creates observable selector for control",
    "selector": "selector",
    "controlObservableSelectorEnum": "control observable selector enum",
    "bitbybit.babylon.gui.control.getControlByName": "get control by name",
    "getControlByName": "get control by name",
    "bitbybit.babylon.gui.control.getControlByName_description": "gets control by name",
    "bitbybit.babylon.gui.control.setIsVisible": "set is visible",
    "setIsVisible": "set is visible",
    "bitbybit.babylon.gui.control.setIsVisible_description": "sets control visibility",
    "isVisible": "is visible",
    "bitbybit.babylon.gui.control.setIsReadonly": "set is readonly",
    "setIsReadonly": "set is readonly",
    "bitbybit.babylon.gui.control.setIsReadonly_description": "sets control readonly",
    "isReadOnly": "is readonly",
    "bitbybit.babylon.gui.control.setIsEnabled": "set is enabled",
    "setIsEnabled": "set is enabled",
    "bitbybit.babylon.gui.control.setIsEnabled_description": "sets control enabled",
    "isEnabled": "is enabled",
    "bitbybit.babylon.gui.control.setHeight": "set height",
    "setHeight": "set height",
    "bitbybit.babylon.gui.control.setHeight_description": "sets control height",
    "bitbybit.babylon.gui.control.setWidth": "set width",
    "setWidth": "set width",
    "bitbybit.babylon.gui.control.setWidth_description": "sets control width",
    "bitbybit.babylon.gui.control.setColor": "set color",
    "setColor": "set color",
    "bitbybit.babylon.gui.control.setColor_description": "sets control color",
    "bitbybit.babylon.gui.control.setFontSize": "set font size",
    "setFontSize": "set font size",
    "bitbybit.babylon.gui.control.setFontSize_description": "sets control font size",
    "fontSize": "font size",
    "bitbybit.babylon.gui.control.getHeight": "get height",
    "getHeight": "get height",
    "bitbybit.babylon.gui.control.getHeight_description": "gets control height",
    "bitbybit.babylon.gui.control.getWidth": "get width",
    "getWidth": "get width",
    "bitbybit.babylon.gui.control.getWidth_description": "gets control width",
    "bitbybit.babylon.gui.control.getColor": "get color",
    "getColor": "get color",
    "bitbybit.babylon.gui.control.getColor_description": "gets control color",
    "bitbybit.babylon.gui.control.getFontSize": "get font size",
    "getFontSize": "get font size",
    "bitbybit.babylon.gui.control.getFontSize_description": "gets control font size",
    "bitbybit.babylon.gui.control.getIsVisible": "get is visible",
    "getIsVisible": "get is visible",
    "bitbybit.babylon.gui.control.getIsVisible_description": "gets control visibility",
    "bitbybit.babylon.gui.control.getIsReadonly": "get is readonly",
    "getIsReadonly": "get is readonly",
    "bitbybit.babylon.gui.control.getIsReadonly_description": "gets control readonly",
    "bitbybit.babylon.gui.control.getIsEnabled": "get is enabled",
    "getIsEnabled": "get is enabled",
    "bitbybit.babylon.gui.control.getIsEnabled_description": "gets control enabled",
    "bitbybit.babylon.gui.container.addControls": "add controls",
    "addControls": "add controls",
    "bitbybit.babylon.gui.container.addControls_description": "adds controls to container in order",
    "controls": "controls",
    "BABYLON.GUI.Control[]": "babylon gui control array",
    "clearControlsFirst": "clear controls first",
    "bitbybit.babylon.gui.container.setBackground": "set background",
    "setBackground": "set background",
    "bitbybit.babylon.gui.container.setBackground_description": "sets container background",
    "background": "background",
    "bitbybit.babylon.gui.container.setIsReadonly": "set is readonly",
    "bitbybit.babylon.gui.container.setIsReadonly_description": "sets container readonly",
    "bitbybit.babylon.gui.container.getBackground": "get background",
    "getBackground": "get background",
    "bitbybit.babylon.gui.container.getBackground_description": "gets container background",
    "bitbybit.babylon.gui.container.getIsReadonly": "get is readonly",
    "bitbybit.babylon.gui.container.getIsReadonly_description": "gets container readonly",
    "bitbybit.babylon.gui.stackPanel.createStackPanel": "stack panel",
    "stackPanel": "stack panel",
    "createStackPanel": "stack panel",
    "bitbybit.babylon.gui.stackPanel.createStackPanel_description": "creates stack panel",
    "isVertical": "is vertical",
    "spacing": "spacing",
    "bitbybit.babylon.gui.stackPanel.setIsVertical": "set is vertical",
    "setIsVertical": "set is vertical",
    "bitbybit.babylon.gui.stackPanel.setIsVertical_description": "sets stack panel vertical",
    "BABYLON.GUI.StackPanel": "babylon gui stack panel",
    "bitbybit.babylon.gui.stackPanel.setSpacing": "set spacing",
    "setSpacing": "set spacing",
    "bitbybit.babylon.gui.stackPanel.setSpacing_description": "sets stack panel spacing",
    "bitbybit.babylon.gui.stackPanel.setWidth": "set width",
    "bitbybit.babylon.gui.stackPanel.setWidth_description": "sets stack panel width",
    "bitbybit.babylon.gui.stackPanel.setHeight": "set height",
    "bitbybit.babylon.gui.stackPanel.setHeight_description": "sets stack panel height",
    "bitbybit.babylon.gui.stackPanel.getIsVertical": "get is vertical",
    "getIsVertical": "get is vertical",
    "bitbybit.babylon.gui.stackPanel.getIsVertical_description": "gets stack panel vertical",
    "bitbybit.babylon.gui.stackPanel.getSpacing": "get spacing",
    "getSpacing": "get spacing",
    "bitbybit.babylon.gui.stackPanel.getSpacing_description": "gets stack panel spacing",
    "bitbybit.babylon.gui.stackPanel.getWidth": "get width",
    "bitbybit.babylon.gui.stackPanel.getWidth_description": "gets stack panel width",
    "bitbybit.babylon.gui.stackPanel.getHeight": "get height",
    "bitbybit.babylon.gui.stackPanel.getHeight_description": "gets stack panel height",
    "bitbybit.babylon.gui.button.createSimpleButton": "simple button",
    "button": "button",
    "createSimpleButton": "simple button",
    "bitbybit.babylon.gui.button.createSimpleButton_description": "creates simple button",
    "label": "label",
    "bitbybit.babylon.gui.button.setButtonText": "set button text",
    "setButtonText": "set button text",
    "bitbybit.babylon.gui.button.setButtonText_description": "sets button text",
    "BABYLON.GUI.Button": "babylon gui button",
    "text": "text",
    "bitbybit.babylon.gui.button.getButtonText": "get button text",
    "getButtonText": "get button text",
    "bitbybit.babylon.gui.button.getButtonText_description": "gets button text",
    "bitbybit.babylon.gui.slider.createSlider": "slider",
    "slider": "slider",
    "createSlider": "slider",
    "bitbybit.babylon.gui.slider.createSlider_description": "creates slider",
    "minimum": "minimum",
    "maximum": "maximum",
    "value": "value",
    "step": "step",
    "displayThumb": "display thumb",
    "bitbybit.babylon.gui.slider.changeSliderThumb": "change slider thumb",
    "changeSliderThumb": "change slider thumb",
    "bitbybit.babylon.gui.slider.changeSliderThumb_description": "changes slider thumb properties",
    "BABYLON.GUI.Slider": "babylon gui slider",
    "isThumbCircle": "is thumb circle",
    "thumbColor": "thumb color",
    "thumbWidth": "thumb width",
    "string | number": "string or number",
    "isThumbClamped": "is thumb clamped",
    "bitbybit.babylon.gui.slider.setBorderColor": "set border color",
    "setBorderColor": "set border color",
    "bitbybit.babylon.gui.slider.setBorderColor_description": "sets slider border color",
    "borderColor": "border color",
    "bitbybit.babylon.gui.slider.setBackgroundColor": "set background color",
    "setBackgroundColor": "set background color",
    "bitbybit.babylon.gui.slider.setBackgroundColor_description": "sets slider background color",
    "backgroundColor": "background color",
    "bitbybit.babylon.gui.slider.setMaximum": "set maximum",
    "setMaximum": "set maximum",
    "bitbybit.babylon.gui.slider.setMaximum_description": "sets slider maximum value",
    "bitbybit.babylon.gui.slider.setMinimum": "set minimum",
    "setMinimum": "set minimum",
    "bitbybit.babylon.gui.slider.setMinimum_description": "sets slider minimum value",
    "bitbybit.babylon.gui.slider.setStep": "set step",
    "setStep": "set step",
    "bitbybit.babylon.gui.slider.setStep_description": "sets slider step value",
    "bitbybit.babylon.gui.slider.setValue": "set value",
    "setValue": "set value",
    "bitbybit.babylon.gui.slider.setValue_description": "sets slider value",
    "bitbybit.babylon.gui.slider.createSliderObservableSelector": "slider observable selector",
    "createSliderObservableSelector": "slider observable selector",
    "bitbybit.babylon.gui.slider.createSliderObservableSelector_description": "creates observable selector for slider",
    "sliderObservableSelectorEnum": "slider observable selector enum",
    "bitbybit.babylon.gui.slider.getBorderColor": "get border color",
    "getBorderColor": "get border color",
    "bitbybit.babylon.gui.slider.getBorderColor_description": "gets slider border color",
    "bitbybit.babylon.gui.slider.getBackgroundColor": "get background color",
    "getBackgroundColor": "get background color",
    "bitbybit.babylon.gui.slider.getBackgroundColor_description": "gets slider background color",
    "bitbybit.babylon.gui.slider.getMaximum": "get maximum",
    "getMaximum": "get maximum",
    "bitbybit.babylon.gui.slider.getMaximum_description": "gets slider maximum value",
    "bitbybit.babylon.gui.slider.getMinimum": "get minimum",
    "getMinimum": "get minimum",
    "bitbybit.babylon.gui.slider.getMinimum_description": "gets slider minimum value",
    "bitbybit.babylon.gui.slider.getStep": "get step",
    "getStep": "get step",
    "bitbybit.babylon.gui.slider.getStep_description": "gets slider step value",
    "bitbybit.babylon.gui.slider.getValue": "get value",
    "getValue": "get value",
    "bitbybit.babylon.gui.slider.getValue_description": "gets slider value",
    "bitbybit.babylon.gui.slider.getThumbColor": "get thumb color",
    "getThumbColor": "get thumb color",
    "bitbybit.babylon.gui.slider.getThumbColor_description": "gets slider thumb color",
    "bitbybit.babylon.gui.slider.getThumbWidth": "get thumb width",
    "getThumbWidth": "get thumb width",
    "bitbybit.babylon.gui.slider.getThumbWidth_description": "gets slider thumb width",
    "bitbybit.babylon.gui.slider.getIsVertical": "get is vertical",
    "bitbybit.babylon.gui.slider.getIsVertical_description": "gets slider vertical",
    "bitbybit.babylon.gui.slider.getDisplayThumb": "get display thumb",
    "getDisplayThumb": "get display thumb",
    "bitbybit.babylon.gui.slider.getDisplayThumb_description": "gets slider display thumb",
    "bitbybit.babylon.gui.slider.getIsThumbCircle": "get is thumb circle",
    "getIsThumbCircle": "get is thumb circle",
    "bitbybit.babylon.gui.slider.getIsThumbCircle_description": "gets slider thumb circle",
    "bitbybit.babylon.gui.slider.getIsThumbClamped": "get is thumb clamped",
    "getIsThumbClamped": "get is thumb clamped",
    "bitbybit.babylon.gui.slider.getIsThumbClamped_description": "gets slider thumb clamped",
    "bitbybit.babylon.gui.textBlock.createTextBlock": "text block",
    "textBlock": "text block",
    "createTextBlock": "text block",
    "bitbybit.babylon.gui.textBlock.createTextBlock_description": "creates text block",
    "bitbybit.babylon.gui.textBlock.alignText": "align text",
    "alignText": "align text",
    "bitbybit.babylon.gui.textBlock.alignText_description": "sets text alignment",
    "bitbybit.babylon.gui.textBlock.setTextOutline": "set text outline",
    "setTextOutline": "set text outline",
    "bitbybit.babylon.gui.textBlock.setTextOutline_description": "sets text outline",
    "BABYLON.GUI.TextBlock": "babylon gui text block",
    "outlineWidth": "outline width",
    "outlineColor": "outline color",
    "bitbybit.babylon.gui.textBlock.setText": "set text",
    "setText": "set text",
    "bitbybit.babylon.gui.textBlock.setText_description": "sets text block text",
    "bitbybit.babylon.gui.textBlock.setRsizeToFit": "set resize to fit",
    "setRsizeToFit": "set resize to fit",
    "bitbybit.babylon.gui.textBlock.setRsizeToFit_description": "sets resize to fit",
    "resizeToFit": "resize to fit",
    "bitbybit.babylon.gui.textBlock.setTextWrapping": "set text wrapping",
    "setTextWrapping": "set text wrapping",
    "bitbybit.babylon.gui.textBlock.setTextWrapping_description": "sets text wrapping",
    "textWrapping": "text wrapping",
    "boolean | BABYLON.GUI.TextWrapping": "boolean or babylon gui text wrapping",
    "bitbybit.babylon.gui.textBlock.setLineSpacing": "set line spacing",
    "setLineSpacing": "set line spacing",
    "bitbybit.babylon.gui.textBlock.setLineSpacing_description": "sets text line spacing",
    "lineSpacing": "line spacing",
    "bitbybit.babylon.gui.textBlock.getText": "get text",
    "getText": "get text",
    "bitbybit.babylon.gui.textBlock.getText_description": "gets text block text",
    "bitbybit.babylon.gui.textBlock.getTextWrapping": "get text wrapping",
    "getTextWrapping": "get text wrapping",
    "bitbybit.babylon.gui.textBlock.getTextWrapping_description": "gets text wrapping",
    "bitbybit.babylon.gui.textBlock.getLineSpacing": "get line spacing",
    "getLineSpacing": "get line spacing",
    "bitbybit.babylon.gui.textBlock.getLineSpacing_description": "gets text line spacing",
    "bitbybit.babylon.gui.textBlock.getOutlineWidth": "get outline width",
    "getOutlineWidth": "get outline width",
    "bitbybit.babylon.gui.textBlock.getOutlineWidth_description": "gets text outline width",
    "bitbybit.babylon.gui.textBlock.getResizeToFit": "get resize to fit",
    "getResizeToFit": "get resize to fit",
    "bitbybit.babylon.gui.textBlock.getResizeToFit_description": "gets resize to fit",
    "bitbybit.babylon.gui.textBlock.getTextHorizontalAlignment": "get text horizontal alignment",
    "getTextHorizontalAlignment": "get text horizontal alignment",
    "bitbybit.babylon.gui.textBlock.getTextHorizontalAlignment_description": "gets text horizontal alignment",
    "bitbybit.babylon.gui.textBlock.getTextVerticalAlignment": "get text vertical alignment",
    "getTextVerticalAlignment": "get text vertical alignment",
    "bitbybit.babylon.gui.textBlock.getTextVerticalAlignment_description": "gets text vertical alignment",
    "bitbybit.babylon.gui.textBlock.createTextBlockObservableSelector": "text block observable selector",
    "createTextBlockObservableSelector": "text block observable selector",
    "bitbybit.babylon.gui.textBlock.createTextBlockObservableSelector_description": "creates observable selector for text block",
    "textBlockObservableSelectorEnum": "text block observable selector enum",
    "bitbybit.babylon.gui.radioButton.createRadioButton": "radio button",
    "radioButton": "radio button",
    "createRadioButton": "radio button",
    "bitbybit.babylon.gui.radioButton.createRadioButton_description": "creates radio button",
    "group": "group",
    "isChecked": "is checked",
    "checkSizeRatio": "check size ratio",
    "bitbybit.babylon.gui.radioButton.setCheckSizeRatio": "set check size ratio",
    "setCheckSizeRatio": "set check size ratio",
    "bitbybit.babylon.gui.radioButton.setCheckSizeRatio_description": "sets radio button check size ratio",
    "BABYLON.GUI.RadioButton": "babylon gui radio button",
    "bitbybit.babylon.gui.radioButton.setGroup": "set group",
    "setGroup": "set group",
    "bitbybit.babylon.gui.radioButton.setGroup_description": "sets radio button group",
    "bitbybit.babylon.gui.radioButton.setBackground": "set background",
    "bitbybit.babylon.gui.radioButton.setBackground_description": "sets radio button background",
    "bitbybit.babylon.gui.radioButton.getCheckSizeRatio": "get check size ratio",
    "getCheckSizeRatio": "get check size ratio",
    "bitbybit.babylon.gui.radioButton.getCheckSizeRatio_description": "gets radio button check size ratio",
    "bitbybit.babylon.gui.radioButton.getGroup": "get group",
    "getGroup": "get group",
    "bitbybit.babylon.gui.radioButton.getGroup_description": "gets radio button group",
    "bitbybit.babylon.gui.radioButton.getBackground": "get background",
    "bitbybit.babylon.gui.radioButton.getBackground_description": "gets radio button background",
    "bitbybit.babylon.gui.radioButton.createRadioButtonObservableSelector": "radio button observable selector",
    "createRadioButtonObservableSelector": "radio button observable selector",
    "bitbybit.babylon.gui.radioButton.createRadioButtonObservableSelector_description": "creates observable selector for radio button",
    "radioButtonObservableSelectorEnum": "radio button observable selector enum",
    "bitbybit.babylon.gui.checkbox.createCheckbox": "checkbox",
    "checkbox": "checkbox",
    "createCheckbox": "checkbox",
    "bitbybit.babylon.gui.checkbox.createCheckbox_description": "creates checkbox",
    "bitbybit.babylon.gui.checkbox.setBackground": "set background",
    "bitbybit.babylon.gui.checkbox.setBackground_description": "sets checkbox background",
    "BABYLON.GUI.Checkbox": "babylon gui checkbox",
    "bitbybit.babylon.gui.checkbox.setCheckSizeRatio": "set check size ratio",
    "bitbybit.babylon.gui.checkbox.setCheckSizeRatio_description": "sets checkbox check size ratio",
    "bitbybit.babylon.gui.checkbox.setIsChecked": "set is checked",
    "setIsChecked": "set is checked",
    "bitbybit.babylon.gui.checkbox.setIsChecked_description": "sets checkbox checked",
    "bitbybit.babylon.gui.checkbox.getCheckSizeRatio": "get check size ratio",
    "bitbybit.babylon.gui.checkbox.getCheckSizeRatio_description": "gets checkbox check size ratio",
    "bitbybit.babylon.gui.checkbox.getIsChecked": "get is checked",
    "getIsChecked": "get is checked",
    "bitbybit.babylon.gui.checkbox.getIsChecked_description": "gets checkbox checked",
    "bitbybit.babylon.gui.checkbox.getBackground": "get background",
    "bitbybit.babylon.gui.checkbox.getBackground_description": "gets checkbox background",
    "bitbybit.babylon.gui.checkbox.createCheckboxObservableSelector": "checkbox observable selector",
    "createCheckboxObservableSelector": "checkbox observable selector",
    "bitbybit.babylon.gui.checkbox.createCheckboxObservableSelector_description": "creates observable selector for checkbox",
    "checkboxObservableSelectorEnum": "checkbox observable selector enum",
    "bitbybit.babylon.gui.inputText.createInputText": "input text",
    "inputText": "input text",
    "createInputText": "input text",
    "bitbybit.babylon.gui.inputText.createInputText_description": "creates input text",
    "placeholder": "placeholder",
    "bitbybit.babylon.gui.inputText.setBackground": "set background",
    "bitbybit.babylon.gui.inputText.setBackground_description": "sets input text background",
    "BABYLON.GUI.InputText": "babylon gui input text",
    "bitbybit.babylon.gui.inputText.setText": "set text",
    "bitbybit.babylon.gui.inputText.setText_description": "sets input text",
    "bitbybit.babylon.gui.inputText.setPlaceholder": "set placeholder",
    "setPlaceholder": "set placeholder",
    "bitbybit.babylon.gui.inputText.setPlaceholder_description": "sets input text placeholder",
    "bitbybit.babylon.gui.inputText.getBackground": "get background",
    "bitbybit.babylon.gui.inputText.getBackground_description": "gets input text background",
    "bitbybit.babylon.gui.inputText.getText": "get text",
    "bitbybit.babylon.gui.inputText.getText_description": "gets input text",
    "bitbybit.babylon.gui.inputText.getPlaceholder": "get placeholder",
    "getPlaceholder": "get placeholder",
    "bitbybit.babylon.gui.inputText.getPlaceholder_description": "gets input text placeholder",
    "bitbybit.babylon.gui.inputText.createInputTextObservableSelector": "input text observable selector",
    "createInputTextObservableSelector": "input text observable selector",
    "bitbybit.babylon.gui.inputText.createInputTextObservableSelector_description": "creates observable selector for input text",
    "inputTextObservableSelectorEnum": "input text observable selector enum",
    "bitbybit.babylon.gui.colorPicker.createColorPicker": "color picker",
    "colorPicker": "color picker",
    "createColorPicker": "color picker",
    "bitbybit.babylon.gui.colorPicker.createColorPicker_description": "creates color picker",
    "defaultColor": "default color",
    "bitbybit.babylon.gui.colorPicker.setColorPickerValue": "set color picker value",
    "setColorPickerValue": "set color picker value",
    "bitbybit.babylon.gui.colorPicker.setColorPickerValue_description": "sets color picker value",
    "BABYLON.GUI.ColorPicker": "babylon gui color picker",
    "bitbybit.babylon.gui.colorPicker.setColorPickerSize": "set color picker size",
    "setColorPickerSize": "set color picker size",
    "bitbybit.babylon.gui.colorPicker.setColorPickerSize_description": "sets color picker size",
    "bitbybit.babylon.gui.colorPicker.getColorPickerValue": "get color picker value",
    "getColorPickerValue": "get color picker value",
    "bitbybit.babylon.gui.colorPicker.getColorPickerValue_description": "gets color picker value",
    "bitbybit.babylon.gui.colorPicker.getColorPickerSize": "get color picker size",
    "getColorPickerSize": "get color picker size",
    "bitbybit.babylon.gui.colorPicker.getColorPickerSize_description": "gets color picker size",
    "bitbybit.babylon.gui.colorPicker.createColorPickerObservableSelector": "color picker observable selector",
    "createColorPickerObservableSelector": "color picker observable selector",
    "bitbybit.babylon.gui.colorPicker.createColorPickerObservableSelector_description": "creates observable selector for color picker",
    "colorPickerObservableSelectorEnum": "color picker observable selector enum",
    "bitbybit.babylon.gui.image.createImage": "image",
    "image": "image",
    "createImage": "image",
    "bitbybit.babylon.gui.image.createImage_description": "creates image",
    "bitbybit.babylon.gui.image.setSourceUrl": "set source url",
    "setSourceUrl": "set source url",
    "bitbybit.babylon.gui.image.setSourceUrl_description": "sets image source url",
    "BABYLON.GUI.Image": "babylon gui image",
    "bitbybit.babylon.gui.image.getSourceUrl": "get source url",
    "getSourceUrl": "get source url",
    "bitbybit.babylon.gui.image.getSourceUrl_description": "gets image source url",
    "bitbybit.babylon.gizmo.manager.createGizmoManager": "gizmo manager",
    "gizmo": "gizmo",
    "manager": "manager",
    "createGizmoManager": "gizmo manager",
    "bitbybit.babylon.gizmo.manager.createGizmoManager_description": "creates gizmo manager",
    "positionGizmoEnabled": "position gizmo enabled",
    "rotationGizmoEnabled": "rotation gizmo enabled",
    "scaleGizmoEnabled": "scale gizmo enabled",
    "boundingBoxGizmoEnabled": "bounding box gizmo enabled",
    "usePointerToAttachGizmos": "use pointer to attach gizmos",
    "clearGizmoOnEmptyPointerEvent": "clear gizmo on empty pointer event",
    "scaleRatio": "scale ratio",
    "attachableMeshes": "attachable meshes",
    "BABYLON.AbstractMesh[]": "babylon abstract mesh array",
    "bitbybit.babylon.gizmo.manager.getPositionGizmo": "get position gizmo",
    "getPositionGizmo": "get position gizmo",
    "bitbybit.babylon.gizmo.manager.getPositionGizmo_description": "gets position gizmo",
    "gizmoManager": "gizmo manager",
    "BABYLON.GizmoManager": "babylon gizmo manager",
    "bitbybit.babylon.gizmo.manager.getRotationGizmo": "get rotation gizmo",
    "getRotationGizmo": "get rotation gizmo",
    "bitbybit.babylon.gizmo.manager.getRotationGizmo_description": "gets rotation gizmo",
    "bitbybit.babylon.gizmo.manager.getScaleGizmo": "get scale gizmo",
    "getScaleGizmo": "get scale gizmo",
    "bitbybit.babylon.gizmo.manager.getScaleGizmo_description": "gets scale gizmo",
    "bitbybit.babylon.gizmo.manager.getBoundingBoxGizmo": "get bounding box gizmo",
    "getBoundingBoxGizmo": "get bounding box gizmo",
    "bitbybit.babylon.gizmo.manager.getBoundingBoxGizmo_description": "gets bounding box gizmo",
    "bitbybit.babylon.gizmo.manager.attachToMesh": "attach to mesh",
    "attachToMesh": "attach to mesh",
    "bitbybit.babylon.gizmo.manager.attachToMesh_description": "attaches gizmo manager to mesh",
    "update": "update",
    "bitbybit.babylon.gizmo.manager.detachMesh": "detach mesh",
    "detachMesh": "detach mesh",
    "bitbybit.babylon.gizmo.manager.detachMesh_description": "detaches gizmo manager from mesh",
    "bitbybit.babylon.gizmo.base.scaleRatio": "set scale ratio",
    "base": "base",
    "bitbybit.babylon.gizmo.base.scaleRatio_description": "sets gizmo scale ratio",
    "BABYLON.IGizmo": "babylon i gizmo",
    "bitbybit.babylon.gizmo.base.getScaleRatio": "get scale ratio",
    "getScaleRatio": "get scale ratio",
    "bitbybit.babylon.gizmo.base.getScaleRatio_description": "gets gizmo scale ratio",
    "bitbybit.babylon.gizmo.positionGizmo.planarGizmoEnabled": "set planar gizmo enabled",
    "positionGizmo": "position gizmo",
    "planarGizmoEnabled": "planar gizmo enabled",
    "bitbybit.babylon.gizmo.positionGizmo.planarGizmoEnabled_description": "sets planar gizmo enabled",
    "BABYLON.IPositionGizmo": "babylon i position gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.snapDistance": "set snap distance",
    "snapDistance": "snap distance",
    "bitbybit.babylon.gizmo.positionGizmo.snapDistance_description": "sets position gizmo snap distance",
    "bitbybit.babylon.gizmo.positionGizmo.getAttachedMesh": "get attached mesh",
    "getAttachedMesh": "get attached mesh",
    "bitbybit.babylon.gizmo.positionGizmo.getAttachedMesh_description": "gets attached mesh",
    "bitbybit.babylon.gizmo.positionGizmo.getAttachedNode": "get attached node",
    "getAttachedNode": "get attached node",
    "bitbybit.babylon.gizmo.positionGizmo.getAttachedNode_description": "gets attached node",
    "bitbybit.babylon.gizmo.positionGizmo.getXGizmo": "get x gizmo",
    "getXGizmo": "get x gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getXGizmo_description": "gets x gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getYGizmo": "get y gizmo",
    "getYGizmo": "get y gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getYGizmo_description": "gets y gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getZGizmo": "get z gizmo",
    "getZGizmo": "get z gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getZGizmo_description": "gets z gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getXPlaneGizmo": "get x plane gizmo",
    "getXPlaneGizmo": "get x plane gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getXPlaneGizmo_description": "gets x plane gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getYPlaneGizmo": "get y plane gizmo",
    "getYPlaneGizmo": "get y plane gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getYPlaneGizmo_description": "gets y plane gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getZPlaneGizmo": "get z plane gizmo",
    "getZPlaneGizmo": "get z plane gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getZPlaneGizmo_description": "gets z plane gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getPlanarGizmoEnabled": "get planar gizmo enabled",
    "getPlanarGizmoEnabled": "get planar gizmo enabled",
    "bitbybit.babylon.gizmo.positionGizmo.getPlanarGizmoEnabled_description": "gets planar gizmo enabled",
    "bitbybit.babylon.gizmo.positionGizmo.getSnapDistance": "get snap distance",
    "getSnapDistance": "get snap distance",
    "bitbybit.babylon.gizmo.positionGizmo.getSnapDistance_description": "gets snap distance",
    "bitbybit.babylon.gizmo.positionGizmo.getIsDragging": "get is dragging",
    "getIsDragging": "get is dragging",
    "bitbybit.babylon.gizmo.positionGizmo.getIsDragging_description": "gets dragging state",
    "bitbybit.babylon.gizmo.positionGizmo.createPositionGizmoObservableSelector": "position gizmo observable selector",
    "createPositionGizmoObservableSelector": "position gizmo observable selector",
    "bitbybit.babylon.gizmo.positionGizmo.createPositionGizmoObservableSelector_description": "creates observable selector for position gizmo",
    "positionGizmoObservableSelectorEnum": "position gizmo observable selector enum",
    "bitbybit.babylon.gizmo.rotationGizmo.snapDistance": "set snap distance",
    "rotationGizmo": "rotation gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.snapDistance_description": "sets rotation gizmo snap distance",
    "BABYLON.IRotationGizmo": "babylon i rotation gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.sensitivity": "set sensitivity",
    "sensitivity": "sensitivity",
    "bitbybit.babylon.gizmo.rotationGizmo.sensitivity_description": "sets rotation gizmo sensitivity",
    "bitbybit.babylon.gizmo.rotationGizmo.getAttachedMesh": "get attached mesh",
    "bitbybit.babylon.gizmo.rotationGizmo.getAttachedMesh_description": "gets attached mesh",
    "bitbybit.babylon.gizmo.rotationGizmo.getAttachedNode": "get attached node",
    "bitbybit.babylon.gizmo.rotationGizmo.getAttachedNode_description": "gets attached node",
    "bitbybit.babylon.gizmo.rotationGizmo.getXGizmo": "get x gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getXGizmo_description": "gets x gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getYGizmo": "get y gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getYGizmo_description": "gets y gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getZGizmo": "get z gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getZGizmo_description": "gets z gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getSnapDistance": "get snap distance",
    "bitbybit.babylon.gizmo.rotationGizmo.getSnapDistance_description": "gets snap distance",
    "bitbybit.babylon.gizmo.rotationGizmo.getSensitivity": "get sensitivity",
    "getSensitivity": "get sensitivity",
    "bitbybit.babylon.gizmo.rotationGizmo.getSensitivity_description": "gets sensitivity",
    "bitbybit.babylon.gizmo.rotationGizmo.createRotationGizmoObservableSelector": "rotation gizmo observable selector",
    "createRotationGizmoObservableSelector": "rotation gizmo observable selector",
    "bitbybit.babylon.gizmo.rotationGizmo.createRotationGizmoObservableSelector_description": "creates observable selector for rotation gizmo",
    "rotationGizmoObservableSelectorEnum": "rotation gizmo observable selector enum",
    "bitbybit.babylon.gizmo.scaleGizmo.getXGizmo": "get x gizmo",
    "scaleGizmo": "scale gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getXGizmo_description": "gets x gizmo",
    "BABYLON.IScaleGizmo": "babylon i scale gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getYGizmo": "get y gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getYGizmo_description": "gets y gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getZGizmo": "get z gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getZGizmo_description": "gets z gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.snapDistance": "set snap distance",
    "bitbybit.babylon.gizmo.scaleGizmo.snapDistance_description": "sets scale gizmo snap distance",
    "bitbybit.babylon.gizmo.scaleGizmo.setIncrementalSnap": "set incremental snap",
    "setIncrementalSnap": "set incremental snap",
    "bitbybit.babylon.gizmo.scaleGizmo.setIncrementalSnap_description": "sets scale gizmo incremental snap",
    "incrementalSnap": "incremental snap",
    "bitbybit.babylon.gizmo.scaleGizmo.sensitivity": "set sensitivity",
    "bitbybit.babylon.gizmo.scaleGizmo.sensitivity_description": "sets scale gizmo sensitivity",
    "bitbybit.babylon.gizmo.scaleGizmo.getIncrementalSnap": "get incremental snap",
    "getIncrementalSnap": "get incremental snap",
    "bitbybit.babylon.gizmo.scaleGizmo.getIncrementalSnap_description": "gets incremental snap",
    "bitbybit.babylon.gizmo.scaleGizmo.getSnapDistance": "get snap distance",
    "bitbybit.babylon.gizmo.scaleGizmo.getSnapDistance_description": "gets snap distance",
    "bitbybit.babylon.gizmo.scaleGizmo.getSensitivity": "get sensitivity",
    "bitbybit.babylon.gizmo.scaleGizmo.getSensitivity_description": "gets sensitivity",
    "bitbybit.babylon.gizmo.scaleGizmo.createScaleGizmoObservableSelector": "scale gizmo observable selector",
    "createScaleGizmoObservableSelector": "scale gizmo observable selector",
    "bitbybit.babylon.gizmo.scaleGizmo.createScaleGizmoObservableSelector_description": "creates observable selector for scale gizmo",
    "scaleGizmoObservableSelectorEnum": "scale gizmo observable selector enum",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setRotationSphereSize": "set rotation sphere size",
    "boundingBoxGizmo": "bounding box gizmo",
    "setRotationSphereSize": "set rotation sphere size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setRotationSphereSize_description": "sets bounding box gizmo rotation sphere size",
    "BABYLON.BoundingBoxGizmo": "babylon bounding box gizmo",
    "rotationSphereSize": "rotation sphere size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshScreenSize": "set fixed drag mesh screen size",
    "setFixedDragMeshScreenSize": "set fixed drag mesh screen size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshScreenSize_description": "sets fixed drag mesh screen size for consistent scaling",
    "fixedDragMeshScreenSize": "fixed drag mesh screen size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshBoundsSize": "set fixed drag mesh bounds size",
    "setFixedDragMeshBoundsSize": "set fixed drag mesh bounds size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshBoundsSize_description": "sets fixed drag mesh bounds size",
    "fixedDragMeshBoundsSize": "fixed drag mesh bounds size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshScreenSizeDistanceFactor": "set fixed drag mesh screen size distance factor",
    "setFixedDragMeshScreenSizeDistanceFactor": "set fixed drag mesh screen size distance factor",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshScreenSizeDistanceFactor_description": "sets distance factor for fixed drag mesh screen size",
    "fixedDragMeshScreenSizeDistanceFactor": "fixed drag mesh screen size distance factor",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScalingSnapDistance": "set scaling snap distance",
    "setScalingSnapDistance": "set scaling snap distance",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScalingSnapDistance_description": "sets bounding box gizmo scaling snap distance",
    "scalingSnapDistance": "scaling snap distance",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setRotationSnapDistance": "set rotation snap distance",
    "setRotationSnapDistance": "set rotation snap distance",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setRotationSnapDistance_description": "sets bounding box gizmo rotation snap distance",
    "rotationSnapDistance": "rotation snap distance",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScaleBoxSize": "set scale box size",
    "setScaleBoxSize": "set scale box size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScaleBoxSize_description": "sets bounding box gizmo scale box size",
    "scaleBoxSize": "scale box size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setIncrementalSnap": "set incremental snap",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setIncrementalSnap_description": "sets bounding box gizmo incremental snap",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScalePivot": "set scale pivot",
    "setScalePivot": "set scale pivot",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScalePivot_description": "sets bounding box gizmo scale pivot",
    "scalePivot": "scale pivot",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setAxisFactor": "set axis factor",
    "setAxisFactor": "set axis factor",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setAxisFactor_description": "sets bounding box gizmo axis factor",
    "axisFactor": "axis factor",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScaleDragSpeed": "set scale drag speed",
    "setScaleDragSpeed": "set scale drag speed",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScaleDragSpeed_description": "sets bounding box gizmo scale drag speed",
    "scaleDragSpeed": "scale drag speed",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getRotationSphereSize": "get rotation sphere size",
    "getRotationSphereSize": "get rotation sphere size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getRotationSphereSize_description": "gets rotation sphere size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScaleBoxSize": "get scale box size",
    "getScaleBoxSize": "get scale box size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScaleBoxSize_description": "gets scale box size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshScreenSize": "get fixed drag mesh screen size",
    "getFixedDragMeshScreenSize": "get fixed drag mesh screen size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshScreenSize_description": "gets fixed drag mesh screen size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshBoundsSize": "get fixed drag mesh bounds size",
    "getFixedDragMeshBoundsSize": "get fixed drag mesh bounds size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshBoundsSize_description": "gets fixed drag mesh bounds size",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshScreenSizeDistanceFactor": "get fixed drag mesh screen size distance factor",
    "getFixedDragMeshScreenSizeDistanceFactor": "get fixed drag mesh screen size distance factor",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshScreenSizeDistanceFactor_description": "gets fixed drag mesh screen size distance factor",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScalingSnapDistance": "get scaling snap distance",
    "getScalingSnapDistance": "get scaling snap distance",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScalingSnapDistance_description": "gets scaling snap distance",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getRotationSnapDistance": "get rotation snap distance",
    "getRotationSnapDistance": "get rotation snap distance",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getRotationSnapDistance_description": "gets rotation snap distance",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getIncrementalSnap": "get incremental snap",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getIncrementalSnap_description": "gets incremental snap",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScalePivot": "get scale pivot",
    "getScalePivot": "get scale pivot",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScalePivot_description": "gets scale pivot",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getAxisFactor": "get axis factor",
    "getAxisFactor": "get axis factor",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getAxisFactor_description": "gets axis factor",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScaleDragSpeed": "get scale drag speed",
    "getScaleDragSpeed": "get scale drag speed",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScaleDragSpeed_description": "gets scale drag speed",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.createBoundingBoxGizmoObservableSelector": "bounding box gizmo observable selector",
    "createBoundingBoxGizmoObservableSelector": "bounding box gizmo observable selector",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.createBoundingBoxGizmoObservableSelector_description": "creates observable selector for bounding box gizmo",
    "boundingBoxGizmoObservableSelectorEnum": "bounding box gizmo observable selector enum",
    "bitbybit.babylon.gizmo.axisDragGizmo.setIsEnabled": "set is enabled",
    "axisDragGizmo": "axis drag gizmo",
    "bitbybit.babylon.gizmo.axisDragGizmo.setIsEnabled_description": "sets axis enabled",
    "BABYLON.IAxisDragGizmo": "babylon i axis drag gizmo",
    "bitbybit.babylon.gizmo.axisDragGizmo.getIsEnabled": "get is enabled",
    "bitbybit.babylon.gizmo.axisDragGizmo.getIsEnabled_description": "gets axis enabled",
    "bitbybit.babylon.gizmo.axisScaleGizmo.setIsEnabled": "set is enabled",
    "axisScaleGizmo": "axis scale gizmo",
    "bitbybit.babylon.gizmo.axisScaleGizmo.setIsEnabled_description": "sets axis enabled",
    "BABYLON.IAxisScaleGizmo": "babylon i axis scale gizmo",
    "bitbybit.babylon.gizmo.axisScaleGizmo.getIsEnabled": "get is enabled",
    "bitbybit.babylon.gizmo.axisScaleGizmo.getIsEnabled_description": "gets axis enabled",
    "bitbybit.babylon.gizmo.planeDragGizmo.setIsEnabled": "set is enabled",
    "planeDragGizmo": "plane drag gizmo",
    "bitbybit.babylon.gizmo.planeDragGizmo.setIsEnabled_description": "sets plane enabled",
    "BABYLON.IPlaneDragGizmo": "babylon i plane drag gizmo",
    "bitbybit.babylon.gizmo.planeDragGizmo.getIsEnabled": "get is enabled",
    "bitbybit.babylon.gizmo.planeDragGizmo.getIsEnabled_description": "gets plane enabled",
    "bitbybit.babylon.gizmo.planeRotationGizmo.setIsEnabled": "set is enabled",
    "planeRotationGizmo": "plane rotation gizmo",
    "bitbybit.babylon.gizmo.planeRotationGizmo.setIsEnabled_description": "sets plane enabled",
    "BABYLON.IPlaneRotationGizmo": "babylon i plane rotation gizmo",
    "bitbybit.babylon.gizmo.planeRotationGizmo.getIsEnabled": "get is enabled",
    "bitbybit.babylon.gizmo.planeRotationGizmo.getIsEnabled_description": "gets plane enabled",
    "bitbybit.vector.removeAllDuplicateVectors": "remove all duplicate vectors",
    "vector": "vector",
    "removeAllDuplicateVectors": "remove all duplicate vectors",
    "bitbybit.vector.removeAllDuplicateVectors_description": "removes all duplicate vectors from array",
    "remove": "remove",
    "vectors": "vectors",
    "number[][]": "number array array",
    "tolerance": "tolerance",
    "bitbybit.vector.removeConsecutiveDuplicateVectors": "remove consecutive duplicate vectors",
    "removeConsecutiveDuplicateVectors": "remove consecutive duplicate vectors",
    "bitbybit.vector.removeConsecutiveDuplicateVectors_description": "removes consecutive duplicate vectors from array",
    "checkFirstAndLast": "check first and last",
    "bitbybit.vector.angleBetween": "angle between",
    "angleBetween": "angle between",
    "bitbybit.vector.angleBetween_description": "measures angle between two vectors in degrees",
    "angles": "angles",
    "first": "first",
    "second": "second",
    "bitbybit.vector.angleBetweenNormalized2d": "angle between normalized 2d",
    "angleBetweenNormalized2d": "angle between normalized 2d",
    "bitbybit.vector.angleBetweenNormalized2d_description": "measures normalized 2d angle between two vectors in degrees",
    "bitbybit.vector.positiveAngleBetween": "positive angle between",
    "positiveAngleBetween": "positive angle between",
    "bitbybit.vector.positiveAngleBetween_description": "measures positive angle between two vectors with reference in degrees",
    "reference": "reference",
    "bitbybit.vector.addAll": "add all",
    "addAll": "add all",
    "bitbybit.vector.addAll_description": "adds all vector xyz values into new vector",
    "sum": "sum",
    "bitbybit.vector.add": "add",
    "add": "add",
    "bitbybit.vector.add_description": "adds two vectors",
    "bitbybit.vector.all": "all",
    "all": "all",
    "bitbybit.vector.all_description": "checks if boolean array is all true",
    "boolean[]": "boolean array",
    "bitbybit.vector.cross": "cross",
    "cross": "cross",
    "bitbybit.vector.cross_description": "crosses two vectors",
    "bitbybit.vector.distSquared": "dist squared",
    "distSquared": "dist squared",
    "bitbybit.vector.distSquared_description": "squared distance between two vectors",
    "bitbybit.vector.dist": "dist",
    "dist": "dist",
    "bitbybit.vector.dist_description": "distance between two vectors",
    "bitbybit.vector.div": "div",
    "div": "div",
    "bitbybit.vector.div_description": "divides vector by scalar",
    "scalar": "scalar",
    "bitbybit.vector.domain": "domain",
    "domain": "domain",
    "bitbybit.vector.domain_description": "computes domain between vector min and max",
    "bitbybit.vector.dot": "dot",
    "dot": "dot",
    "bitbybit.vector.dot_description": "dot product of two vectors",
    "bitbybit.vector.finite": "finite",
    "finite": "finite",
    "bitbybit.vector.finite_description": "checks if vector numbers are finite",
    "validate": "validate",
    "bitbybit.vector.isZero": "is zero",
    "isZero": "is zero",
    "bitbybit.vector.isZero_description": "checks if vector length is zero",
    "bitbybit.vector.lerp": "lerp",
    "lerp": "lerp",
    "bitbybit.vector.lerp_description": "finds vector between two vectors by fraction",
    "fraction": "fraction",
    "bitbybit.vector.max": "max",
    "max": "max",
    "bitbybit.vector.max_description": "finds maximum value in vector",
    "extract": "extract",
    "bitbybit.vector.min": "min",
    "min": "min",
    "bitbybit.vector.min_description": "finds minimum value in vector",
    "bitbybit.vector.mul": "mul",
    "mul": "mul",
    "bitbybit.vector.mul_description": "multiplies vector by scalar",
    "bitbybit.vector.neg": "neg",
    "neg": "neg",
    "bitbybit.vector.neg_description": "negates vector",
    "bitbybit.vector.normSquared": "norm squared",
    "normSquared": "norm squared",
    "bitbybit.vector.normSquared_description": "computes squared norm",
    "bitbybit.vector.norm": "norm",
    "norm": "norm",
    "bitbybit.vector.norm_description": "computes vector norm",
    "bitbybit.vector.normalized": "normalized",
    "normalized": "normalized",
    "bitbybit.vector.normalized_description": "normalizes vector to unit length",
    "bitbybit.vector.onRay": "on ray",
    "onRay": "on ray",
    "bitbybit.vector.onRay_description": "finds point on ray at given distance",
    "bitbybit.vector.vectorXYZ": "vector xyz",
    "vectorXYZ": "vector xyz",
    "bitbybit.vector.vectorXYZ_description": "creates xyz vector",
    "x": "x",
    "y": "y",
    "z": "z",
    "bitbybit.vector.vectorXY": "vector xy",
    "vectorXY": "vector xy",
    "bitbybit.vector.vectorXY_description": "creates 2d xy vector",
    "bitbybit.vector.range": "range",
    "range": "range",
    "bitbybit.vector.range_description": "creates integer vector from 0 to max",
    "bitbybit.vector.signedAngleBetween": "signed angle between",
    "signedAngleBetween": "signed angle between",
    "bitbybit.vector.signedAngleBetween_description": "computes signed angle between two vectors with reference",
    "bitbybit.vector.span": "span",
    "span": "span",
    "bitbybit.vector.span_description": "creates vector spanning min to max with step",
    "bitbybit.vector.spanEaseItems": "span ease items",
    "spanEaseItems": "span ease items",
    "bitbybit.vector.spanEaseItems_description": "creates vector spanning min to max with ease function",
    "nrItems": "nr items",
    "ease": "ease",
    "Math.easeEnum": "math ease enum",
    "intervals": "intervals",
    "bitbybit.vector.spanLinearItems": "span linear items",
    "spanLinearItems": "span linear items",
    "bitbybit.vector.spanLinearItems_description": "creates vector spanning min to max with item count",
    "bitbybit.vector.sub": "sub",
    "sub": "sub",
    "bitbybit.vector.sub_description": "subtracts two vectors",
    "bitbybit.vector.sum": "sum",
    "bitbybit.vector.sum_description": "sums vector values",
    "bitbybit.point.transformPoint": "transform point",
    "transformPoint": "transform point",
    "bitbybit.point.transformPoint_description": "transforms single point",
    "transformation": "transformation",
    "Base.TransformMatrixes": "base transform matrixes",
    "bitbybit.point.transformPoints": "transform points",
    "transformPoints": "transform points",
    "bitbybit.point.transformPoints_description": "transforms multiple points",
    "points": "points",
    "bitbybit.point.transformsForPoints": "transforms for points",
    "transformsForPoints": "transforms for points",
    "bitbybit.point.transformsForPoints_description": "transforms multiple points with multiple transformations",
    "Base.TransformMatrixes[]": "base transform matrixes array",
    "bitbybit.point.translatePoints": "translate points",
    "translatePoints": "translate points",
    "bitbybit.point.translatePoints_description": "translates multiple points",
    "bitbybit.point.translatePointsWithVectors": "translate points with vectors",
    "translatePointsWithVectors": "translate points with vectors",
    "bitbybit.point.translatePointsWithVectors_description": "translates multiple points with vectors",
    "bitbybit.point.translateXYZPoints": "translate xyz points",
    "translateXYZPoints": "translate xyz points",
    "bitbybit.point.translateXYZPoints_description": "translates multiple points by xyz values",
    "bitbybit.point.scalePointsCenterXYZ": "scale points center xyz",
    "scalePointsCenterXYZ": "scale points center xyz",
    "bitbybit.point.scalePointsCenterXYZ_description": "scales multiple points from center with xyz factors",
    "bitbybit.point.rotatePointsCenterAxis": "rotate points center axis",
    "rotatePointsCenterAxis": "rotate points center axis",
    "bitbybit.point.rotatePointsCenterAxis_description": "rotates multiple points around center and axis",
    "bitbybit.point.closestPointFromPointsDistance": "closest point from points distance",
    "closestPointFromPointsDistance": "closest point from points distance",
    "bitbybit.point.closestPointFromPointsDistance_description": "measures closest distance to points",
    "bitbybit.point.closestPointFromPointsIndex": "closest point from points index",
    "closestPointFromPointsIndex": "closest point from points index",
    "bitbybit.point.closestPointFromPointsIndex_description": "finds closest point index starting at 1",
    "bitbybit.point.closestPointFromPoints": "closest point from points",
    "closestPointFromPoints": "closest point from points",
    "bitbybit.point.closestPointFromPoints_description": "finds closest point in collection",
    "bitbybit.point.distance": "distance",
    "bitbybit.point.distance_description": "measures distance between two points",
    "measure": "measure",
    "startPoint": "start point",
    "endPoint": "end point",
    "bitbybit.point.distancesToPoints": "distances to points",
    "distancesToPoints": "distances to points",
    "bitbybit.point.distancesToPoints_description": "measures distances from start to multiple end points",
    "endPoints": "end points",
    "bitbybit.point.multiplyPoint": "multiply point",
    "multiplyPoint": "multiply point",
    "bitbybit.point.multiplyPoint_description": "multiplies point by amount",
    "amountOfPoints": "amount of points",
    "bitbybit.point.getX": "get x",
    "getX": "get x",
    "bitbybit.point.getX_description": "gets point x coordinate",
    "bitbybit.point.getY": "get y",
    "getY": "get y",
    "bitbybit.point.getY_description": "gets point y coordinate",
    "bitbybit.point.getZ": "get z",
    "getZ": "get z",
    "bitbybit.point.getZ_description": "gets point z coordinate",
    "bitbybit.point.averagePoint": "average point",
    "averagePoint": "average point",
    "bitbybit.point.averagePoint_description": "gets average point of points",
    "bitbybit.point.pointXYZ": "point xyz",
    "pointXYZ": "point xyz",
    "bitbybit.point.pointXYZ_description": "creates xyz point",
    "bitbybit.point.pointXY": "point xy",
    "pointXY": "point xy",
    "bitbybit.point.pointXY_description": "creates xy point",
    "bitbybit.point.spiral": "spiral",
    "spiral": "spiral",
    "bitbybit.point.spiral_description": "creates spiral from multiple points",
    "phi": "phi",
    "numberPoints": "number points",
    "widening": "widening",
    "factor": "factor",
    "bitbybit.point.hexGrid": "hex grid",
    "hexGrid": "hex grid",
    "bitbybit.point.hexGrid_description": "creates flat hex grid on xy plane",
    "nrHexagonsY": "nr hexagons y",
    "nrHexagonsX": "nr hexagons x",
    "radiusHexagon": "radius hexagon",
    "orientOnCenter": "orient on center",
    "pointsOnGround": "points on ground",
    "bitbybit.point.removeConsecutiveDuplicates": "remove consecutive duplicates",
    "removeConsecutiveDuplicates": "remove consecutive duplicates",
    "bitbybit.point.removeConsecutiveDuplicates_description": "removes consecutive duplicates from point array",
    "clean": "clean",
    "bitbybit.line.convertToNurbsCurve": "convert to nurbs curve",
    "line": "line",
    "convertToNurbsCurve": "convert to nurbs curve",
    "bitbybit.line.convertToNurbsCurve_description": "converts line to nurbs curve",
    "LinePointsDto": "line points dto",
    "bitbybit.line.convertLinesToNurbsCurves": "convert lines to nurbs curves",
    "convertLinesToNurbsCurves": "convert lines to nurbs curves",
    "bitbybit.line.convertLinesToNurbsCurves_description": "converts lines to nurbs curves array",
    "lines": "lines",
    "LinePointsDto[]": "line points dto array",
    "bitbybit.line.getStartPoint": "get start point",
    "getStartPoint": "get start point",
    "bitbybit.line.getStartPoint_description": "gets line start point",
    "bitbybit.line.getEndPoint": "get end point",
    "getEndPoint": "get end point",
    "bitbybit.line.getEndPoint_description": "gets line end point",
    "bitbybit.line.length": "length",
    "bitbybit.line.length_description": "gets line length",
    "bitbybit.line.reverse": "reverse line",
    "reverse": "reverse",
    "bitbybit.line.reverse_description": "reverses line endpoints",
    "bitbybit.line.transformLine": "transform line",
    "transformLine": "transform line",
    "bitbybit.line.transformLine_description": "transforms line",
    "bitbybit.line.transformsForLines": "transforms for lines",
    "transformsForLines": "transforms for lines",
    "bitbybit.line.transformsForLines_description": "transforms multiple lines",
    "bitbybit.line.create": "line",
    "bitbybit.line.create_description": "creates line",
    "bitbybit.line.createAsync": "async",
    "createAsync": "async",
    "bitbybit.line.createAsync_description": "creates line from async points",
    "bitbybit.line.getPointOnLine": "get point on line",
    "getPointOnLine": "get point on line",
    "bitbybit.line.getPointOnLine_description": "gets point on line at param",
    "param": "param",
    "bitbybit.line.linesBetweenPoints": "lines between points",
    "linesBetweenPoints": "lines between points",
    "bitbybit.line.linesBetweenPoints_description": "creates line segments between points",
    "bitbybit.line.linesBetweenStartAndEndPoints": "lines between start and end points",
    "linesBetweenStartAndEndPoints": "lines between start and end points",
    "bitbybit.line.linesBetweenStartAndEndPoints_description": "creates lines between start and end point lists",
    "startPoints": "start points",
    "bitbybit.line.linesBetweenStartAndEndPointsAsync": "lines between start and end points async",
    "linesBetweenStartAndEndPointsAsync": "lines between start and end points async",
    "bitbybit.line.linesBetweenStartAndEndPointsAsync_description": "creates lines between start and end points with async inputs",
    "bitbybit.polyline.convertToNurbsCurve": "convert to nurbs curve",
    "polyline": "polyline",
    "bitbybit.polyline.convertToNurbsCurve_description": "converts polyline to nurbs curve",
    "PolylinePropertiesDto": "polyline properties dto",
    "bitbybit.polyline.length": "length",
    "bitbybit.polyline.length_description": "gets polyline length",
    "bitbybit.polyline.countPoints": "count points",
    "countPoints": "count points",
    "bitbybit.polyline.countPoints_description": "gets polyline point count",
    "bitbybit.polyline.getPoints": "get points",
    "getPoints": "get points",
    "bitbybit.polyline.getPoints_description": "gets polyline points",
    "bitbybit.polyline.reverse": "reverse polyline",
    "bitbybit.polyline.reverse_description": "reverses polyline points",
    "bitbybit.polyline.transformPolyline": "transform polyline",
    "transformPolyline": "transform polyline",
    "bitbybit.polyline.transformPolyline_description": "transforms polyline",
    "bitbybit.polyline.create": "polyline",
    "bitbybit.polyline.create_description": "creates polyline",
    "isClosed": "is closed",
    "string | number[]": "string or number array",
    "bitbybit.occt.deleteShape": "delete shape",
    "occt": "occt",
    "deleteShape": "delete shape",
    "bitbybit.occt.deleteShape_description": "deletes shape from cache",
    "bitbybit.occt.deleteShapes": "delete shapes",
    "deleteShapes": "delete shapes",
    "bitbybit.occt.deleteShapes_description": "deletes shapes from cache",
    "shapes": "shapes",
    "T[]": "t array",
    "bitbybit.occt.cleanAllCache": "clean all cache",
    "cleanAllCache": "clean all cache",
    "bitbybit.occt.cleanAllCache_description": "cleans all cache and shapes from memory",
    "bitbybit.occt.shapes.vertex.vertexFromXYZ": "vertex from xyz",
    "vertex": "vertex",
    "vertexFromXYZ": "vertex from xyz",
    "bitbybit.occt.shapes.vertex.vertexFromXYZ_description": "creates vertex from xyz coordinates",
    "bitbybit.occt.shapes.vertex.vertexFromPoint": "vertex from point",
    "vertexFromPoint": "vertex from point",
    "bitbybit.occt.shapes.vertex.vertexFromPoint_description": "creates vertex from point",
    "bitbybit.occt.shapes.vertex.verticesFromPoints": "vertices from points",
    "verticesFromPoints": "vertices from points",
    "bitbybit.occt.shapes.vertex.verticesFromPoints_description": "creates vertices from points",
    "bitbybit.occt.shapes.vertex.verticesCompoundFromPoints": "vertices compound from points",
    "verticesCompoundFromPoints": "vertices compound from points",
    "bitbybit.occt.shapes.vertex.verticesCompoundFromPoints_description": "creates compound shape of vertices",
    "bitbybit.occt.shapes.vertex.getVertices": "get vertices",
    "getVertices": "get vertices",
    "bitbybit.occt.shapes.vertex.getVertices_description": "gets all vertices from shape",
    "bitbybit.occt.shapes.vertex.getVerticesAsPoints": "get vertices as points",
    "getVerticesAsPoints": "get vertices as points",
    "bitbybit.occt.shapes.vertex.getVerticesAsPoints_description": "gets all vertices as points",
    "bitbybit.occt.shapes.vertex.verticesToPoints": "vertices to points",
    "verticesToPoints": "vertices to points",
    "bitbybit.occt.shapes.vertex.verticesToPoints_description": "transforms vertices to points",
    "transform": "transform",
    "bitbybit.occt.shapes.vertex.vertexToPoint": "vertex to point",
    "vertexToPoint": "vertex to point",
    "bitbybit.occt.shapes.vertex.vertexToPoint_description": "transforms vertex to point",
    "bitbybit.occt.shapes.vertex.projectPoints": "project points",
    "projectPoints": "project points",
    "bitbybit.occt.shapes.vertex.projectPoints_description": "projects points onto shape",
    "place": "place",
    "projectionType": "projection type",
    "pointProjectionTypeEnum": "point projection type enum",
    "bitbybit.occt.shapes.edge.line": "line",
    "edge": "edge",
    "bitbybit.occt.shapes.edge.line_description": "creates linear edge between two points",
    "primitives": "primitives",
    "bitbybit.occt.shapes.edge.arcThroughThreePoints": "arc through three points",
    "arcThroughThreePoints": "arc through three points",
    "bitbybit.occt.shapes.edge.arcThroughThreePoints_description": "creates arc edge through three points",
    "middle": "middle",
    "bitbybit.occt.shapes.edge.arcThroughTwoPointsAndTangent": "arc through two points and tangent",
    "arcThroughTwoPointsAndTangent": "arc through two points and tangent",
    "bitbybit.occt.shapes.edge.arcThroughTwoPointsAndTangent_description": "creates arc edge with tangent at first point",
    "tangentVec": "tangent vector",
    "bitbybit.occt.shapes.edge.arcFromCircleAndTwoPoints": "arc from circle and two points",
    "arcFromCircleAndTwoPoints": "arc from circle and two points",
    "bitbybit.occt.shapes.edge.arcFromCircleAndTwoPoints_description": "creates arc edge on circle between two points",
    "circle": "circle",
    "sense": "sense",
    "bitbybit.occt.shapes.edge.arcFromCircleAndTwoAngles": "arc from circle and two angles",
    "arcFromCircleAndTwoAngles": "arc from circle and two angles",
    "bitbybit.occt.shapes.edge.arcFromCircleAndTwoAngles_description": "creates arc edge on circle between two angles",
    "alphaAngle1": "alpha angle 1",
    "alphaAngle2": "alpha angle 2",
    "bitbybit.occt.shapes.edge.arcFromCirclePointAndAngle": "arc from circle point and angle",
    "arcFromCirclePointAndAngle": "arc from circle point and angle",
    "bitbybit.occt.shapes.edge.arcFromCirclePointAndAngle_description": "creates arc edge on circle from point to angle",
    "alphaAngle": "alpha angle",
    "bitbybit.occt.shapes.edge.createCircleEdge": "circle edge",
    "createCircleEdge": "circle edge",
    "bitbybit.occt.shapes.edge.createCircleEdge_description": "creates opencascade circle edge",
    "bitbybit.occt.shapes.edge.createEllipseEdge": "ellipse edge",
    "createEllipseEdge": "ellipse edge",
    "bitbybit.occt.shapes.edge.createEllipseEdge_description": "creates opencascade ellipse edge",
    "radiusMinor": "radius minor",
    "radiusMajor": "radius major",
    "bitbybit.occt.shapes.edge.removeInternalEdges": "remove internal edges",
    "removeInternalEdges": "remove internal edges",
    "bitbybit.occt.shapes.edge.removeInternalEdges_description": "removes internal edges from shape",
    "bitbybit.occt.shapes.edge.makeEdgeFromGeom2dCurveAndSurface": "make edge from geom 2d curve and surface",
    "makeEdgeFromGeom2dCurveAndSurface": "make edge from geom 2d curve and surface",
    "bitbybit.occt.shapes.edge.makeEdgeFromGeom2dCurveAndSurface_description": "creates edge from geom curve and surface",
    "curve": "curve",
    "surface": "surface",
    "U": "u",
    "bitbybit.occt.shapes.edge.getEdge": "get edge",
    "getEdge": "get edge",
    "bitbybit.occt.shapes.edge.getEdge_description": "gets edge by index from shape",
    "index": "index",
    "bitbybit.occt.shapes.edge.getEdges": "get edges",
    "getEdges": "get edges",
    "bitbybit.occt.shapes.edge.getEdges_description": "gets edges from shape",
    "bitbybit.occt.shapes.edge.getEdgesAlongWire": "get edges along wire",
    "getEdgesAlongWire": "get edges along wire",
    "bitbybit.occt.shapes.edge.getEdgesAlongWire_description": "gets edges along wire direction",
    "bitbybit.occt.shapes.edge.getCircularEdgesAlongWire": "get circular edges along wire",
    "getCircularEdgesAlongWire": "get circular edges along wire",
    "bitbybit.occt.shapes.edge.getCircularEdgesAlongWire_description": "gets circular edges along wire direction",
    "bitbybit.occt.shapes.edge.getLinearEdgesAlongWire": "get linear edges along wire",
    "getLinearEdgesAlongWire": "get linear edges along wire",
    "bitbybit.occt.shapes.edge.getLinearEdgesAlongWire_description": "gets linear edges along wire direction",
    "bitbybit.occt.shapes.edge.getCornerPointsOfEdgesForShape": "get corner points of edges for shape",
    "getCornerPointsOfEdgesForShape": "get corner points of edges for shape",
    "bitbybit.occt.shapes.edge.getCornerPointsOfEdgesForShape_description": "gets unique corner points of edges",
    "bitbybit.occt.shapes.edge.getEdgeLength": "get edge length",
    "getEdgeLength": "get edge length",
    "bitbybit.occt.shapes.edge.getEdgeLength_description": "gets edge length",
    "bitbybit.occt.shapes.edge.getEdgeLengthsOfShape": "get edge lengths of shape",
    "getEdgeLengthsOfShape": "get edge lengths of shape",
    "bitbybit.occt.shapes.edge.getEdgeLengthsOfShape_description": "gets edge lengths from shape",
    "bitbybit.occt.shapes.edge.getEdgesLengths": "get edges lengths",
    "getEdgesLengths": "get edges lengths",
    "bitbybit.occt.shapes.edge.getEdgesLengths_description": "gets lengths of edges",
    "bitbybit.occt.shapes.edge.getEdgeCenterOfMass": "get edge center of mass",
    "getEdgeCenterOfMass": "get edge center of mass",
    "bitbybit.occt.shapes.edge.getEdgeCenterOfMass_description": "gets edge center of mass",
    "bitbybit.occt.shapes.edge.getEdgesCentersOfMass": "get edges centers of mass",
    "getEdgesCentersOfMass": "get edges centers of mass",
    "bitbybit.occt.shapes.edge.getEdgesCentersOfMass_description": "gets centers of mass for edges",
    "bitbybit.occt.shapes.edge.getCircularEdgeCenterPoint": "get circular edge center point",
    "getCircularEdgeCenterPoint": "get circular edge center point",
    "bitbybit.occt.shapes.edge.getCircularEdgeCenterPoint_description": "gets center point of circular edge",
    "get circular edge": "get circular edge",
    "bitbybit.occt.shapes.edge.getCircularEdgeRadius": "get circular edge radius",
    "getCircularEdgeRadius": "get circular edge radius",
    "bitbybit.occt.shapes.edge.getCircularEdgeRadius_description": "gets radius of circular edge",
    "bitbybit.occt.shapes.edge.getCircularEdgePlaneDirection": "get circular edge plane direction",
    "getCircularEdgePlaneDirection": "get circular edge plane direction",
    "bitbybit.occt.shapes.edge.getCircularEdgePlaneDirection_description": "gets plane direction of circular edge",
    "bitbybit.occt.shapes.edge.pointOnEdgeAtParam": "point on edge at param",
    "pointOnEdgeAtParam": "point on edge at param",
    "bitbybit.occt.shapes.edge.pointOnEdgeAtParam_description": "gets point on edge at param",
    "bitbybit.occt.shapes.edge.pointsOnEdgesAtParam": "points on edges at param",
    "pointsOnEdgesAtParam": "points on edges at param",
    "bitbybit.occt.shapes.edge.pointsOnEdgesAtParam_description": "gets points on edges at param",
    "bitbybit.occt.shapes.edge.edgesToPoints": "edges to points",
    "edgesToPoints": "edges to points",
    "bitbybit.occt.shapes.edge.edgesToPoints_description": "gets points of edges in separate lists",
    "angularDeflection": "angular deflection",
    "curvatureDeflection": "curvature deflection",
    "minimumOfPoints": "minimum of points",
    "uTolerance": "u tolerance",
    "minimumLength": "minimum length",
    "bitbybit.occt.shapes.edge.reversedEdge": "reversed edge",
    "reversedEdge": "reversed edge",
    "bitbybit.occt.shapes.edge.reversedEdge_description": "computes reversed edge",
    "bitbybit.occt.shapes.edge.tangentOnEdgeAtParam": "tangent on edge at param",
    "tangentOnEdgeAtParam": "tangent on edge at param",
    "bitbybit.occt.shapes.edge.tangentOnEdgeAtParam_description": "gets tangent vector on edge at param",
    "bitbybit.occt.shapes.edge.tangentsOnEdgesAtParam": "tangents on edges at param",
    "tangentsOnEdgesAtParam": "tangents on edges at param",
    "bitbybit.occt.shapes.edge.tangentsOnEdgesAtParam_description": "gets tangent vectors on edges at param",
    "bitbybit.occt.shapes.edge.pointOnEdgeAtLength": "point on edge at length",
    "pointOnEdgeAtLength": "point on edge at length",
    "bitbybit.occt.shapes.edge.pointOnEdgeAtLength_description": "gets point on edge at length",
    "bitbybit.occt.shapes.edge.pointsOnEdgesAtLength": "points on edges at length",
    "pointsOnEdgesAtLength": "points on edges at length",
    "bitbybit.occt.shapes.edge.pointsOnEdgesAtLength_description": "gets points on edges at length",
    "bitbybit.occt.shapes.edge.tangentOnEdgeAtLength": "tangent on edge at length",
    "tangentOnEdgeAtLength": "tangent on edge at length",
    "bitbybit.occt.shapes.edge.tangentOnEdgeAtLength_description": "gets tangent vector on edge at length",
    "bitbybit.occt.shapes.edge.tangentsOnEdgesAtLength": "tangents on edges at length",
    "tangentsOnEdgesAtLength": "tangents on edges at length",
    "bitbybit.occt.shapes.edge.tangentsOnEdgesAtLength_description": "gets tangent vectors on edges at length",
    "bitbybit.occt.shapes.edge.startPointOnEdge": "start point on edge",
    "startPointOnEdge": "start point on edge",
    "bitbybit.occt.shapes.edge.startPointOnEdge_description": "gets start point on edge",
    "bitbybit.occt.shapes.edge.startPointsOnEdges": "start points on edges",
    "startPointsOnEdges": "start points on edges",
    "bitbybit.occt.shapes.edge.startPointsOnEdges_description": "gets start points on edges",
    "bitbybit.occt.shapes.edge.endPointOnEdge": "end point on edge",
    "endPointOnEdge": "end point on edge",
    "bitbybit.occt.shapes.edge.endPointOnEdge_description": "gets end point on edge",
    "bitbybit.occt.shapes.edge.endPointsOnEdges": "end points on edges",
    "endPointsOnEdges": "end points on edges",
    "bitbybit.occt.shapes.edge.endPointsOnEdges_description": "gets end points on edges",
    "bitbybit.occt.shapes.edge.divideEdgeByParamsToPoints": "divide edge by params to points",
    "divideEdgeByParamsToPoints": "divide edge by params to points",
    "bitbybit.occt.shapes.edge.divideEdgeByParamsToPoints_description": "divides edge by params to points",
    "nrOfDivisions": "nr of divisions",
    "removeStartPoint": "remove start point",
    "removeEndPoint": "remove end point",
    "bitbybit.occt.shapes.edge.divideEdgesByParamsToPoints": "divide edges by params to points",
    "divideEdgesByParamsToPoints": "divide edges by params to points",
    "bitbybit.occt.shapes.edge.divideEdgesByParamsToPoints_description": "divides edges by params to points",
    "bitbybit.occt.shapes.edge.divideEdgeByEqualDistanceToPoints": "divide edge by equal distance to points",
    "divideEdgeByEqualDistanceToPoints": "divide edge by equal distance to points",
    "bitbybit.occt.shapes.edge.divideEdgeByEqualDistanceToPoints_description": "divides edge by length to points",
    "bitbybit.occt.shapes.edge.divideEdgesByEqualDistanceToPoints": "divide edges by equal distance to points",
    "divideEdgesByEqualDistanceToPoints": "divide edges by equal distance to points",
    "bitbybit.occt.shapes.edge.divideEdgesByEqualDistanceToPoints_description": "divides edges by length to points",
    "bitbybit.occt.shapes.edge.constraintTanLinesFromTwoPtsToCircle": "constraint tan lines from two pts to circle",
    "constraintTanLinesFromTwoPtsToCircle": "constraint tan lines from two pts to circle",
    "bitbybit.occt.shapes.edge.constraintTanLinesFromTwoPtsToCircle_description": "creates lines from two points to circle tangents",
    "constraint": "constraint",
    "point1": "point 1",
    "point2": "point 2",
    "positionResult": "position result",
    "positionResultEnum": "position result enum",
    "circleRemainder": "circle remainder",
    "circleInclusionEnum": "circle inclusion enum",
    "bitbybit.occt.shapes.edge.constraintTanLinesFromPtToCircle": "constraint tan lines from pt to circle",
    "constraintTanLinesFromPtToCircle": "constraint tan lines from pt to circle",
    "bitbybit.occt.shapes.edge.constraintTanLinesFromPtToCircle_description": "creates lines from point to circle tangents",
    "bitbybit.occt.shapes.edge.constraintTanLinesOnTwoCircles": "constraint tan lines on two circles",
    "constraintTanLinesOnTwoCircles": "constraint tan lines on two circles",
    "bitbybit.occt.shapes.edge.constraintTanLinesOnTwoCircles_description": "creates tangent lines between two circles",
    "circle1": "circle 1",
    "circle2": "circle 2",
    "circleRemainders": "circle remainders",
    "twoCircleInclusionEnum": "two circle inclusion enum",
    "bitbybit.occt.shapes.edge.constraintTanCirclesOnTwoCircles": "constraint tan circles on two circles",
    "constraintTanCirclesOnTwoCircles": "constraint tan circles on two circles",
    "bitbybit.occt.shapes.edge.constraintTanCirclesOnTwoCircles_description": "creates tangent circles between two circles",
    "bitbybit.occt.shapes.edge.constraintTanCirclesOnCircleAndPnt": "constraint tan circles on circle and pnt",
    "constraintTanCirclesOnCircleAndPnt": "constraint tan circles on circle and pnt",
    "bitbybit.occt.shapes.edge.constraintTanCirclesOnCircleAndPnt_description": "creates tangent circles between point and circle",
    "bitbybit.occt.shapes.edge.isEdgeLinear": "is edge linear",
    "isEdgeLinear": "is edge linear",
    "bitbybit.occt.shapes.edge.isEdgeLinear_description": "checks if edge is linear",
    "is": "is",
    "bitbybit.occt.shapes.edge.isEdgeCircular": "is edge circular",
    "isEdgeCircular": "is edge circular",
    "bitbybit.occt.shapes.edge.isEdgeCircular_description": "checks if edge is circular",
    "bitbybit.occt.shapes.wire.createPolygonWire": "polygon wire",
    "wire": "wire",
    "createPolygonWire": "polygon wire",
    "bitbybit.occt.shapes.wire.createPolygonWire_description": "creates opencascade polygon wire",
    "via points": "via points",
    "bitbybit.occt.shapes.wire.createPolygons": "polygons",
    "createPolygons": "polygons",
    "bitbybit.occt.shapes.wire.createPolygons_description": "creates opencascade polygons",
    "multiple": "multiple",
    "polygons": "polygons",
    "PolygonDto[]": "polygon dto array",
    "returnCompound": "return compound",
    "bitbybit.occt.shapes.wire.createLineWire": "line wire",
    "createLineWire": "line wire",
    "bitbybit.occt.shapes.wire.createLineWire_description": "creates opencascade line wire",
    "bitbybit.occt.shapes.wire.createLines": "lines",
    "createLines": "lines",
    "bitbybit.occt.shapes.wire.createLines_description": "creates opencascade lines",
    "LineDto[]": "line dto array",
    "bitbybit.occt.shapes.wire.splitOnPoints": "split on points",
    "splitOnPoints": "split on points",
    "bitbybit.occt.shapes.wire.splitOnPoints_description": "splits wire on given points",
    "bitbybit.occt.shapes.wire.wiresToPoints": "wires to points",
    "wiresToPoints": "wires to points",
    "bitbybit.occt.shapes.wire.wiresToPoints_description": "transforms wires to points in ordered lists",
    "bitbybit.occt.shapes.wire.createPolylineWire": "polyline wire",
    "createPolylineWire": "polyline wire",
    "bitbybit.occt.shapes.wire.createPolylineWire_description": "creates opencascade polyline wire",
    "bitbybit.occt.shapes.wire.createZigZagBetweenTwoWires": "zig zag between two wires",
    "createZigZagBetweenTwoWires": "zig zag between two wires",
    "bitbybit.occt.shapes.wire.createZigZagBetweenTwoWires_description": "creates zig zag between two wires",
    "via wires": "via wires",
    "wire1": "wire 1",
    "wire2": "wire 2",
    "nrZigZags": "nr zig zags",
    "inverse": "inverse",
    "divideByEqualDistance": "divide by equal distance",
    "zigZagsPerEdge": "zig zags per edge",
    "bitbybit.occt.shapes.wire.createWireFromTwoCirclesTan": "wire from two circles tan",
    "createWireFromTwoCirclesTan": "wire from two circles tan",
    "bitbybit.occt.shapes.wire.createWireFromTwoCirclesTan_description": "creates tangent wire enclosing two planar circles",
    "keepLines": "keep lines",
    "twoSidesStrictEnum": "two sides strict enum",
    "fourSidesStrictEnum": "four sides strict enum",
    "bitbybit.occt.shapes.wire.createPolylines": "polylines",
    "createPolylines": "polylines",
    "bitbybit.occt.shapes.wire.createPolylines_description": "creates opencascade polyline wires",
    "polylines": "polylines",
    "PolylineDto[]": "polyline dto array",
    "bitbybit.occt.shapes.wire.createBezier": "bezier",
    "createBezier": "bezier",
    "bitbybit.occt.shapes.wire.createBezier_description": "creates opencascade bezier wire",
    "bitbybit.occt.shapes.wire.createBezierWeights": "bezier weights",
    "createBezierWeights": "bezier weights",
    "bitbybit.occt.shapes.wire.createBezierWeights_description": "creates opencascade bezier wire with weights",
    "weights": "weights",
    "bitbybit.occt.shapes.wire.createBezierWires": "bezier wires",
    "createBezierWires": "bezier wires",
    "bitbybit.occt.shapes.wire.createBezierWires_description": "creates opencascade bezier wires",
    "bezierWires": "bezier wires",
    "BezierDto[]": "bezier dto array",
    "bitbybit.occt.shapes.wire.interpolatePoints": "interpolate points",
    "interpolatePoints": "interpolate points",
    "bitbybit.occt.shapes.wire.interpolatePoints_description": "creates opencascade bspline wire from points",
    "periodic": "periodic",
    "bitbybit.occt.shapes.wire.interpolateWires": "interpolate wires",
    "interpolateWires": "interpolate wires",
    "bitbybit.occt.shapes.wire.interpolateWires_description": "creates multiple opencascade interpolated wires",
    "interpolations": "interpolations",
    "InterpolationDto[]": "interpolation dto array",
    "bitbybit.occt.shapes.wire.createBSpline": "bspline",
    "createBSpline": "bspline",
    "bitbybit.occt.shapes.wire.createBSpline_description": "creates opencascade bspline wire",
    "bitbybit.occt.shapes.wire.createBSplines": "bsplines",
    "createBSplines": "bsplines",
    "bitbybit.occt.shapes.wire.createBSplines_description": "creates opencascade bspline wires",
    "bSplines": "bsplines",
    "BSplineDto[]": "bspline dto array",
    "bitbybit.occt.shapes.wire.combineEdgesAndWiresIntoAWire": "combine edges and wires into a wire",
    "combineEdgesAndWiresIntoAWire": "combine edges and wires into a wire",
    "bitbybit.occt.shapes.wire.combineEdgesAndWiresIntoAWire_description": "combines edges and wires into single wire",
    "build": "build",
    "bitbybit.occt.shapes.wire.createWireFromEdge": "wire from edge",
    "createWireFromEdge": "wire from edge",
    "bitbybit.occt.shapes.wire.createWireFromEdge_description": "creates wire from edge",
    "bitbybit.occt.shapes.wire.addEdgesAndWiresToWire": "add edges and wires to wire",
    "addEdgesAndWiresToWire": "add edges and wires to wire",
    "bitbybit.occt.shapes.wire.addEdgesAndWiresToWire_description": "adds edges and wires to wire",
    "U[]": "u array",
    "bitbybit.occt.shapes.wire.divideWireByParamsToPoints": "divide wire by params to points",
    "divideWireByParamsToPoints": "divide wire by params to points",
    "bitbybit.occt.shapes.wire.divideWireByParamsToPoints_description": "divides wire to points by params",
    "bitbybit.occt.shapes.wire.divideWiresByParamsToPoints": "divide wires by params to points",
    "divideWiresByParamsToPoints": "divide wires by params to points",
    "bitbybit.occt.shapes.wire.divideWiresByParamsToPoints_description": "divides wires to points by params",
    "extract from wires": "extract from wires",
    "bitbybit.occt.shapes.wire.divideWireByEqualDistanceToPoints": "divide wire by equal distance to points",
    "divideWireByEqualDistanceToPoints": "divide wire by equal distance to points",
    "bitbybit.occt.shapes.wire.divideWireByEqualDistanceToPoints_description": "divides wire to equal distance points",
    "bitbybit.occt.shapes.wire.divideWiresByEqualDistanceToPoints": "divide wires by equal distance to points",
    "divideWiresByEqualDistanceToPoints": "divide wires by equal distance to points",
    "bitbybit.occt.shapes.wire.divideWiresByEqualDistanceToPoints_description": "divides wires to equal distance points",
    "bitbybit.occt.shapes.wire.pointOnWireAtParam": "point on wire at param",
    "pointOnWireAtParam": "point on wire at param",
    "bitbybit.occt.shapes.wire.pointOnWireAtParam_description": "gets point on wire at param",
    "bitbybit.occt.shapes.wire.pointOnWireAtLength": "point on wire at length",
    "pointOnWireAtLength": "point on wire at length",
    "bitbybit.occt.shapes.wire.pointOnWireAtLength_description": "gets point on wire at length",
    "bitbybit.occt.shapes.wire.pointsOnWireAtLengths": "points on wire at lengths",
    "pointsOnWireAtLengths": "points on wire at lengths",
    "bitbybit.occt.shapes.wire.pointsOnWireAtLengths_description": "gets points on wire at lengths",
    "lengths": "lengths",
    "bitbybit.occt.shapes.wire.pointsOnWireAtEqualLength": "points on wire at equal length",
    "pointsOnWireAtEqualLength": "points on wire at equal length",
    "bitbybit.occt.shapes.wire.pointsOnWireAtEqualLength_description": "gets points on wire at equal length",
    "tryNext": "try next",
    "includeFirst": "include first",
    "includeLast": "include last",
    "bitbybit.occt.shapes.wire.pointsOnWireAtPatternOfLengths": "points on wire at pattern of lengths",
    "pointsOnWireAtPatternOfLengths": "points on wire at pattern of lengths",
    "bitbybit.occt.shapes.wire.pointsOnWireAtPatternOfLengths_description": "gets points on wire at pattern of lengths",
    "bitbybit.occt.shapes.wire.tangentOnWireAtParam": "tangent on wire at param",
    "tangentOnWireAtParam": "tangent on wire at param",
    "bitbybit.occt.shapes.wire.tangentOnWireAtParam_description": "gets tangent vector on wire at param",
    "bitbybit.occt.shapes.wire.tangentOnWireAtLength": "tangent on wire at length",
    "tangentOnWireAtLength": "tangent on wire at length",
    "bitbybit.occt.shapes.wire.tangentOnWireAtLength_description": "gets tangent vector on wire at length",
    "bitbybit.occt.shapes.wire.derivativesOnWireAtLength": "derivatives on wire at length",
    "derivativesOnWireAtLength": "derivatives on wire at length",
    "bitbybit.occt.shapes.wire.derivativesOnWireAtLength_description": "computes 3 derivatives on wire at length",
    "bitbybit.occt.shapes.wire.derivativesOnWireAtParam": "derivatives on wire at param",
    "derivativesOnWireAtParam": "derivatives on wire at param",
    "bitbybit.occt.shapes.wire.derivativesOnWireAtParam_description": "computes 3 derivatives on wire at param",
    "bitbybit.occt.shapes.wire.startPointOnWire": "start point on wire",
    "startPointOnWire": "start point on wire",
    "bitbybit.occt.shapes.wire.startPointOnWire_description": "gets start point on wire",
    "bitbybit.occt.shapes.wire.endPointOnWire": "end point on wire",
    "endPointOnWire": "end point on wire",
    "bitbybit.occt.shapes.wire.endPointOnWire_description": "gets end point on wire",
    "bitbybit.occt.shapes.wire.createCircleWire": "circle wire",
    "createCircleWire": "circle wire",
    "bitbybit.occt.shapes.wire.createCircleWire_description": "creates opencascade circle wire",
    "bitbybit.occt.shapes.wire.createSquareWire": "square wire",
    "createSquareWire": "square wire",
    "bitbybit.occt.shapes.wire.createSquareWire_description": "creates opencascade square wire",
    "bitbybit.occt.shapes.wire.createStarWire": "star wire",
    "createStarWire": "star wire",
    "bitbybit.occt.shapes.wire.createStarWire_description": "creates opencascade star wire",
    "numRays": "num rays",
    "outerRadius": "outer radius",
    "innerRadius": "inner radius",
    "offsetOuterEdges": "offset outer edges",
    "half": "half",
    "bitbybit.occt.shapes.wire.createChristmasTreeWire": "christmas tree wire",
    "createChristmasTreeWire": "christmas tree wire",
    "bitbybit.occt.shapes.wire.createChristmasTreeWire_description": "creates christmas tree wire",
    "innerDist": "inner dist",
    "outerDist": "outer dist",
    "nrSkirts": "nr skirts",
    "trunkHeight": "trunk height",
    "trunkWidth": "trunk width",
    "bitbybit.occt.shapes.wire.createNGonWire": "ngon wire",
    "createNGonWire": "ngon wire",
    "bitbybit.occt.shapes.wire.createNGonWire_description": "creates opencascade ngon wire",
    "nrCorners": "nr corners",
    "bitbybit.occt.shapes.wire.createParallelogramWire": "parallelogram wire",
    "createParallelogramWire": "parallelogram wire",
    "bitbybit.occt.shapes.wire.createParallelogramWire_description": "creates parallelogram wire",
    "aroundCenter": "around center",
    "bitbybit.occt.shapes.wire.createHeartWire": "heart wire",
    "createHeartWire": "heart wire",
    "bitbybit.occt.shapes.wire.createHeartWire_description": "creates heart wire",
    "sizeApprox": "size approx",
    "bitbybit.occt.shapes.wire.createRectangleWire": "rectangle wire",
    "createRectangleWire": "rectangle wire",
    "bitbybit.occt.shapes.wire.createRectangleWire_description": "creates opencascade rectangle wire",
    "bitbybit.occt.shapes.wire.createLPolygonWire": "L polygon wire",
    "createLPolygonWire": "L polygon wire",
    "bitbybit.occt.shapes.wire.createLPolygonWire_description": "creates opencascade L polygon wire",
    "widthFirst": "width first",
    "lengthFirst": "length first",
    "widthSecond": "width second",
    "lengthSecond": "length second",
    "align": "align",
    "directionEnum": "direction enum",
    "bitbybit.occt.shapes.wire.createEllipseWire": "ellipse wire",
    "createEllipseWire": "ellipse wire",
    "bitbybit.occt.shapes.wire.createEllipseWire_description": "creates opencascade ellipse wire",
    "bitbybit.occt.shapes.wire.textWires": "text wires",
    "textWires": "text wires",
    "bitbybit.occt.shapes.wire.textWires_description": "Creates OpenCascade text wires based on simplex font created by Dr. A. V. Hershey",
    "xOffset": "x offset",
    "yOffset": "y offset",
    "letterSpacing": "letter spacing",
    "Base.horizontalAlignEnum": "Base.horizontalAlignEnum",
    "extrudeOffset": "extrude offset",
    "bitbybit.occt.shapes.wire.getWire": "get wire",
    "getWire": "get wire",
    "bitbybit.occt.shapes.wire.getWire_description": "gets wire by index from shape",
    "bitbybit.occt.shapes.wire.getWires": "get wires",
    "getWires": "get wires",
    "bitbybit.occt.shapes.wire.getWires_description": "gets all wires from shape",
    "bitbybit.occt.shapes.wire.getWireCenterOfMass": "get wire center of mass",
    "getWireCenterOfMass": "get wire center of mass",
    "bitbybit.occt.shapes.wire.getWireCenterOfMass_description": "gets wire center of mass point",
    "bitbybit.occt.shapes.wire.getWiresCentersOfMass": "get wires centers of mass",
    "getWiresCentersOfMass": "get wires centers of mass",
    "bitbybit.occt.shapes.wire.getWiresCentersOfMass_description": "gets wires centers of mass points",
    "bitbybit.occt.shapes.wire.reversedWire": "reversed wire",
    "reversedWire": "reversed wire",
    "bitbybit.occt.shapes.wire.reversedWire_description": "computes reversed wire",
    "bitbybit.occt.shapes.wire.reversedWireFromReversedEdges": "reversed wire from reversed edges",
    "reversedWireFromReversedEdges": "reversed wire from reversed edges",
    "bitbybit.occt.shapes.wire.reversedWireFromReversedEdges_description": "computes reversed wire from reversed edges",
    "bitbybit.occt.shapes.wire.isWireClosed": "is wire closed",
    "isWireClosed": "is wire closed",
    "bitbybit.occt.shapes.wire.isWireClosed_description": "checks if wire is closed",
    "bitbybit.occt.shapes.wire.getWireLength": "get wire length",
    "getWireLength": "get wire length",
    "bitbybit.occt.shapes.wire.getWireLength_description": "gets wire length",
    "bitbybit.occt.shapes.wire.getWiresLengths": "get wires lengths",
    "getWiresLengths": "get wires lengths",
    "bitbybit.occt.shapes.wire.getWiresLengths_description": "gets lengths of wires",
    "bitbybit.occt.shapes.wire.placeWireOnFace": "place wire on face",
    "placeWireOnFace": "place wire on face",
    "bitbybit.occt.shapes.wire.placeWireOnFace_description": "places wire on face using uv space",
    "face": "face",
    "bitbybit.occt.shapes.wire.placeWiresOnFace": "place wires on face",
    "placeWiresOnFace": "place wires on face",
    "bitbybit.occt.shapes.wire.placeWiresOnFace_description": "places multiple wires on face using uv space",
    "wires": "wires",
    "bitbybit.occt.shapes.wire.closeOpenWire": "close open wire",
    "closeOpenWire": "close open wire",
    "bitbybit.occt.shapes.wire.closeOpenWire_description": "closes open wire with straight edge",
    "bitbybit.occt.shapes.wire.project": "project",
    "project": "project",
    "bitbybit.occt.shapes.wire.project_description": "projects wire onto shape",
    "bitbybit.occt.shapes.wire.projectWires": "project wires",
    "projectWires": "project wires",
    "bitbybit.occt.shapes.wire.projectWires_description": "projects multiple wires onto shape",
    "bitbybit.occt.shapes.face.createFacesFromWiresOnFace": "faces from wires on face",
    "createFacesFromWiresOnFace": "faces from wires on face",
    "bitbybit.occt.shapes.face.createFacesFromWiresOnFace_description": "creates faces from wires on face",
    "inside": "inside",
    "bitbybit.occt.shapes.face.createFaceFromWireOnFace": "face from wire on face",
    "createFaceFromWireOnFace": "face from wire on face",
    "bitbybit.occt.shapes.face.createFaceFromWireOnFace_description": "creates face from wire on face",
    "bitbybit.occt.shapes.face.createFaceFromWire": "face from wire",
    "createFaceFromWire": "face from wire",
    "bitbybit.occt.shapes.face.createFaceFromWire_description": "creates face from wire",
    "planar": "planar",
    "bitbybit.occt.shapes.face.createFaceFromWires": "face from wires",
    "createFaceFromWires": "face from wires",
    "bitbybit.occt.shapes.face.createFaceFromWires_description": "creates face from wires",
    "bitbybit.occt.shapes.face.createFaceFromWiresOnFace": "face from wires on face",
    "createFaceFromWiresOnFace": "face from wires on face",
    "bitbybit.occt.shapes.face.createFaceFromWiresOnFace_description": "creates face from wires on guiding face",
    "bitbybit.occt.shapes.face.createFacesFromWires": "faces from wires",
    "createFacesFromWires": "faces from wires",
    "bitbybit.occt.shapes.face.createFacesFromWires_description": "creates faces from wires",
    "bitbybit.occt.shapes.face.createFaceFromMultipleCircleTanWires": "face from multiple circle tan wires",
    "createFaceFromMultipleCircleTanWires": "face from multiple circle tan wires",
    "bitbybit.occt.shapes.face.createFaceFromMultipleCircleTanWires_description": "creates face from multiple circle tangent wires",
    "circles": "circles",
    "combination": "combination",
    "combinationCirclesForFaceEnum": "combination circles for face enum",
    "unify": "unify",
    "bitbybit.occt.shapes.face.createFaceFromMultipleCircleTanWireCollections": "face from multiple circle tan wire collections",
    "createFaceFromMultipleCircleTanWireCollections": "face from multiple circle tan wire collections",
    "bitbybit.occt.shapes.face.createFaceFromMultipleCircleTanWireCollections_description": "creates face from multiple circle tangent wire collections",
    "listsOfCircles": "lists of circles",
    "T[][]": "t array array",
    "bitbybit.occt.shapes.face.faceFromSurface": "face from surface",
    "faceFromSurface": "face from surface",
    "bitbybit.occt.shapes.face.faceFromSurface_description": "creates face from surface",
    "bitbybit.occt.shapes.face.faceFromSurfaceAndWire": "face from surface and wire",
    "faceFromSurfaceAndWire": "face from surface and wire",
    "bitbybit.occt.shapes.face.faceFromSurfaceAndWire_description": "creates face from surface and wire",
    "bitbybit.occt.shapes.face.createPolygonFace": "polygon face",
    "createPolygonFace": "polygon face",
    "bitbybit.occt.shapes.face.createPolygonFace_description": "creates opencascade polygon face",
    "bitbybit.occt.shapes.face.createCircleFace": "circle face",
    "createCircleFace": "circle face",
    "bitbybit.occt.shapes.face.createCircleFace_description": "creates opencascade circle face",
    "bitbybit.occt.shapes.face.createEllipseFace": "ellipse face",
    "createEllipseFace": "ellipse face",
    "bitbybit.occt.shapes.face.createEllipseFace_description": "creates opencascade ellipse face",
    "bitbybit.occt.shapes.face.createSquareFace": "square face",
    "createSquareFace": "square face",
    "bitbybit.occt.shapes.face.createSquareFace_description": "creates opencascade square face",
    "bitbybit.occt.shapes.face.createRectangleFace": "rectangle face",
    "createRectangleFace": "rectangle face",
    "bitbybit.occt.shapes.face.createRectangleFace_description": "creates opencascade rectangle face",
    "bitbybit.occt.shapes.face.getFace": "get face",
    "getFace": "get face",
    "bitbybit.occt.shapes.face.getFace_description": "gets face by index from shape",
    "bitbybit.occt.shapes.face.getFaces": "get faces",
    "getFaces": "get faces",
    "bitbybit.occt.shapes.face.getFaces_description": "gets faces from shape",
    "bitbybit.occt.shapes.face.reversedFace": "reversed face",
    "reversedFace": "reversed face",
    "bitbybit.occt.shapes.face.reversedFace_description": "computes reversed face",
    "bitbybit.occt.shapes.face.subdivideToPoints": "subdivide to points",
    "subdivideToPoints": "subdivide to points",
    "bitbybit.occt.shapes.face.subdivideToPoints_description": "subdivides face to point grid",
    "nrDivisionsU": "nr divisions u",
    "nrDivisionsV": "nr divisions v",
    "shiftHalfStepU": "shift half step u",
    "removeStartEdgeU": "remove start edge u",
    "removeEndEdgeU": "remove end edge u",
    "shiftHalfStepV": "shift half step v",
    "removeStartEdgeV": "remove start edge v",
    "removeEndEdgeV": "remove end edge v",
    "bitbybit.occt.shapes.face.subdivideToWires": "subdivide to wires",
    "subdivideToWires": "subdivide to wires",
    "bitbybit.occt.shapes.face.subdivideToWires_description": "subdivides face to wires",
    "nrDivisions": "nr divisions",
    "isU": "is u",
    "shiftHalfStep": "shift half step",
    "removeStart": "remove start",
    "removeEnd": "remove end",
    "bitbybit.occt.shapes.face.subdivideToRectangleWires": "subdivide to rectangle wires",
    "subdivideToRectangleWires": "subdivide to rectangle wires",
    "bitbybit.occt.shapes.face.subdivideToRectangleWires_description": "subdivides face to rectangle wires",
    "patterns": "patterns",
    "nrRectanglesU": "nr rectangles u",
    "nrRectanglesV": "nr rectangles v",
    "scalePatternU": "scale pattern u",
    "scalePatternV": "scale pattern v",
    "filletPattern": "fillet pattern",
    "inclusionPattern": "inclusion pattern",
    "offsetFromBorderU": "offset from border u",
    "offsetFromBorderV": "offset from border v",
    "bitbybit.occt.shapes.face.subdivideToRectangleHoles": "subdivide to rectangle holes",
    "subdivideToRectangleHoles": "subdivide to rectangle holes",
    "bitbybit.occt.shapes.face.subdivideToRectangleHoles_description": "subdivides face to rectangle wires",
    "holesToFaces": "holes to faces",
    "bitbybit.occt.shapes.face.subdivideToPointsControlled": "subdivide to points controlled",
    "subdivideToPointsControlled": "subdivide to points controlled",
    "bitbybit.occt.shapes.face.subdivideToPointsControlled_description": "subdivides face to point grid with controlled shifts",
    "shiftHalfStepNthU": "shift half step nth u",
    "shiftHalfStepUOffsetN": "shift half step u offset n",
    "removeStartEdgeNthU": "remove start edge nth u",
    "removeStartEdgeUOffsetN": "remove start edge u offset n",
    "removeEndEdgeNthU": "remove end edge nth u",
    "removeEndEdgeUOffsetN": "remove end edge u offset n",
    "shiftHalfStepNthV": "shift half step nth v",
    "shiftHalfStepVOffsetN": "shift half step v offset n",
    "removeStartEdgeNthV": "remove start edge nth v",
    "removeStartEdgeVOffsetN": "remove start edge v offset n",
    "removeEndEdgeNthV": "remove end edge nth v",
    "removeEndEdgeVOffsetN": "remove end edge v offset n",
    "bitbybit.occt.shapes.face.subdivideToNormals": "subdivide to normals",
    "subdivideToNormals": "subdivide to normals",
    "bitbybit.occt.shapes.face.subdivideToNormals_description": "subdivides face to normals grid",
    "bitbybit.occt.shapes.face.subdivideToUV": "subdivide to uv",
    "subdivideToUV": "subdivide to uv",
    "bitbybit.occt.shapes.face.subdivideToUV_description": "subdivides face to uv grid",
    "bitbybit.occt.shapes.face.pointOnUV": "point on uv",
    "pointOnUV": "point on uv",
    "bitbybit.occt.shapes.face.pointOnUV_description": "gets point on uv mapped to bounds",
    "paramU": "param u",
    "paramV": "param v",
    "bitbybit.occt.shapes.face.normalOnUV": "normal on uv",
    "normalOnUV": "normal on uv",
    "bitbybit.occt.shapes.face.normalOnUV_description": "gets normal on uv mapped to bounds",
    "bitbybit.occt.shapes.face.pointsOnUVs": "points on uvs",
    "pointsOnUVs": "points on uvs",
    "bitbybit.occt.shapes.face.pointsOnUVs_description": "gets points on uvs mapped to bounds",
    "paramsUV": "params uv",
    "[number, number][]": "number pair array",
    "bitbybit.occt.shapes.face.normalsOnUVs": "normals on uvs",
    "normalsOnUVs": "normals on uvs",
    "bitbybit.occt.shapes.face.normalsOnUVs_description": "gets normals on uvs mapped to bounds",
    "bitbybit.occt.shapes.face.subdivideToPointsOnParam": "subdivide to points on param",
    "subdivideToPointsOnParam": "subdivide to points on param",
    "bitbybit.occt.shapes.face.subdivideToPointsOnParam_description": "subdivides face to points on param",
    "nrPoints": "nr points",
    "bitbybit.occt.shapes.face.wireAlongParam": "wire along param",
    "wireAlongParam": "wire along param",
    "bitbybit.occt.shapes.face.wireAlongParam_description": "gets wire along param on face",
    "bitbybit.occt.shapes.face.wiresAlongParams": "wires along params",
    "wiresAlongParams": "wires along params",
    "bitbybit.occt.shapes.face.wiresAlongParams_description": "gets wires along params on face",
    "params": "params",
    "bitbybit.occt.shapes.face.getUMinBound": "get u min bound",
    "getUMinBound": "get u min bound",
    "bitbybit.occt.shapes.face.getUMinBound_description": "gets u min bound of face",
    "bitbybit.occt.shapes.face.getUMaxBound": "get u max bound",
    "getUMaxBound": "get u max bound",
    "bitbybit.occt.shapes.face.getUMaxBound_description": "gets u max bound of face",
    "bitbybit.occt.shapes.face.getVMinBound": "get v min bound",
    "getVMinBound": "get v min bound",
    "bitbybit.occt.shapes.face.getVMinBound_description": "gets v min bound of face",
    "bitbybit.occt.shapes.face.getVMaxBound": "get v max bound",
    "getVMaxBound": "get v max bound",
    "bitbybit.occt.shapes.face.getVMaxBound_description": "gets v max bound of face",
    "bitbybit.occt.shapes.face.getFaceArea": "get face area",
    "getFaceArea": "get face area",
    "bitbybit.occt.shapes.face.getFaceArea_description": "gets area of face",
    "bitbybit.occt.shapes.face.getFacesAreas": "get faces areas",
    "getFacesAreas": "get faces areas",
    "bitbybit.occt.shapes.face.getFacesAreas_description": "gets areas of faces",
    "bitbybit.occt.shapes.face.getFaceCenterOfMass": "get face center of mass",
    "getFaceCenterOfMass": "get face center of mass",
    "bitbybit.occt.shapes.face.getFaceCenterOfMass_description": "gets face center of mass point",
    "bitbybit.occt.shapes.face.getFacesCentersOfMass": "get faces centers of mass",
    "getFacesCentersOfMass": "get faces centers of mass",
    "bitbybit.occt.shapes.face.getFacesCentersOfMass_description": "gets centers of mass for faces",
    "bitbybit.occt.shapes.face.filterFacePoints": "filter face points",
    "filterFacePoints": "filter face points",
    "bitbybit.occt.shapes.face.filterFacePoints_description": "filters points on face",
    "filter": "filter",
    "useBndBox": "use bnd box",
    "gapTolerance": "gap tolerance",
    "keepIn": "keep in",
    "keepOn": "keep on",
    "keepOut": "keep out",
    "keepUnknown": "keep unknown",
    "bitbybit.occt.shapes.face.filterFacesPoints": "filter faces points",
    "filterFacesPoints": "filter faces points",
    "bitbybit.occt.shapes.face.filterFacesPoints_description": "filters points on faces",
    "flatPointsArray": "flat points array",
    "bitbybit.occt.shapes.shell.sewFaces": "sew faces",
    "shell": "shell",
    "sewFaces": "sew faces",
    "bitbybit.occt.shapes.shell.sewFaces_description": "creates shell from faces",
    "bitbybit.occt.shapes.shell.getShellSurfaceArea": "get shell surface area",
    "getShellSurfaceArea": "get shell surface area",
    "bitbybit.occt.shapes.shell.getShellSurfaceArea_description": "gets shell surface area",
    "bitbybit.occt.shapes.solid.fromClosedShell": "from closed shell",
    "solid": "solid",
    "fromClosedShell": "from closed shell",
    "bitbybit.occt.shapes.solid.fromClosedShell_description": "creates solid from closed shell",
    "bitbybit.occt.shapes.solid.createBox": "box",
    "bitbybit.occt.shapes.solid.createBox_description": "creates opencascade box",
    "originOnCenter": "origin on center",
    "bitbybit.occt.shapes.solid.createCube": "cube",
    "bitbybit.occt.shapes.solid.createCube_description": "creates opencascade cube",
    "bitbybit.occt.shapes.solid.createBoxFromCorner": "box from corner",
    "createBoxFromCorner": "box from corner",
    "bitbybit.occt.shapes.solid.createBoxFromCorner_description": "creates opencascade box from corner",
    "corner": "corner",
    "bitbybit.occt.shapes.solid.createCylinder": "cylinder",
    "bitbybit.occt.shapes.solid.createCylinder_description": "creates opencascade cylinder",
    "bitbybit.occt.shapes.solid.createCylindersOnLines": "cylinders on lines",
    "createCylindersOnLines": "cylinders on lines",
    "bitbybit.occt.shapes.solid.createCylindersOnLines_description": "creates opencascade cylinders on lines",
    "Base.Line3[]": "base line3 array",
    "bitbybit.occt.shapes.solid.createSphere": "sphere",
    "bitbybit.occt.shapes.solid.createSphere_description": "creates opencascade sphere",
    "bitbybit.occt.shapes.solid.createCone": "cone",
    "createCone": "cone",
    "bitbybit.occt.shapes.solid.createCone_description": "creates opencascade cone",
    "radius1": "radius 1",
    "radius2": "radius 2",
    "bitbybit.occt.shapes.solid.getSolidSurfaceArea": "get solid surface area",
    "getSolidSurfaceArea": "get solid surface area",
    "bitbybit.occt.shapes.solid.getSolidSurfaceArea_description": "gets solid surface area",
    "bitbybit.occt.shapes.solid.getSolidVolume": "get solid volume",
    "getSolidVolume": "get solid volume",
    "bitbybit.occt.shapes.solid.getSolidVolume_description": "gets solid volume",
    "bitbybit.occt.shapes.solid.getSolidsVolumes": "get solids volumes",
    "getSolidsVolumes": "get solids volumes",
    "bitbybit.occt.shapes.solid.getSolidsVolumes_description": "gets volumes of solids",
    "bitbybit.occt.shapes.solid.getSolidCenterOfMass": "get solid center of mass",
    "getSolidCenterOfMass": "get solid center of mass",
    "bitbybit.occt.shapes.solid.getSolidCenterOfMass_description": "gets solid center of mass",
    "bitbybit.occt.shapes.solid.getSolidsCentersOfMass": "get solids centers of mass",
    "getSolidsCentersOfMass": "get solids centers of mass",
    "bitbybit.occt.shapes.solid.getSolidsCentersOfMass_description": "gets centers of mass of solids",
    "bitbybit.occt.shapes.solid.getSolids": "get solids",
    "getSolids": "get solids",
    "bitbybit.occt.shapes.solid.getSolids_description": "gets solids from shape",
    "bitbybit.occt.shapes.solid.filterSolidPoints": "filter solid points",
    "filterSolidPoints": "filter solid points",
    "bitbybit.occt.shapes.solid.filterSolidPoints_description": "filters points based on solid relationship",
    "bitbybit.occt.shapes.compound.makeCompound": "make compound",
    "compound": "compound",
    "makeCompound": "make compound",
    "bitbybit.occt.shapes.compound.makeCompound_description": "makes compound shape from shapes",
    "bitbybit.occt.shapes.compound.getShapesOfCompound": "get shapes of compound",
    "getShapesOfCompound": "get shapes of compound",
    "bitbybit.occt.shapes.compound.getShapesOfCompound_description": "gets shapes from compound",
    "bitbybit.occt.shapes.shape.purgeInternalEdges": "purge internal edges",
    "purgeInternalEdges": "purge internal edges",
    "bitbybit.occt.shapes.shape.purgeInternalEdges_description": "removes internal edges from shape",
    "bitbybit.occt.shapes.shape.unifySameDomain": "unify same domain",
    "unifySameDomain": "unify same domain",
    "bitbybit.occt.shapes.shape.unifySameDomain_description": "unifies faces and edges in same domain",
    "unifyEdges": "unify edges",
    "unifyFaces": "unify faces",
    "concatBSplines": "concat bsplines",
    "bitbybit.occt.shapes.shape.isClosed": "is closed",
    "bitbybit.occt.shapes.shape.isClosed_description": "checks if shape is closed",
    "analysis": "analysis",
    "bitbybit.occt.shapes.shape.isConvex": "is convex",
    "isConvex": "is convex",
    "bitbybit.occt.shapes.shape.isConvex_description": "checks if shape is convex",
    "bitbybit.occt.shapes.shape.isChecked": "is checked",
    "bitbybit.occt.shapes.shape.isChecked_description": "checks if shape is checked",
    "bitbybit.occt.shapes.shape.isFree": "is free",
    "isFree": "is free",
    "bitbybit.occt.shapes.shape.isFree_description": "checks if shape is free",
    "bitbybit.occt.shapes.shape.isInfinite": "is infinite",
    "isInfinite": "is infinite",
    "bitbybit.occt.shapes.shape.isInfinite_description": "checks if shape is infinite",
    "bitbybit.occt.shapes.shape.isModified": "is modified",
    "isModified": "is modified",
    "bitbybit.occt.shapes.shape.isModified_description": "checks if shape is modified",
    "bitbybit.occt.shapes.shape.isLocked": "is locked",
    "isLocked": "is locked",
    "bitbybit.occt.shapes.shape.isLocked_description": "checks if shape is locked",
    "bitbybit.occt.shapes.shape.isNull": "is null",
    "isNull": "is null",
    "bitbybit.occt.shapes.shape.isNull_description": "checks if shape is null",
    "bitbybit.occt.shapes.shape.isEqual": "is equal",
    "isEqual": "is equal",
    "bitbybit.occt.shapes.shape.isEqual_description": "checks if shape equals other shape",
    "otherShape": "other shape",
    "bitbybit.occt.shapes.shape.isNotEqual": "is not equal",
    "isNotEqual": "is not equal",
    "bitbybit.occt.shapes.shape.isNotEqual_description": "checks if shape differs from other shape",
    "bitbybit.occt.shapes.shape.isPartner": "is partner",
    "isPartner": "is partner",
    "bitbybit.occt.shapes.shape.isPartner_description": "checks if shape is partner to other shape",
    "bitbybit.occt.shapes.shape.isSame": "is same",
    "isSame": "is same",
    "bitbybit.occt.shapes.shape.isSame_description": "checks if shape is same as other shape",
    "bitbybit.occt.shapes.shape.getOrientation": "get orientation",
    "getOrientation": "get orientation",
    "bitbybit.occt.shapes.shape.getOrientation_description": "gets shape orientation",
    "bitbybit.occt.shapes.shape.getShapeType": "get shape type",
    "getShapeType": "get shape type",
    "bitbybit.occt.shapes.shape.getShapeType_description": "gets shape type",
    "bitbybit.occt.geom.curves.geom2dEllipse": "geom 2d ellipse",
    "geom": "geom",
    "curves": "curves",
    "geom2dEllipse": "geom 2d ellipse",
    "bitbybit.occt.geom.curves.geom2dEllipse_description": "creates 2d ellipse for modeling",
    "Base.Point2": "base point 2",
    "Base.Vector2": "base vector 2",
    "bitbybit.occt.geom.curves.geom2dTrimmedCurve": "geom 2d trimmed curve",
    "geom2dTrimmedCurve": "geom 2d trimmed curve",
    "bitbybit.occt.geom.curves.geom2dTrimmedCurve_description": "creates trimmed curve between u1 and u2",
    "u1": "u1",
    "u2": "u2",
    "adjustPeriodic": "adjust periodic",
    "bitbybit.occt.geom.curves.geom2dSegment": "geom 2d segment",
    "geom2dSegment": "geom 2d segment",
    "bitbybit.occt.geom.curves.geom2dSegment_description": "creates 2d curve segment between two points",
    "bitbybit.occt.geom.curves.get2dPointFrom2dCurveOnParam": "get 2d point from 2d curve on param",
    "get2dPointFrom2dCurveOnParam": "get 2d point from 2d curve on param",
    "bitbybit.occt.geom.curves.get2dPointFrom2dCurveOnParam_description": "gets 2d point on curve at param",
    "bitbybit.occt.geom.curves.geomCircleCurve": "geom circle curve",
    "geomCircleCurve": "geom circle curve",
    "bitbybit.occt.geom.curves.geomCircleCurve_description": "creates circle geom curve",
    "bitbybit.occt.geom.curves.geomEllipseCurve": "geom ellipse curve",
    "geomEllipseCurve": "geom ellipse curve",
    "bitbybit.occt.geom.curves.geomEllipseCurve_description": "creates ellipse geom curve",
    "bitbybit.occt.geom.surfaces.cylindricalSurface": "cylindrical surface",
    "surfaces": "surfaces",
    "cylindricalSurface": "cylindrical surface",
    "bitbybit.occt.geom.surfaces.cylindricalSurface_description": "creates infinite cylindrical surface for modeling",
    "bitbybit.occt.geom.surfaces.surfaceFromFace": "surface from face",
    "surfaceFromFace": "surface from face",
    "bitbybit.occt.geom.surfaces.surfaceFromFace_description": "creates surface from face",
    "bitbybit.occt.fillets.filletEdges": "fillet edges",
    "fillets": "fillets",
    "filletEdges": "fillet edges",
    "bitbybit.occt.fillets.filletEdges_description": "fillets opencascade shapes",
    "3d fillets": "3d fillets",
    "radiusList": "radius list",
    "indexes": "indexes",
    "bitbybit.occt.fillets.filletEdgesList": "fillet edges list",
    "filletEdgesList": "fillet edges list",
    "bitbybit.occt.fillets.filletEdgesList_description": "fillets edges with different radii",
    "edges": "edges",
    "bitbybit.occt.fillets.filletEdgesListOneRadius": "fillet edges list one radius",
    "filletEdgesListOneRadius": "fillet edges list one radius",
    "bitbybit.occt.fillets.filletEdgesListOneRadius_description": "fillets edges with single radius",
    "bitbybit.occt.fillets.filletEdgeVariableRadius": "fillet edge variable radius",
    "filletEdgeVariableRadius": "fillet edge variable radius",
    "bitbybit.occt.fillets.filletEdgeVariableRadius_description": "fillets edge with variable radius on u params",
    "paramsU": "params u",
    "bitbybit.occt.fillets.filletEdgesSameVariableRadius": "fillet edges same variable radius",
    "filletEdgesSameVariableRadius": "fillet edges same variable radius",
    "bitbybit.occt.fillets.filletEdgesSameVariableRadius_description": "fillets edges with same variable radii",
    "bitbybit.occt.fillets.filletEdgesVariableRadius": "fillet edges variable radius",
    "filletEdgesVariableRadius": "fillet edges variable radius",
    "bitbybit.occt.fillets.filletEdgesVariableRadius_description": "fillets edges with variable radii on params",
    "radiusLists": "radius lists",
    "paramsULists": "params u lists",
    "bitbybit.occt.fillets.fillet3DWire": "fillet 3d wire",
    "fillet3DWire": "fillet 3d wire",
    "bitbybit.occt.fillets.fillet3DWire_description": "fillets 3d wire with guiding direction",
    "bitbybit.occt.fillets.fillet3DWires": "fillet 3d wires",
    "fillet3DWires": "fillet 3d wires",
    "bitbybit.occt.fillets.fillet3DWires_description": "fillets 3d wires with guiding direction",
    "bitbybit.occt.fillets.chamferEdges": "chamfer edges",
    "chamferEdges": "chamfer edges",
    "bitbybit.occt.fillets.chamferEdges_description": "chamfers opencascade shape edges",
    "3d chamfers": "3d chamfers",
    "distanceList": "distance list",
    "bitbybit.occt.fillets.chamferEdgesList": "chamfer edges list",
    "chamferEdgesList": "chamfer edges list",
    "bitbybit.occt.fillets.chamferEdgesList_description": "chamfers edges with different distances",
    "bitbybit.occt.fillets.chamferEdgeTwoDistances": "chamfer edge two distances",
    "chamferEdgeTwoDistances": "chamfer edge two distances",
    "bitbybit.occt.fillets.chamferEdgeTwoDistances_description": "chamfers edge with two distances",
    "F": "f",
    "distance1": "distance 1",
    "distance2": "distance 2",
    "bitbybit.occt.fillets.chamferEdgesTwoDistances": "chamfer edges two distances",
    "chamferEdgesTwoDistances": "chamfer edges two distances",
    "bitbybit.occt.fillets.chamferEdgesTwoDistances_description": "chamfers edges with two distances",
    "faces": "faces",
    "F[]": "f array",
    "bitbybit.occt.fillets.chamferEdgesTwoDistancesLists": "chamfer edges two distances lists",
    "chamferEdgesTwoDistancesLists": "chamfer edges two distances lists",
    "bitbybit.occt.fillets.chamferEdgesTwoDistancesLists_description": "chamfers edges with two distance lists",
    "distances1": "distances 1",
    "distances2": "distances 2",
    "bitbybit.occt.fillets.chamferEdgeDistAngle": "chamfer edge dist angle",
    "chamferEdgeDistAngle": "chamfer edge dist angle",
    "bitbybit.occt.fillets.chamferEdgeDistAngle_description": "chamfers edge with distance and angle",
    "bitbybit.occt.fillets.chamferEdgesDistAngle": "chamfer edges dist angle",
    "chamferEdgesDistAngle": "chamfer edges dist angle",
    "bitbybit.occt.fillets.chamferEdgesDistAngle_description": "chamfers edges with distance and angle",
    "bitbybit.occt.fillets.chamferEdgesDistsAngles": "chamfer edges dists angles",
    "chamferEdgesDistsAngles": "chamfer edges dists angles",
    "bitbybit.occt.fillets.chamferEdgesDistsAngles_description": "chamfers edges with distances and angles",
    "distances": "distances",
    "bitbybit.occt.fillets.fillet2d": "fillet 2d",
    "fillet2d": "fillet 2d",
    "bitbybit.occt.fillets.fillet2d_description": "fillets 2d wire or face",
    "2d fillets": "2d fillets",
    "bitbybit.occt.fillets.fillet2dShapes": "fillet 2d shapes",
    "fillet2dShapes": "fillet 2d shapes",
    "bitbybit.occt.fillets.fillet2dShapes_description": "fillets 2d wires or faces",
    "bitbybit.occt.fillets.filletTwoEdgesInPlaneIntoAWire": "fillet two edges in plane into a wire",
    "filletTwoEdgesInPlaneIntoAWire": "fillet two edges in plane into a wire",
    "bitbybit.occt.fillets.filletTwoEdgesInPlaneIntoAWire_description": "fillets two planar edges into wire",
    "edge1": "edge 1",
    "edge2": "edge 2",
    "planeOrigin": "plane origin",
    "planeDirection": "plane direction",
    "solution": "solution",
    "bitbybit.occt.transforms.transform": "transform",
    "bitbybit.occt.transforms.transform_description": "transforms shape",
    "on single shape": "on single shape",
    "rotationAxis": "rotation axis",
    "rotationAngle": "rotation angle",
    "scaleFactor": "scale factor",
    "bitbybit.occt.transforms.rotate": "rotate",
    "bitbybit.occt.transforms.rotate_description": "rotates shape",
    "bitbybit.occt.transforms.rotateAroundCenter": "rotate around center",
    "rotateAroundCenter": "rotate around center",
    "bitbybit.occt.transforms.rotateAroundCenter_description": "rotates shape around center",
    "bitbybit.occt.transforms.align": "align",
    "bitbybit.occt.transforms.align_description": "aligns shape",
    "fromOrigin": "from origin",
    "fromDirection": "from direction",
    "toOrigin": "to origin",
    "toDirection": "to direction",
    "bitbybit.occt.transforms.alignAndTranslate": "align and translate",
    "alignAndTranslate": "align and translate",
    "bitbybit.occt.transforms.alignAndTranslate_description": "aligns and translates shape",
    "bitbybit.occt.transforms.translate": "translate",
    "bitbybit.occt.transforms.translate_description": "translates shape",
    "bitbybit.occt.transforms.scale": "scale",
    "bitbybit.occt.transforms.scale_description": "scales shape",
    "bitbybit.occt.transforms.scale3d": "scale 3d",
    "scale3d": "scale 3d",
    "bitbybit.occt.transforms.scale3d_description": "scales shape in 3d",
    "bitbybit.occt.transforms.mirror": "mirror",
    "mirror": "mirror",
    "bitbybit.occt.transforms.mirror_description": "mirrors shape",
    "bitbybit.occt.transforms.mirrorAlongNormal": "mirror along normal",
    "mirrorAlongNormal": "mirror along normal",
    "bitbybit.occt.transforms.mirrorAlongNormal_description": "mirrors shape along normal and origin",
    "normal": "normal",
    "bitbybit.occt.transforms.transformShapes": "transform shapes",
    "transformShapes": "transform shapes",
    "bitbybit.occt.transforms.transformShapes_description": "transforms array of shapes",
    "on shapes": "on shapes",
    "rotationAxes": "rotation axes",
    "rotationAngles": "rotation angles",
    "scaleFactors": "scale factors",
    "bitbybit.occt.transforms.rotateShapes": "rotate shapes",
    "rotateShapes": "rotate shapes",
    "bitbybit.occt.transforms.rotateShapes_description": "rotates shapes",
    "axes": "axes",
    "bitbybit.occt.transforms.rotateAroundCenterShapes": "rotate around center shapes",
    "rotateAroundCenterShapes": "rotate around center shapes",
    "bitbybit.occt.transforms.rotateAroundCenterShapes_description": "rotates shapes around center and axis",
    "centers": "centers",
    "bitbybit.occt.transforms.alignShapes": "align shapes",
    "alignShapes": "align shapes",
    "bitbybit.occt.transforms.alignShapes_description": "aligns shapes",
    "fromOrigins": "from origins",
    "fromDirections": "from directions",
    "toOrigins": "to origins",
    "toDirections": "to directions",
    "bitbybit.occt.transforms.alignAndTranslateShapes": "align and translate shapes",
    "alignAndTranslateShapes": "align and translate shapes",
    "bitbybit.occt.transforms.alignAndTranslateShapes_description": "aligns and translates shapes",
    "directions": "directions",
    "bitbybit.occt.transforms.translateShapes": "translate shapes",
    "translateShapes": "translate shapes",
    "bitbybit.occt.transforms.translateShapes_description": "translates shapes",
    "bitbybit.occt.transforms.scaleShapes": "scale shapes",
    "scaleShapes": "scale shapes",
    "bitbybit.occt.transforms.scaleShapes_description": "scales shapes",
    "factors": "factors",
    "bitbybit.occt.transforms.scale3dShapes": "scale 3d shapes",
    "scale3dShapes": "scale 3d shapes",
    "bitbybit.occt.transforms.scale3dShapes_description": "scales shapes in 3d",
    "scales": "scales",
    "bitbybit.occt.transforms.mirrorShapes": "mirror shapes",
    "mirrorShapes": "mirror shapes",
    "bitbybit.occt.transforms.mirrorShapes_description": "mirrors shapes",
    "origins": "origins",
    "bitbybit.occt.transforms.mirrorAlongNormalShapes": "mirror along normal shapes",
    "mirrorAlongNormalShapes": "mirror along normal shapes",
    "bitbybit.occt.transforms.mirrorAlongNormalShapes_description": "mirrors shapes along normal and origin",
    "normals": "normals",
    "bitbybit.occt.operations.loft": "loft",
    "operations": "operations",
    "loft": "loft",
    "bitbybit.occt.operations.loft_description": "lofts wires into shell",
    "lofts": "lofts",
    "makeSolid": "make solid",
    "bitbybit.occt.operations.loftAdvanced": "loft advanced",
    "loftAdvanced": "loft advanced",
    "bitbybit.occt.operations.loftAdvanced_description": "lofts wires into shell with options",
    "straight": "straight",
    "nrPeriodicSections": "nr periodic sections",
    "useSmoothing": "use smoothing",
    "maxUDegree": "max u degree",
    "parType": "par type",
    "approxParametrizationTypeEnum": "approx parametrization type enum",
    "startVertex": "start vertex",
    "endVertex": "end vertex",
    "bitbybit.occt.operations.closestPointsBetweenTwoShapes": "closest points between two shapes",
    "closestPointsBetweenTwoShapes": "closest points between two shapes",
    "bitbybit.occt.operations.closestPointsBetweenTwoShapes_description": "computes closest points between two shapes",
    "closest pts": "closest pts",
    "shape1": "shape 1",
    "shape2": "shape 2",
    "bitbybit.occt.operations.closestPointsOnShapeFromPoints": "closest points on shape from points",
    "closestPointsOnShapeFromPoints": "closest points on shape from points",
    "bitbybit.occt.operations.closestPointsOnShapeFromPoints_description": "computes closest points from points to shape",
    "bitbybit.occt.operations.closestPointsOnShapesFromPoints": "closest points on shapes from points",
    "closestPointsOnShapesFromPoints": "closest points on shapes from points",
    "bitbybit.occt.operations.closestPointsOnShapesFromPoints_description": "computes closest points from points to shapes",
    "bitbybit.occt.operations.distancesToShapeFromPoints": "distances to shape from points",
    "distancesToShapeFromPoints": "distances to shape from points",
    "bitbybit.occt.operations.distancesToShapeFromPoints_description": "computes distances from points to shape",
    "bitbybit.occt.operations.boundingBoxOfShape": "bbox of shape",
    "boundingBoxOfShape": "bbox of shape",
    "bitbybit.occt.operations.boundingBoxOfShape_description": "Computes bounding box parameters of the shape",
    "bitbybit.occt.operations.boundingBoxMinOfShape": "bbox min of shape",
    "boundingBoxMinOfShape": "bbox min of shape",
    "bitbybit.occt.operations.boundingBoxMinOfShape_description": "Get min point of the bounding box of the shape",
    "bitbybit.occt.operations.boundingBoxMaxOfShape": "bbox max of shape",
    "boundingBoxMaxOfShape": "bbox max of shape",
    "bitbybit.occt.operations.boundingBoxMaxOfShape_description": "Get max point of the bounding box of the shape",
    "bitbybit.occt.operations.boundingBoxCenterOfShape": "bbox center of shape",
    "boundingBoxCenterOfShape": "bbox center of shape",
    "bitbybit.occt.operations.boundingBoxCenterOfShape_description": "Get center point of the bounding box of the shape",
    "bitbybit.occt.operations.boundingBoxSizeOfShape": "bbox size of shape",
    "boundingBoxSizeOfShape": "bbox size of shape",
    "bitbybit.occt.operations.boundingBoxSizeOfShape_description": "Get size point of the bounding box of the shape",
    "bitbybit.occt.operations.boundingBoxShapeOfShape": "bbox shape of shape",
    "boundingBoxShapeOfShape": "bbox shape of shape",
    "bitbybit.occt.operations.boundingBoxShapeOfShape_description": "Get bounding box shape of the shape",
    "bitbybit.occt.operations.boundingSphereOfShape": "bsphere of shape",
    "boundingSphereOfShape": "bsphere of shape",
    "bitbybit.occt.operations.boundingSphereOfShape_description": "Computes bounding sphere parameters of the shape",
    "bitbybit.occt.operations.boundingSphereCenterOfShape": "bsphere center of shape",
    "boundingSphereCenterOfShape": "bsphere center of shape",
    "bitbybit.occt.operations.boundingSphereCenterOfShape_description": "Get center point of the bounding sphere of the shape",
    "bitbybit.occt.operations.boundingSphereRadiusOfShape": "bsphere radius of shape",
    "boundingSphereRadiusOfShape": "bsphere radius of shape",
    "bitbybit.occt.operations.boundingSphereRadiusOfShape_description": "Get radius of the bounding sphere of the shape",
    "bitbybit.occt.operations.boundingSphereShapeOfShape": "bsphere shape of shape",
    "boundingSphereShapeOfShape": "bsphere shape of shape",
    "bitbybit.occt.operations.boundingSphereShapeOfShape_description": "Get bounding sphere shape of the shape",
    "bitbybit.occt.operations.extrude": "extrude",
    "extrude": "extrude",
    "bitbybit.occt.operations.extrude_description": "extrudes shape along direction",
    "extrusions": "extrusions",
    "bitbybit.occt.operations.extrudeShapes": "extrude shapes",
    "extrudeShapes": "extrude shapes",
    "bitbybit.occt.operations.extrudeShapes_description": "extrudes shapes along direction",
    "bitbybit.occt.operations.splitShapeWithShapes": "split shape with shapes",
    "splitShapeWithShapes": "split shape with shapes",
    "bitbybit.occt.operations.splitShapeWithShapes_description": "splits shape with shapes",
    "divisions": "divisions",
    "localFuzzyTolerance": "local fuzzy tolerance",
    "nonDestructive": "non destructive",
    "bitbybit.occt.operations.revolve": "revolve",
    "revolve": "revolve",
    "bitbybit.occt.operations.revolve_description": "revolves shape around direction",
    "revolutions": "revolutions",
    "copy": "copy",
    "bitbybit.occt.operations.rotatedExtrude": "rotated extrude",
    "rotatedExtrude": "rotated extrude",
    "bitbybit.occt.operations.rotatedExtrude_description": "performs rotated extrude on shape",
    "bitbybit.occt.operations.pipe": "pipe",
    "pipe": "pipe",
    "bitbybit.occt.operations.pipe_description": "pipes shapes along wire",
    "pipeing": "piping",
    "bitbybit.occt.operations.pipePolylineWireNGon": "pipe polyline wire ngon",
    "pipePolylineWireNGon": "pipe polyline wire ngon",
    "bitbybit.occt.operations.pipePolylineWireNGon_description": "pipes polyline wire with ngon profile",
    "trihedronEnum": "trihedron enum",
    "geomFillTrihedronEnum": "geom fill trihedron enum",
    "forceApproxC1": "force approx c1",
    "bitbybit.occt.operations.pipeWiresCylindrical": "pipe wires cylindrical",
    "pipeWiresCylindrical": "pipe wires cylindrical",
    "bitbybit.occt.operations.pipeWiresCylindrical_description": "pipes wires with cylindrical shape",
    "bitbybit.occt.operations.pipeWireCylindrical": "pipe wire cylindrical",
    "pipeWireCylindrical": "pipe wire cylindrical",
    "bitbybit.occt.operations.pipeWireCylindrical_description": "pipes wire with cylindrical shape",
    "bitbybit.occt.operations.offset": "offset",
    "bitbybit.occt.operations.offset_description": "offsets shapes",
    "offsets": "offsets",
    "bitbybit.occt.operations.offsetAdv": "offset advanced",
    "offsetAdv": "offset advanced",
    "bitbybit.occt.operations.offsetAdv_description": "offsets with advanced options",
    "joinType": "join type",
    "joinTypeEnum": "join type enum",
    "removeIntEdges": "remove int edges",
    "bitbybit.occt.operations.makeThickSolidSimple": "make thick solid simple",
    "makeThickSolidSimple": "make thick solid simple",
    "bitbybit.occt.operations.makeThickSolidSimple_description": "thickens shape into solid",
    "bitbybit.occt.operations.makeThickSolidByJoin": "make thick solid by join",
    "makeThickSolidByJoin": "make thick solid by join",
    "bitbybit.occt.operations.makeThickSolidByJoin_description": "thickens shape into solid by joining",
    "intersection": "intersection",
    "selfIntersection": "self intersection",
    "bitbybit.occt.operations.slice": "slice",
    "slice": "slice",
    "bitbybit.occt.operations.slice_description": "slices shape",
    "bitbybit.occt.operations.sliceInStepPattern": "slice in step pattern",
    "sliceInStepPattern": "slice in step pattern",
    "bitbybit.occt.operations.sliceInStepPattern_description": "slices shape in step pattern",
    "steps": "steps",
    "bitbybit.occt.operations.offset3DWire": "offset 3d wire",
    "offset3DWire": "offset 3d wire",
    "bitbybit.occt.operations.offset3DWire_description": "offsets 3d wire",
    "bitbybit.occt.booleans.union": "union",
    "booleans": "booleans",
    "union": "union",
    "bitbybit.occt.booleans.union_description": "joins objects",
    "keepEdges": "keep edges",
    "bitbybit.occt.booleans.difference": "difference",
    "difference": "difference",
    "bitbybit.occt.booleans.difference_description": "performs boolean difference",
    "bitbybit.occt.booleans.intersection": "intersection",
    "bitbybit.occt.booleans.intersection_description": "performs boolean intersection",
    "bitbybit.occt.shapeFix.basicShapeRepair": "basic shape repair",
    "shapeFix": "shape fix",
    "basicShapeRepair": "basic shape repair",
    "bitbybit.occt.shapeFix.basicShapeRepair_description": "repairs shape",
    "maxTolerance": "max tolerance",
    "minTolerance": "min tolerance",
    "bitbybit.occt.shapeFix.fixSmallEdgeOnWire": "fix small edge on wire",
    "fixSmallEdgeOnWire": "fix small edge on wire",
    "bitbybit.occt.shapeFix.fixSmallEdgeOnWire_description": "fixes small edge on wire",
    "lockvtx": "lock vtx",
    "precsmall": "prec small",
    "bitbybit.occt.shapeFix.fixEdgeOrientationsAlongWire": "fix edge orientations along wire",
    "fixEdgeOrientationsAlongWire": "fix edge orientations along wire",
    "bitbybit.occt.shapeFix.fixEdgeOrientationsAlongWire_description": "fixes edge orientations along wire",
    "bitbybit.occt.io.saveShapeSTEP": "save shape step",
    "saveShapeSTEP": "save shape step",
    "bitbybit.occt.io.saveShapeSTEP_description": "saves step file",
    "adjustYtoZ": "adjust y to z",
    "tryDownload": "try download",
    "bitbybit.occt.io.saveShapeSTEPAndReturn": "save shape step and return",
    "saveShapeSTEPAndReturn": "save shape step and return",
    "bitbybit.occt.io.saveShapeSTEPAndReturn_description": "saves step file and returns text",
    "bitbybit.occt.io.saveShapeStl": "save shape stl",
    "saveShapeStl": "save shape stl",
    "bitbybit.occt.io.saveShapeStl_description": "saves stl file",
    "binary": "binary",
    "bitbybit.occt.io.saveShapeStlAndReturn": "save shape stl and return",
    "saveShapeStlAndReturn": "save shape stl and return",
    "bitbybit.occt.io.saveShapeStlAndReturn_description": "saves stl file and returns",
    "bitbybit.occt.io.loadSTEPorIGES": "load step or iges",
    "loadSTEPorIGES": "load step or iges",
    "bitbybit.occt.io.loadSTEPorIGES_description": "imports step or iges file",
    "adjustZtoY": "adjust z to y",
    "bitbybit.occt.io.loadSTEPorIGESFromText": "load step or iges from text",
    "loadSTEPorIGESFromText": "load step or iges from text",
    "bitbybit.occt.io.loadSTEPorIGESFromText_description": "imports step or iges from text",
    "fileType": "file type",
    "fileTypeEnum": "file type enum",
    "bitbybit.advanced.text3d.create": "text 3d",
    "advanced": "advanced",
    "text3d": "text 3d",
    "bitbybit.advanced.text3d.create_description": "creates 3d text",
    "fontType": "font type",
    "fontsEnum": "fonts enum",
    "fontVariant": "font variant",
    "fontVariantsEnum": "font variants enum",
    "Inputs.Base.Vector3": "inputs base vector 3",
    "originAlignment": "origin alignment",
    "recAlignmentEnum": "rec alignment enum",
    "bitbybit.advanced.text3d.createTextOnFace": "text on face",
    "createTextOnFace": "text on face",
    "bitbybit.advanced.text3d.createTextOnFace_description": "creates 3d text on face",
    "facePlanar": "face planar",
    "faceTextVar": "face text var",
    "faceTextVarEnum": "face text var enum",
    "originParamU": "origin param u",
    "originParamV": "origin param v",
    "bitbybit.advanced.text3d.createTextsOnFace": "texts on face",
    "createTextsOnFace": "texts on face",
    "bitbybit.advanced.text3d.createTextsOnFace_description": "creates 3d texts on face",
    "definitions": "definitions",
    "Text3DFaceDefinitionDto[]": "text 3d face definition dto array",
    "bitbybit.advanced.text3d.definition3dTextOnFace": "definition 3d text on face",
    "definition3dTextOnFace": "definition 3d text on face",
    "bitbybit.advanced.text3d.definition3dTextOnFace_description": "creates 3d text for face definition",
    "bitbybit.advanced.text3d.getCompoundShape": "get compound shape",
    "getCompoundShape": "get compound shape",
    "bitbybit.advanced.text3d.getCompoundShape_description": "gets compound shape of 3d text",
    "model": "model",
    "Text3DData<T>": "text 3d data t",
    "bitbybit.advanced.text3d.getCharacterShape": "get character shape",
    "getCharacterShape": "get character shape",
    "bitbybit.advanced.text3d.getCharacterShape_description": "gets character shape at index",
    "bitbybit.advanced.text3d.getCharacterShapes": "get character shapes",
    "getCharacterShapes": "get character shapes",
    "bitbybit.advanced.text3d.getCharacterShapes_description": "gets character shapes of 3d text",
    "bitbybit.advanced.text3d.getCharacterCenterCoordinates": "get character center coordinates",
    "getCharacterCenterCoordinates": "get character center coordinates",
    "bitbybit.advanced.text3d.getCharacterCenterCoordinates_description": "gets center coordinates of characters",
    "bitbybit.advanced.text3d.getFaceCutout": "get face cutout",
    "getFaceCutout": "get face cutout",
    "bitbybit.advanced.text3d.getFaceCutout_description": "gets face cutout from 3d text on face",
    "get from face": "get from face",
    "bitbybit.advanced.text3d.getAllFacesOfCutout": "get all faces of cutout",
    "getAllFacesOfCutout": "get all faces of cutout",
    "bitbybit.advanced.text3d.getAllFacesOfCutout_description": "gets all face cutouts from 3d text",
    "bitbybit.advanced.text3d.getCutoutsInsideCharacters": "get cutouts inside characters",
    "getCutoutsInsideCharacters": "get cutouts inside characters",
    "bitbybit.advanced.text3d.getCutoutsInsideCharacters_description": "gets character face cutouts from 3d text",
    "bitbybit.advanced.text3d.getAdvanceWidth": "get advance width",
    "getAdvanceWidth": "get advance width",
    "bitbybit.advanced.text3d.getAdvanceWidth_description": "gets advance width",
    "dimensions": "dimensions",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.createPyramidSimple": "pyramid simple",
    "facePatterns": "face patterns",
    "pyramidSimple": "pyramid simple",
    "createPyramidSimple": "pyramid simple",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.createPyramidSimple_description": "creates simple pyramid pattern on faces",
    "uNumber": "u number",
    "vNumber": "v number",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.createPyramidSimpleAffectors": "pyramid simple affectors",
    "createPyramidSimpleAffectors": "pyramid simple affectors",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.createPyramidSimpleAffectors_description": "creates pyramid pattern with affectors",
    "affectorPoints": "affector points",
    "Inputs.Base.Point3[]": "inputs base point 3 array",
    "affectorRadiusList": "affector radius list",
    "affectorFactors": "affector factors",
    "defaultHeight": "default height",
    "affectMinHeight": "affect min height",
    "affectMaxHeight": "affect max height",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShape": "get compound shape",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShape_description": "gets compound shape of pyramids",
    "get shapes": "get shapes",
    "PyramidSimpleData<T>": "pyramid simple data t",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapeOnFace": "get compound shape on face",
    "getCompoundShapeOnFace": "get compound shape on face",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapeOnFace_description": "gets compound shape on face",
    "faceIndex": "face index",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapeCellOnFace": "get compound shape cell on face",
    "getCompoundShapeCellOnFace": "get compound shape cell on face",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapeCellOnFace_description": "gets pyramid shape on face at index",
    "uIndex": "u index",
    "vIndex": "v index",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidCells": "get all pyramid cells",
    "getAllPyramidCells": "get all pyramid cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidCells_description": "gets all pyramid cells",
    "get cells": "get cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidCellsOnFace": "get all pyramid cells on face",
    "getAllPyramidCellsOnFace": "get all pyramid cells on face",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidCellsOnFace_description": "gets pyramid cells on face",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFace": "get all pyramid u cells on face",
    "getAllPyramidUCellsOnFace": "get all pyramid u cells on face",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFace_description": "gets pyramid u cells on face",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFaceAtU": "get all pyramid u cells on face at u",
    "getAllPyramidUCellsOnFaceAtU": "get all pyramid u cells on face at u",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFaceAtU_description": "gets pyramid cells on face at u",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFaceAtV": "get all pyramid u cells on face at v",
    "getAllPyramidUCellsOnFaceAtV": "get all pyramid u cells on face at v",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFaceAtV_description": "gets pyramid cells on face at v",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCellOnIndex": "get cell on index",
    "getCellOnIndex": "get cell on index",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCellOnIndex_description": "gets pyramid cell on face at u and v",
    "get cell": "get cell",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getTopPointsOfCells": "get top points of cells",
    "getTopPointsOfCells": "get top points of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getTopPointsOfCells_description": "gets top points of cells",
    "get from cells": "get from cells",
    "cells": "cells",
    "PyramidSimpleCellPart<T>[]": "pyramid simple cell part t array",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCenterPointsOfCells": "get center points of cells",
    "getCenterPointsOfCells": "get center points of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCenterPointsOfCells_description": "gets center points of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerPointsOfCells": "get corner points of cells",
    "getCornerPointsOfCells": "get corner points of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerPointsOfCells_description": "gets corner points of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerPointOfCells": "get corner point of cells",
    "getCornerPointOfCells": "get corner point of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerPointOfCells_description": "gets corner point of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerNormalOfCells": "get corner normal of cells",
    "getCornerNormalOfCells": "get corner normal of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerNormalOfCells_description": "gets corner normal of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerNormalsOfCells": "get corner normals of cells",
    "getCornerNormalsOfCells": "get corner normals of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerNormalsOfCells_description": "gets corner normals of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapesOfCells": "get compound shapes of cells",
    "getCompoundShapesOfCells": "get compound shapes of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapesOfCells_description": "gets compound shapes of pyramid cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getFaceShapesOfCells": "get face shapes of cells",
    "getFaceShapesOfCells": "get face shapes of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getFaceShapesOfCells_description": "gets face shapes of pyramid cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getWireShapesOfCells": "get wire shapes of cells",
    "getWireShapesOfCells": "get wire shapes of cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getWireShapesOfCells_description": "gets wire shapes of pyramid cells",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getStartPolylineWireU": "get start polyline wire u",
    "getStartPolylineWireU": "get start polyline wire u",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getStartPolylineWireU_description": "gets polyline wire along start u edge",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getEndPolylineWireU": "get end polyline wire u",
    "getEndPolylineWireU": "get end polyline wire u",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getEndPolylineWireU_description": "gets polyline wire along end u edge",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getStartPolylineWireV": "get start polyline wire v",
    "getStartPolylineWireV": "get start polyline wire v",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getStartPolylineWireV_description": "gets polyline wire along start v edge",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getEndPolylineWireV": "get end polyline wire v",
    "getEndPolylineWireV": "get end polyline wire v",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getEndPolylineWireV_description": "gets polyline wire along end v edge",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getPolylineWiresUCompound": "get polyline wires u compound",
    "getPolylineWiresUCompound": "get polyline wires u compound",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getPolylineWiresUCompound_description": "gets polyline wires along u",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getPolylineWiresVCompound": "get polyline wires v compound",
    "getPolylineWiresVCompound": "get polyline wires v compound",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getPolylineWiresVCompound_description": "gets polyline wires along v",
    "bitbybit.things.kidsCorner.birdhouses.wingtipVilla.create": "wingtip villa",
    "things": "things",
    "kidsCorner": "kids corner",
    "birdhouses": "birdhouses",
    "wingtipVilla": "wingtip villa",
    "bitbybit.things.kidsCorner.birdhouses.wingtipVilla.create_description": "creates wingtip villa birdhouse",
    "birdhouse": "birdhouse",
    "interiorWidth": "interior width",
    "interiorLength": "interior length",
    "interiorHeight": "interior height",
    "holeDiameter": "hole diameter",
    "holeDistToBottom": "hole dist to bottom",
    "stickLength": "stick length",
    "stickDiameter": "stick diameter",
    "baseAttachmentHeight": "base attachment height",
    "roofOverhang": "roof overhang",
    "chimneyHeight": "chimney height",
    "Inputs.Base.Point3": "inputs base point 3",
    "bitbybit.things.kidsCorner.birdhouses.chirpyChalet.create": "chirpy chalet",
    "chirpyChalet": "chirpy chalet",
    "bitbybit.things.kidsCorner.birdhouses.chirpyChalet.create_description": "creates chirpy chalet birdhouse",
    "roofAngle": "roof angle",
    "bitbybit.things.threeDPrinting.vases.serenitySwirl.create": "serenity swirl",
    "threeDPrinting": "3D printing",
    "vases": "vases",
    "serenitySwirl": "serenity swirl",
    "bitbybit.things.threeDPrinting.vases.serenitySwirl.create_description": "creates serenity swirl vase",
    "swirl": "swirl",
    "addRadiusNarrow": "add radius narrow",
    "addRadiusWide": "add radius wide",
    "addMiddleHeight": "add middle height",
    "addTopHeight": "add top height",
    "bitbybit.things.threeDPrinting.vases.arabicArchway.create": "arabic archway",
    "arabicArchway": "arabic archway",
    "bitbybit.things.threeDPrinting.vases.arabicArchway.create_description": "creates arabic archway vase",
    "profilePoints": "profile points",
    "nrOfSides": "nr of sides",
    "nrOfVerticalArches": "nr of vertical arches",
    "archCenterThickness": "arch center thickness",
    "edgesThickness": "edges thickness",
    "baseHeight": "base height",
    "patchHoles": "patch holes",
    "lod": "lod",
    "Things.Enums.lodEnum": "things enums lod enum",
    "bitbybit.things.threeDPrinting.medals.eternalLove.create": "eternal love",
    "medals": "medals",
    "eternalLove": "eternal love",
    "bitbybit.things.threeDPrinting.medals.eternalLove.create_description": "creates eternal love medal",
    "textHeading": "text heading",
    "textName": "text name",
    "fullModel": "full model",
    "decorationThickness": "decoration thickness",
    "bitbybit.things.threeDPrinting.cups.calmCup.create": "calm cup",
    "cups": "cups",
    "calmCup": "calm cup",
    "bitbybit.things.threeDPrinting.cups.calmCup.create_description": "creates calm cup model",
    "radiusTopOffset": "radius top offset",
    "fillet": "fillet",
    "nrOfHandles": "nr of handles",
    "handleDist": "handle dist",
    "bitbybit.things.threeDPrinting.cups.dragonCup.create": "dragon cup",
    "dragonCup": "dragon cup",
    "bitbybit.things.threeDPrinting.cups.dragonCup.create_description": "creates dragon cup model",
    "radiusMidOffset": "radius mid offset",
    "rotationTopAngle": "rotation top angle",
    "rotationMidAngle": "rotation mid angle",
    "nrSkinCellsVertical": "nr skin cells vertical",
    "nrSkinCellsHorizontal": "nr skin cells horizontal",
    "nrSkinCellDivisionsTop": "nr skin cell divisions top",
    "nrSkinCellDivisionsBottom": "nr skin cell divisions bottom",
    "skinCellOuterHeight": "skin cell outer height",
    "skinCellInnerHeight": "skin cell inner height",
    "skinCellBottomHeight": "skin cell bottom height",
    "skinCellTopHeight": "skin cell top height",
    "bottomThickness": "bottom thickness",
    "bitbybit.things.threeDPrinting.cups.dragonCup.getCompoundShape": "get compound shape",
    "bitbybit.things.threeDPrinting.cups.dragonCup.getCompoundShape_description": "gets compound shape of dragon cup",
    "DragonCupData<T>": "dragon cup data t",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.create": "phone nest",
    "desktop": "desktop",
    "phoneNest": "phone nest",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.create_description": "creates phone nest model",
    "heightBottom": "height bottom",
    "heightTop": "height top",
    "widthBack": "width back",
    "widthFront": "width front",
    "backOffset": "back offset",
    "applyOrnaments": "apply ornaments",
    "filletRadius": "fillet radius",
    "phoneHeight": "phone height",
    "phoneWidth": "phone width",
    "phoneThickness": "phone thickness",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.getCompoundShape": "get compound shape",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.getCompoundShape_description": "gets compound shape of phone nest",
    "PhoneNestData<T>": "phone nest data t",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.drawOptions": "draw options",
    "drawOptions": "draw options",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.drawOptions_description": "creates draw options for model",
    "mainMaterial": "main material",
    "phoneMaterial": "phone material",
    "Inputs.Base.Color": "inputs base color",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.create": "droplets phone holder",
    "laserCutting": "laser cutting",
    "gadgets": "gadgets",
    "dropletsPhoneHolder": "droplets phone holder",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.create_description": "creates droplets phone holder",
    "title": "title",
    "subtitle": "subtitle",
    "includeLogo": "include logo",
    "kerf": "kerf",
    "backLength": "back length",
    "offsetAroundPhone": "offset around phone",
    "penShelf": "pen shelf",
    "phoneLockHeight": "phone lock height",
    "includePattern": "include pattern",
    "densityPattern": "density pattern",
    "holesForWire": "holes for wire",
    "wireInputThickness": "wire input thickness",
    "includeModel": "include model",
    "includeDrawings": "include drawings",
    "spacingDrawings": "spacing drawings",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getCompoundShape": "get compound shape",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getCompoundShape_description": "gets compound shape of droplets phone holder",
    "DropletsPhoneHolderData<T>": "droplets phone holder data t",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getCutWiresCompound": "get cut wires compound",
    "getCutWiresCompound": "get cut wires compound",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getCutWiresCompound_description": "gets cut wires compound",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getEngravingWiresCompound": "get engraving wires compound",
    "getEngravingWiresCompound": "get engraving wires compound",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getEngravingWiresCompound_description": "gets engraving wires compound",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.downloadDXFDrawings": "download dxf drawings",
    "downloadDXFDrawings": "download dxf drawings",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.downloadDXFDrawings_description": "downloads dxf drawing",
    "download": "download",
    "cutWiresColor": "cut wires color",
    "engravingWiresColor": "engraving wires color",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.downloadSTEPDrawings": "download step drawings",
    "downloadSTEPDrawings": "download step drawings",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.downloadSTEPDrawings_description": "downloads step drawing",
    "adjustYZ": "adjust yz",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.download3dSTEPModel": "download 3d step model",
    "download3dSTEPModel": "download 3d step model",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.download3dSTEPModel_description": "downloads step 3d model",
    "bitbybit.things.architecture.houses.zenHideout.create": "zen hideout",
    "architecture": "architecture",
    "houses": "houses",
    "zenHideout": "zen hideout",
    "bitbybit.things.architecture.houses.zenHideout.create_description": "creates zen hideout",
    "widthFirstWing": "width first wing",
    "lengthFirstWing": "length first wing",
    "terraceWidth": "terrace width",
    "widthSecondWing": "width second wing",
    "lengthSecondWing": "length second wing",
    "heightWalls": "height walls",
    "roofAngleFirstWing": "roof angle first wing",
    "roofAngleSecondWing": "roof angle second wing",
    "roofOffset": "roof offset",
    "roofInsideOverhang": "roof inside overhang",
    "roofMaxDistAttachmentBeams": "roof max dist attachment beams",
    "roofAttachmentBeamWidth": "roof attachment beam width",
    "roofAttachmentBeamHeight": "roof attachment beam height",
    "roofOutsideOverhang": "roof outside overhang",
    "columnSize": "column size",
    "ceilingBeamHeight": "ceiling beam height",
    "ceilingBeamWidth": "ceiling beam width",
    "nrCeilingBeamsBetweenColumns": "nr ceiling beams between columns",
    "distBetweenColumns": "dist between columns",
    "floorHeight": "floor height",
    "groundLevel": "ground level",
    "facadePanelThickness": "facade panel thickness",
    "windowWidthOffset": "window width offset",
    "windowHeightOffset": "window height offset",
    "windowFrameThickness": "window frame thickness",
    "windowGlassFrameThickness": "window glass frame thickness",
    "skinOpacity": "skin opacity",
    "bitbybit.things.furniture.chairs.snakeChair.create": "snake chair",
    "furniture": "furniture",
    "chairs": "chairs",
    "snakeChair": "snake chair",
    "bitbybit.things.furniture.chairs.snakeChair.create_description": "creates snake chair model",
    "sittingHeight": "sitting height",
    "backRestOffset": "back rest offset",
    "backRestHeight": "back rest height",
    "nrOrnamentPlanks": "nr ornament planks",
    "ornamentDepth": "ornament depth",
    "bitbybit.things.furniture.chairs.snakeChair.getCompoundShape": "get compound shape",
    "bitbybit.things.furniture.chairs.snakeChair.getCompoundShape_description": "gets compound shape of chair",
    "SnakeChairData<T>": "snake chair data t",
    "bitbybit.things.furniture.chairs.snakeChair.getSittingWireShape": "get sitting wire shape",
    "getSittingWireShape": "get sitting wire shape",
    "bitbybit.things.furniture.chairs.snakeChair.getSittingWireShape_description": "gets wire shape of sitting area",
    "bitbybit.things.furniture.chairs.snakeChair.getSittingAreaCenterPoint": "get sitting area center point",
    "getSittingAreaCenterPoint": "get sitting area center point",
    "bitbybit.things.furniture.chairs.snakeChair.getSittingAreaCenterPoint_description": "gets center point of sitting area",
    "get points": "get points",
    "bitbybit.things.furniture.chairs.snakeChair.drawOptions": "draw options",
    "bitbybit.things.furniture.chairs.snakeChair.drawOptions_description": "creates draw options for snake chair",
    "bitbybit.things.furniture.tables.elegantTable.create": "elegant table",
    "tables": "tables",
    "elegantTable": "elegant table",
    "bitbybit.things.furniture.tables.elegantTable.create_description": "creates elegant table model",
    "topThickness": "top thickness",
    "topOffset": "top offset",
    "minFillet": "min fillet",
    "radiusLegTop": "radius leg top",
    "radiusLegBottom": "radius leg bottom",
    "nrLegPairs": "nr leg pairs",
    "bitbybit.things.furniture.tables.elegantTable.getCompoundShape": "get compound shape",
    "bitbybit.things.furniture.tables.elegantTable.getCompoundShape_description": "gets compound shape of table",
    "ElegantTableData<T>": "elegant table data t",
    "bitbybit.things.furniture.tables.elegantTable.getLegShapes": "get leg shapes",
    "getLegShapes": "get leg shapes",
    "bitbybit.things.furniture.tables.elegantTable.getLegShapes_description": "gets leg shapes as list",
    "bitbybit.things.furniture.tables.elegantTable.getLegShapeByIndex": "get leg shape by index",
    "getLegShapeByIndex": "get leg shape by index",
    "bitbybit.things.furniture.tables.elegantTable.getLegShapeByIndex_description": "gets leg shape by index",
    "bitbybit.things.furniture.tables.elegantTable.getTopPanelShape": "get top panel shape",
    "getTopPanelShape": "get top panel shape",
    "bitbybit.things.furniture.tables.elegantTable.getTopPanelShape_description": "gets table top panel shape",
    "bitbybit.things.furniture.tables.elegantTable.getTopPanelWireShape": "get top panel wire shape",
    "getTopPanelWireShape": "get top panel wire shape",
    "bitbybit.things.furniture.tables.elegantTable.getTopPanelWireShape_description": "gets table top panel wire shape",
    "bitbybit.things.furniture.tables.elegantTable.getBottomPanelWireShape": "get bottom panel wire shape",
    "getBottomPanelWireShape": "get bottom panel wire shape",
    "bitbybit.things.furniture.tables.elegantTable.getBottomPanelWireShape_description": "gets table bottom panel wire shape",
    "bitbybit.things.furniture.tables.elegantTable.getBottomPanelShape": "get bottom panel shape",
    "getBottomPanelShape": "get bottom panel shape",
    "bitbybit.things.furniture.tables.elegantTable.getBottomPanelShape_description": "gets table bottom panel shape",
    "bitbybit.things.furniture.tables.elegantTable.getLegsCompoundShape": "get legs compound shape",
    "getLegsCompoundShape": "get legs compound shape",
    "bitbybit.things.furniture.tables.elegantTable.getLegsCompoundShape_description": "gets leg shapes as compound shape",
    "bitbybit.things.furniture.tables.elegantTable.getTableTopCenterPoint": "get table top center point",
    "getTableTopCenterPoint": "get table top center point",
    "bitbybit.things.furniture.tables.elegantTable.getTableTopCenterPoint_description": "gets top center point",
    "bitbybit.things.furniture.tables.elegantTable.getTableBottomCenterPoint": "get table bottom center point",
    "getTableBottomCenterPoint": "get table bottom center point",
    "bitbybit.things.furniture.tables.elegantTable.getTableBottomCenterPoint_description": "gets bottom center point",
    "bitbybit.things.furniture.tables.elegantTable.getLegBottomPoints": "get leg bottom points",
    "getLegBottomPoints": "get leg bottom points",
    "bitbybit.things.furniture.tables.elegantTable.getLegBottomPoints_description": "gets leg bottom points",
    "bitbybit.things.furniture.tables.elegantTable.getLegTopPoints": "get leg top points",
    "getLegTopPoints": "get leg top points",
    "bitbybit.things.furniture.tables.elegantTable.getLegTopPoints_description": "gets leg top points",
    "bitbybit.things.furniture.tables.elegantTable.drawOptions": "draw options",
    "bitbybit.things.furniture.tables.elegantTable.drawOptions_description": "creates draw options for elegant table",
    "topMaterial": "top material",
    "topBaseMaterial": "top base material",
    "legsMaterial": "legs material",
    "bitbybit.things.furniture.tables.goodCoffeeTable.create": "good coffee table",
    "goodCoffeeTable": "good coffee table",
    "bitbybit.things.furniture.tables.goodCoffeeTable.create_description": "creates good coffee table model",
    "chamfer": "chamfer",
    "topGlassOffset": "top glass offset",
    "glassThickness": "glass thickness",
    "glassHolderLength": "glass holder length",
    "shelfTopOffset": "shelf top offset",
    "shelfThickness": "shelf thickness",
    "legWidth": "leg width",
    "legDepth": "leg depth",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getCompoundShape": "get compound shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getCompoundShape_description": "gets compound shape of table",
    "GoodCoffeeTableData<T>": "good coffee table data t",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegShapes": "get leg shapes",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegShapes_description": "gets leg shapes as list",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegShapeByIndex": "get leg shape by index",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegShapeByIndex_description": "gets leg shape by index",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTopPanelShape": "get top panel shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTopPanelShape_description": "gets table top panel shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTopPanelWireShape": "get top panel wire shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTopPanelWireShape_description": "gets table top panel wire shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getGlassPanelShape": "get glass panel shape",
    "getGlassPanelShape": "get glass panel shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getGlassPanelShape_description": "gets table glass panel shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getGlassPanelWireShape": "get glass panel wire shape",
    "getGlassPanelWireShape": "get glass panel wire shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getGlassPanelWireShape_description": "gets table glass panel wire shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getShelfShape": "get shelf shape",
    "getShelfShape": "get shelf shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getShelfShape_description": "gets table shelf shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getShelfTopWireShape": "get shelf top wire shape",
    "getShelfTopWireShape": "get shelf top wire shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getShelfTopWireShape_description": "gets table shelf top wire shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegsCompoundShape": "get legs compound shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegsCompoundShape_description": "gets leg shapes as compound shape",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTableTopCenterPoint": "get table top center point",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTableTopCenterPoint_description": "gets top center point",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTableShelfTopCenterPoint": "get table shelf top center point",
    "getTableShelfTopCenterPoint": "get table shelf top center point",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTableShelfTopCenterPoint_description": "gets top center point of shelf",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegBottomPoints": "get leg bottom points",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegBottomPoints_description": "gets leg bottom points",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegTopPoints": "get leg top points",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegTopPoints_description": "gets leg top points",
    "bitbybit.things.furniture.tables.goodCoffeeTable.drawOptions": "draw options",
    "bitbybit.things.furniture.tables.goodCoffeeTable.drawOptions_description": "creates draw options for good coffee table",
    "topGlassMaterial": "top glass material",
    "shelfMaterial": "shelf material",
    "bitbybit.things.furniture.tables.snakeTable.create": "snake table",
    "snakeTable": "snake table",
    "bitbybit.things.furniture.tables.snakeTable.create_description": "creates snake table model",
    "supportLength": "support length",
    "shelfHeight": "shelf height",
    "glassOffset": "glass offset",
    "bitbybit.things.furniture.tables.snakeTable.getCompoundShape": "get compound shape",
    "bitbybit.things.furniture.tables.snakeTable.getCompoundShape_description": "gets compound shape of table",
    "SnakeTableData<T>": "snake table data t",
    "bitbybit.things.furniture.tables.snakeTable.getGlassShape": "get glass shape",
    "getGlassShape": "get glass shape",
    "bitbybit.things.furniture.tables.snakeTable.getGlassShape_description": "gets glass shape of table",
    "bitbybit.things.furniture.tables.snakeTable.getMainShape": "get main shape",
    "getMainShape": "get main shape",
    "bitbybit.things.furniture.tables.snakeTable.getMainShape_description": "gets main solid shape of table",
    "bitbybit.things.furniture.tables.snakeTable.getTopCenterPoint": "get top center point",
    "getTopCenterPoint": "get top center point",
    "bitbybit.things.furniture.tables.snakeTable.getTopCenterPoint_description": "gets center point of table top",
    "bitbybit.things.furniture.tables.snakeTable.drawOptions": "draw options",
    "bitbybit.things.furniture.tables.snakeTable.drawOptions_description": "creates draw options for snake table",
    "glassMaterial": "glass material",
    "bitbybit.things.enums.lodEnum": "lod enum",
    "enums": "enums",
    "lodEnum": "lod enum",
    "bitbybit.things.enums.lodEnum_description": "creates level of detail enum value",
    "bitbybit.jscad.transformSolids": "transform solids",
    "jscad": "jscad",
    "transformSolids": "transform solids",
    "bitbybit.jscad.transformSolids_description": "transforms jscad solid meshes with transformations",
    "JSCADEntity[]": "jscad entity array",
    "bitbybit.jscad.transformSolid": "transform solid",
    "transformSolid": "transform solid",
    "bitbybit.jscad.transformSolid_description": "transforms jscad solid mesh with transformations",
    "JSCADEntity": "jscad entity",
    "bitbybit.jscad.downloadSolidSTL": "download solid stl",
    "downloadSolidSTL": "download solid stl",
    "bitbybit.jscad.downloadSolidSTL_description": "downloads binary stl file from 3d solid",
    "bitbybit.jscad.downloadSolidsSTL": "download solids stl",
    "downloadSolidsSTL": "download solids stl",
    "bitbybit.jscad.downloadSolidsSTL_description": "downloads binary stl file from 3d solids",
    "bitbybit.jscad.downloadGeometryDxf": "download geometry dxf",
    "downloadGeometryDxf": "download geometry dxf",
    "bitbybit.jscad.downloadGeometryDxf_description": "downloads dxf file from jscad geometry",
    "geometry": "geometry",
    "JSCADEntity | JSCADEntity[]": "jscad entity or array",
    "bitbybit.jscad.downloadGeometry3MF": "download geometry 3mf",
    "downloadGeometry3MF": "download geometry 3mf",
    "bitbybit.jscad.downloadGeometry3MF_description": "downloads 3mf file from jscad geometry",
    "bitbybit.jscad.booleans.intersect": "intersect",
    "intersect": "intersect",
    "bitbybit.jscad.booleans.intersect_description": "intersects multiple solid mesh objects",
    "bitbybit.jscad.booleans.subtract": "subtract",
    "subtract": "subtract",
    "bitbybit.jscad.booleans.subtract_description": "subtracts multiple solid mesh objects",
    "bitbybit.jscad.booleans.union": "union",
    "bitbybit.jscad.booleans.union_description": "unions multiple solid mesh objects",
    "bitbybit.jscad.booleans.intersectTwo": "intersect two",
    "intersectTwo": "intersect two",
    "bitbybit.jscad.booleans.intersectTwo_description": "intersects two solid mesh objects",
    "bitbybit.jscad.booleans.subtractTwo": "subtract two",
    "subtractTwo": "subtract two",
    "bitbybit.jscad.booleans.subtractTwo_description": "subtracts two solid mesh objects",
    "bitbybit.jscad.booleans.unionTwo": "union two",
    "unionTwo": "union two",
    "bitbybit.jscad.booleans.unionTwo_description": "unions two solid mesh objects",
    "bitbybit.jscad.booleans.subtractFrom": "subtract from",
    "subtractFrom": "subtract from",
    "bitbybit.jscad.booleans.subtractFrom_description": "subtracts multiple meshes from one mesh",
    "bitbybit.jscad.expansions.expand": "expand",
    "expansions": "expansions",
    "expand": "expand",
    "bitbybit.jscad.expansions.expand_description": "expands solid geometries",
    "expansion": "expansion",
    "delta": "delta",
    "corners": "corners",
    "solidCornerTypeEnum": "solid corner type enum",
    "bitbybit.jscad.expansions.offset": "offset",
    "bitbybit.jscad.expansions.offset_description": "offsets 2d geometries",
    "bitbybit.jscad.extrusions.extrudeLinear": "extrude linear",
    "extrudeLinear": "extrude linear",
    "bitbybit.jscad.extrusions.extrudeLinear_description": "linear extrudes 2d geometries",
    "twistAngle": "twist angle",
    "twistSteps": "twist steps",
    "bitbybit.jscad.extrusions.extrudeRectangular": "extrude rectangular",
    "extrudeRectangular": "extrude rectangular",
    "bitbybit.jscad.extrusions.extrudeRectangular_description": "rectangular extrudes 2d geometries",
    "bitbybit.jscad.extrusions.extrudeRectangularPoints": "extrude rectangular points",
    "extrudeRectangularPoints": "extrude rectangular points",
    "bitbybit.jscad.extrusions.extrudeRectangularPoints_description": "rectangular extrudes 2d points",
    "bitbybit.jscad.extrusions.extrudeRotate": "extrude rotate",
    "extrudeRotate": "extrude rotate",
    "bitbybit.jscad.extrusions.extrudeRotate_description": "rotates and extrudes 2d points",
    "polygon": "polygon",
    "startAngle": "start angle",
    "bitbybit.jscad.hulls.hullChain": "hull chain",
    "hulls": "hulls",
    "hullChain": "hull chain",
    "bitbybit.jscad.hulls.hullChain_description": "connects solids or 2d geometries in order",
    "bitbybit.jscad.hulls.hull": "hull",
    "hull": "hull",
    "bitbybit.jscad.hulls.hull_description": "convex hull connects solids or 2d geometries",
    "bitbybit.jscad.path.createFromPoints": "from points",
    "createFromPoints": "from points",
    "bitbybit.jscad.path.createFromPoints_description": "creates 2d path from points",
    "Base.Point2[]": "base point 2 array",
    "bitbybit.jscad.path.createPathsFromPoints": "paths from points",
    "createPathsFromPoints": "paths from points",
    "bitbybit.jscad.path.createPathsFromPoints_description": "creates 2d paths from points lists",
    "pointsLists": "points lists",
    "Base.Point3[][] | Base.Point2[][]": "base point 3 or 2 array",
    "bitbybit.jscad.path.createFromPolyline": "from polyline",
    "createFromPolyline": "from polyline",
    "bitbybit.jscad.path.createFromPolyline_description": "creates 2d path from polyline",
    "bitbybit.jscad.path.createEmpty": "empty",
    "createEmpty": "empty",
    "bitbybit.jscad.path.createEmpty_description": "creates empty 2d path",
    "bitbybit.jscad.path.close": "close",
    "close": "close",
    "bitbybit.jscad.path.close_description": "closes open 2d path",
    "bitbybit.jscad.path.appendPoints": "append points",
    "appendPoints": "append points",
    "bitbybit.jscad.path.appendPoints_description": "appends path with 2d points",
    "append": "append",
    "bitbybit.jscad.path.appendPolyline": "append polyline",
    "appendPolyline": "append polyline",
    "bitbybit.jscad.path.appendPolyline_description": "appends path with polyline",
    "bitbybit.jscad.path.appendArc": "append arc",
    "appendArc": "append arc",
    "bitbybit.jscad.path.appendArc_description": "appends arc to path",
    "xAxisRotation": "x axis rotation",
    "clockwise": "clockwise",
    "large": "large",
    "bitbybit.jscad.polygon.createFromPoints": "from points",
    "bitbybit.jscad.polygon.createFromPoints_description": "creates 2d polygon from points",
    "bitbybit.jscad.polygon.createFromPolyline": "from polyline",
    "bitbybit.jscad.polygon.createFromPolyline_description": "creates 2d polygon from polyline",
    "bitbybit.jscad.polygon.createFromCurve": "from curve",
    "createFromCurve": "from curve",
    "bitbybit.jscad.polygon.createFromCurve_description": "creates 2d polygon from curve",
    "bitbybit.jscad.polygon.createFromPath": "from path",
    "createFromPath": "from path",
    "bitbybit.jscad.polygon.createFromPath_description": "creates 2d polygon from path",
    "bitbybit.jscad.polygon.circle": "circle",
    "bitbybit.jscad.polygon.circle_description": "creates 2d polygon circle",
    "bitbybit.jscad.polygon.ellipse": "ellipse",
    "ellipse": "ellipse",
    "bitbybit.jscad.polygon.ellipse_description": "creates 2d polygon ellipse",
    "bitbybit.jscad.polygon.rectangle": "rectangle",
    "rectangle": "rectangle",
    "bitbybit.jscad.polygon.rectangle_description": "creates 2d polygon rectangle",
    "bitbybit.jscad.polygon.roundedRectangle": "rounded rectangle",
    "roundedRectangle": "rounded rectangle",
    "bitbybit.jscad.polygon.roundedRectangle_description": "creates 2d rounded rectangle",
    "roundRadius": "round radius",
    "bitbybit.jscad.polygon.square": "square",
    "square": "square",
    "bitbybit.jscad.polygon.square_description": "creates 2d polygon square",
    "bitbybit.jscad.polygon.star": "star",
    "star": "star",
    "bitbybit.jscad.polygon.star_description": "creates 2d polygon star",
    "vertices": "vertices",
    "bitbybit.jscad.shapes.cube": "cube",
    "cube": "cube",
    "bitbybit.jscad.shapes.cube_description": "creates 3d cube shape",
    "bitbybit.jscad.shapes.cubesOnCenterPoints": "cubes on center points",
    "cubesOnCenterPoints": "cubes on center points",
    "bitbybit.jscad.shapes.cubesOnCenterPoints_description": "creates 3d cubes on center points",
    "primitives on centers": "primitives on centers",
    "bitbybit.jscad.shapes.cuboid": "cuboid",
    "cuboid": "cuboid",
    "bitbybit.jscad.shapes.cuboid_description": "creates 3d cuboid shape",
    "bitbybit.jscad.shapes.cuboidsOnCenterPoints": "cuboids on center points",
    "cuboidsOnCenterPoints": "cuboids on center points",
    "bitbybit.jscad.shapes.cuboidsOnCenterPoints_description": "creates 3d cuboids on center points",
    "bitbybit.jscad.shapes.cylinderElliptic": "cylinder elliptic",
    "cylinderElliptic": "cylinder elliptic",
    "bitbybit.jscad.shapes.cylinderElliptic_description": "creates 3d elliptic cylinder solid",
    "startRadius": "start radius",
    "endRadius": "end radius",
    "bitbybit.jscad.shapes.cylinderEllipticOnCenterPoints": "cylinder elliptic on center points",
    "cylinderEllipticOnCenterPoints": "cylinder elliptic on center points",
    "bitbybit.jscad.shapes.cylinderEllipticOnCenterPoints_description": "creates 3d elliptic cylinders on center points",
    "bitbybit.jscad.shapes.cylinder": "cylinder",
    "cylinder": "cylinder",
    "bitbybit.jscad.shapes.cylinder_description": "creates 3d cylinder solid",
    "bitbybit.jscad.shapes.cylindersOnCenterPoints": "cylinders on center points",
    "cylindersOnCenterPoints": "cylinders on center points",
    "bitbybit.jscad.shapes.cylindersOnCenterPoints_description": "creates 3d cylinders on center points",
    "bitbybit.jscad.shapes.ellipsoid": "ellipsoid",
    "ellipsoid": "ellipsoid",
    "bitbybit.jscad.shapes.ellipsoid_description": "creates 3d ellipsoid solid",
    "bitbybit.jscad.shapes.ellipsoidsOnCenterPoints": "ellipsoids on center points",
    "ellipsoidsOnCenterPoints": "ellipsoids on center points",
    "bitbybit.jscad.shapes.ellipsoidsOnCenterPoints_description": "creates 3d ellipsoids on center points",
    "bitbybit.jscad.shapes.geodesicSphere": "geodesic sphere",
    "geodesicSphere": "geodesic sphere",
    "bitbybit.jscad.shapes.geodesicSphere_description": "creates 3d geodesic sphere solid",
    "frequency": "frequency",
    "bitbybit.jscad.shapes.geodesicSpheresOnCenterPoints": "geodesic spheres on center points",
    "geodesicSpheresOnCenterPoints": "geodesic spheres on center points",
    "bitbybit.jscad.shapes.geodesicSpheresOnCenterPoints_description": "creates 3d geodesic spheres on center points",
    "bitbybit.jscad.shapes.roundedCuboid": "rounded cuboid",
    "roundedCuboid": "rounded cuboid",
    "bitbybit.jscad.shapes.roundedCuboid_description": "creates 3d rounded cuboid solid",
    "bitbybit.jscad.shapes.roundedCuboidsOnCenterPoints": "rounded cuboids on center points",
    "roundedCuboidsOnCenterPoints": "rounded cuboids on center points",
    "bitbybit.jscad.shapes.roundedCuboidsOnCenterPoints_description": "creates 3d rounded cuboids on center points",
    "bitbybit.jscad.shapes.roundedCylinder": "rounded cylinder",
    "roundedCylinder": "rounded cylinder",
    "bitbybit.jscad.shapes.roundedCylinder_description": "creates 3d rounded cylinder solid",
    "bitbybit.jscad.shapes.roundedCylindersOnCenterPoints": "rounded cylinders on center points",
    "roundedCylindersOnCenterPoints": "rounded cylinders on center points",
    "bitbybit.jscad.shapes.roundedCylindersOnCenterPoints_description": "creates 3d rounded cylinders on center points",
    "bitbybit.jscad.shapes.sphere": "sphere",
    "sphere": "sphere",
    "bitbybit.jscad.shapes.sphere_description": "creates 3d sphere solid",
    "bitbybit.jscad.shapes.spheresOnCenterPoints": "spheres on center points",
    "spheresOnCenterPoints": "spheres on center points",
    "bitbybit.jscad.shapes.spheresOnCenterPoints_description": "creates 3d spheres on center points",
    "bitbybit.jscad.shapes.torus": "torus",
    "torus": "torus",
    "bitbybit.jscad.shapes.torus_description": "creates 3d torus solid",
    "innerSegments": "inner segments",
    "outerSegments": "outer segments",
    "innerRotation": "inner rotation",
    "outerRotation": "outer rotation",
    "bitbybit.jscad.shapes.fromPolygonPoints": "from polygon points",
    "fromPolygonPoints": "from polygon points",
    "bitbybit.jscad.shapes.fromPolygonPoints_description": "creates 3d shape from nested polygon points",
    "polygonPoints": "polygon points",
    "Base.Point3[][]": "base point 3 array",
    "bitbybit.jscad.text.cylindricalText": "cylindrical text",
    "cylindricalText": "cylindrical text",
    "bitbybit.jscad.text.cylindricalText_description": "creates text with chain hulled cylinders",
    "extrusionHeight": "extrusion height",
    "extrusionSize": "extrusion size",
    "jscadTextAlignEnum": "jscad text align enum",
    "bitbybit.jscad.text.sphericalText": "spherical text",
    "sphericalText": "spherical text",
    "bitbybit.jscad.text.sphericalText_description": "creates text with chain hulled spheres",
    "bitbybit.jscad.text.createVectorText": "vector text",
    "createVectorText": "vector text",
    "bitbybit.jscad.text.createVectorText_description": "creates vector text",
    "bitbybit.jscad.colors.colorize": "colorize",
    "colors": "colors",
    "colorize": "colorize",
    "bitbybit.jscad.colors.colorize_description": "colorizes jscad geometry",
    "bitbybit.manifold.manifoldToMeshPointer": "manifold to mesh pointer",
    "manifold": "manifold",
    "manifoldToMeshPointer": "manifold to mesh pointer",
    "bitbybit.manifold.manifoldToMeshPointer_description": "turns manifold shape into mesh pointer",
    "meshing": "meshing",
    "normalIdx": "normal idx",
    "bitbybit.manifold.decomposeManifoldOrCrossSection": "decompose manifold or cross section",
    "decomposeManifoldOrCrossSection": "decompose manifold or cross section",
    "bitbybit.manifold.decomposeManifoldOrCrossSection_description": "decomposes manifold or cross section into mesh or polygons",
    "decompose": "decompose",
    "manifoldOrCrossSection": "manifold or cross section",
    "bitbybit.manifold.decomposeManifoldsOrCrossSections": "decompose manifolds or cross sections",
    "decomposeManifoldsOrCrossSections": "decompose manifolds or cross sections",
    "bitbybit.manifold.decomposeManifoldsOrCrossSections_description": "decomposes manifolds or cross sections into meshes or polygons",
    "manifoldsOrCrossSections": "manifolds or cross sections",
    "bitbybit.manifold.deleteManifoldOrCrossSection": "delete manifold or cross section",
    "deleteManifoldOrCrossSection": "delete manifold or cross section",
    "bitbybit.manifold.deleteManifoldOrCrossSection_description": "deletes manifold or cross section from memory",
    "cleanup": "cleanup",
    "bitbybit.manifold.deleteManifoldsOrCrossSections": "delete manifolds or cross sections",
    "deleteManifoldsOrCrossSections": "delete manifolds or cross sections",
    "bitbybit.manifold.deleteManifoldsOrCrossSections_description": "deletes manifolds or cross sections from memory",
    "bitbybit.manifold.manifold.manifoldToMesh": "manifold to mesh",
    "manifoldToMesh": "manifold to mesh",
    "bitbybit.manifold.manifold.manifoldToMesh_description": "turns manifold shape into mesh",
    "bitbybit.manifold.manifold.manifoldsToMeshes": "manifolds to meshes",
    "manifoldsToMeshes": "manifolds to meshes",
    "bitbybit.manifold.manifold.manifoldsToMeshes_description": "turns manifold shapes into meshes",
    "manifolds": "manifolds",
    "bitbybit.manifold.manifold.shapes.manifoldFromMesh": "manifold from mesh",
    "manifoldFromMesh": "manifold from mesh",
    "bitbybit.manifold.manifold.shapes.manifoldFromMesh_description": "converts mesh into manifold",
    "DecomposedManifoldMeshDto": "decomposed manifold mesh dto",
    "bitbybit.manifold.manifold.shapes.cube": "cube",
    "bitbybit.manifold.manifold.shapes.cube_description": "creates 3d cube shape",
    "bitbybit.manifold.manifold.shapes.sphere": "sphere",
    "bitbybit.manifold.manifold.shapes.sphere_description": "creates 3d sphere shape",
    "circularSegments": "circular segments",
    "bitbybit.manifold.manifold.shapes.tetrahedron": "tetrahedron",
    "tetrahedron": "tetrahedron",
    "bitbybit.manifold.manifold.shapes.tetrahedron_description": "creates 3d tetrahedron shape",
    "bitbybit.manifold.manifold.shapes.cylinder": "cylinder",
    "bitbybit.manifold.manifold.shapes.cylinder_description": "creates 3d cylinder shape",
    "radiusLow": "radius low",
    "radiusHigh": "radius high",
    "bitbybit.manifold.manifold.booleans.subtract": "subtract",
    "bitbybit.manifold.manifold.booleans.subtract_description": "subtracts two manifold shapes",
    "a to b": "a to b",
    "manifold1": "manifold 1",
    "manifold2": "manifold 2",
    "bitbybit.manifold.manifold.booleans.add": "add",
    "bitbybit.manifold.manifold.booleans.add_description": "adds two manifold shapes",
    "bitbybit.manifold.manifold.booleans.intersect": "intersect",
    "bitbybit.manifold.manifold.booleans.intersect_description": "intersects two manifold shapes",
    "bitbybit.manifold.manifold.booleans.differenceTwo": "difference two",
    "differenceTwo": "difference two",
    "bitbybit.manifold.manifold.booleans.differenceTwo_description": "difference of two manifold shapes",
    "2 manifolds": "2 manifolds",
    "bitbybit.manifold.manifold.booleans.unionTwo": "union two",
    "bitbybit.manifold.manifold.booleans.unionTwo_description": "union of two manifold shapes",
    "bitbybit.manifold.manifold.booleans.intersectionTwo": "intersection two",
    "intersectionTwo": "intersection two",
    "bitbybit.manifold.manifold.booleans.intersectionTwo_description": "intersection of two manifold shapes",
    "bitbybit.manifold.manifold.booleans.difference": "difference",
    "bitbybit.manifold.manifold.booleans.difference_description": "difference of multiple manifold shapes",
    "bitbybit.manifold.manifold.booleans.union": "union",
    "bitbybit.manifold.manifold.booleans.union_description": "union of multiple manifold shapes",
    "bitbybit.manifold.manifold.booleans.intersection": "intersection",
    "bitbybit.manifold.manifold.booleans.intersection_description": "intersection of multiple manifold shapes",
    "bitbybit.manifold.manifold.booleans.split": "split",
    "split": "split",
    "bitbybit.manifold.manifold.booleans.split_description": "splits manifold by another manifold",
    "manifoldToSplit": "manifold to split",
    "manifoldCutter": "manifold cutter",
    "bitbybit.manifold.manifold.booleans.splitByPlane": "split by plane",
    "splitByPlane": "split by plane",
    "bitbybit.manifold.manifold.booleans.splitByPlane_description": "splits manifold by plane",
    "originOffset": "origin offset",
    "bitbybit.manifold.manifold.booleans.splitByPlaneOnOffsets": "split by plane on offsets",
    "splitByPlaneOnOffsets": "split by plane on offsets",
    "bitbybit.manifold.manifold.booleans.splitByPlaneOnOffsets_description": "splits manifold by plane on offsets",
    "originOffsets": "origin offsets",
    "bitbybit.manifold.manifold.booleans.trimByPlane": "trim by plane",
    "trimByPlane": "trim by plane",
    "bitbybit.manifold.manifold.booleans.trimByPlane_description": "trims manifold by plane",
    "trim": "trim",
    "bitbybit.manifold.manifold.operations.hull": "hull",
    "bitbybit.manifold.manifold.operations.hull_description": "computes convex hull of manifold shape",
    "bitbybit.manifold.manifold.operations.hullPoints": "hull points",
    "hullPoints": "hull points",
    "bitbybit.manifold.manifold.operations.hullPoints_description": "hulls points or manifolds",
    "bitbybit.manifold.manifold.operations.slice": "slice",
    "bitbybit.manifold.manifold.operations.slice_description": "returns cross section of object at height",
    "cross sections": "cross sections",
    "bitbybit.manifold.manifold.operations.project": "project",
    "bitbybit.manifold.manifold.operations.project_description": "creates projection on xy plane from shape outline",
    "bitbybit.manifold.manifold.operations.setTolerance": "set tolerance",
    "setTolerance": "set tolerance",
    "bitbybit.manifold.manifold.operations.setTolerance_description": "sets tolerance value for manifold",
    "basic": "basic",
    "bitbybit.manifold.manifold.operations.reserveIds": "reserve ids",
    "reserveIds": "reserve ids",
    "bitbybit.manifold.manifold.operations.reserveIds_description": "reserves sequential mesh ids",
    "count": "count",
    "bitbybit.manifold.manifold.operations.asOriginal": "as original",
    "asOriginal": "as original",
    "bitbybit.manifold.manifold.operations.asOriginal_description": "resets manifold ids as original",
    "bitbybit.manifold.manifold.operations.compose": "compose",
    "compose": "compose",
    "bitbybit.manifold.manifold.operations.compose_description": "constructs manifold from list of manifolds",
    "composition": "composition",
    "bitbybit.manifold.manifold.operations.decompose": "decompose",
    "bitbybit.manifold.manifold.operations.decompose_description": "decomposes manifold into disconnected parts",
    "bitbybit.manifold.manifold.operations.calculateNormals": "calculate normals",
    "calculateNormals": "calculate normals",
    "bitbybit.manifold.manifold.operations.calculateNormals_description": "calculates vertex normals",
    "adjustments": "adjustments",
    "minSharpAngle": "min sharp angle",
    "bitbybit.manifold.manifold.operations.calculateCurvature": "calculate curvature",
    "calculateCurvature": "calculate curvature",
    "bitbybit.manifold.manifold.operations.calculateCurvature_description": "calculates curvature for vertices",
    "gaussianIdx": "gaussian idx",
    "meanIdx": "mean idx",
    "bitbybit.manifold.manifold.operations.refineToTolerance": "refine to tolerance",
    "refineToTolerance": "refine to tolerance",
    "bitbybit.manifold.manifold.operations.refineToTolerance_description": "refines mesh to tolerance",
    "bitbybit.manifold.manifold.operations.refineToLength": "refine to length",
    "refineToLength": "refine to length",
    "bitbybit.manifold.manifold.operations.refineToLength_description": "refines mesh to length",
    "bitbybit.manifold.manifold.operations.refine": "refine",
    "refine": "refine",
    "bitbybit.manifold.manifold.operations.refine_description": "refines mesh by splitting edges",
    "bitbybit.manifold.manifold.operations.smoothOut": "smooth out",
    "smoothOut": "smooth out",
    "bitbybit.manifold.manifold.operations.smoothOut_description": "smooths manifold with tangent vectors",
    "minSmoothness": "min smoothness",
    "bitbybit.manifold.manifold.operations.smoothByNormals": "smooth by normals",
    "smoothByNormals": "smooth by normals",
    "bitbybit.manifold.manifold.operations.smoothByNormals_description": "smooths manifold using vertex normals",
    "bitbybit.manifold.manifold.transforms.scale3D": "scale 3d",
    "scale3D": "scale 3d",
    "bitbybit.manifold.manifold.transforms.scale3D_description": "scales manifold with 3d vector",
    "bitbybit.manifold.manifold.transforms.scale": "scale",
    "bitbybit.manifold.manifold.transforms.scale_description": "scales manifold with single factor",
    "bitbybit.manifold.manifold.transforms.mirror": "mirror",
    "bitbybit.manifold.manifold.transforms.mirror_description": "mirrors manifold over plane",
    "bitbybit.manifold.manifold.transforms.translate": "translate",
    "bitbybit.manifold.manifold.transforms.translate_description": "translates manifold along vector",
    "bitbybit.manifold.manifold.transforms.translateByVectors": "translate by vectors",
    "translateByVectors": "translate by vectors",
    "bitbybit.manifold.manifold.transforms.translateByVectors_description": "translates manifold by multiple vectors",
    "bitbybit.manifold.manifold.transforms.translateXYZ": "translate xyz",
    "translateXYZ": "translate xyz",
    "bitbybit.manifold.manifold.transforms.translateXYZ_description": "translates manifold along x y z",
    "bitbybit.manifold.manifold.transforms.rotate": "rotate",
    "bitbybit.manifold.manifold.transforms.rotate_description": "rotates manifold with euler angles",
    "bitbybit.manifold.manifold.transforms.rotateXYZ": "rotate xyz",
    "rotateXYZ": "rotate xyz",
    "bitbybit.manifold.manifold.transforms.rotateXYZ_description": "rotates manifold along x y z euler angles",
    "bitbybit.manifold.manifold.transforms.transform": "transform",
    "bitbybit.manifold.manifold.transforms.transform_description": "transforms manifold with 4x4 matrix",
    "matrix": "matrix",
    "Base.TransformMatrix": "base transform matrix",
    "bitbybit.manifold.manifold.transforms.transforms": "transforms",
    "bitbybit.manifold.manifold.transforms.transforms_description": "transforms manifold with multiple 4x4 matrices",
    "bitbybit.manifold.manifold.evaluate.surfaceArea": "surface area",
    "evaluate": "evaluate",
    "surfaceArea": "surface area",
    "bitbybit.manifold.manifold.evaluate.surfaceArea_description": "gets surface area of manifold",
    "bitbybit.manifold.manifold.evaluate.volume": "volume",
    "volume": "volume",
    "bitbybit.manifold.manifold.evaluate.volume_description": "gets volume of manifold",
    "bitbybit.manifold.manifold.evaluate.isEmpty": "is empty",
    "isEmpty": "is empty",
    "bitbybit.manifold.manifold.evaluate.isEmpty_description": "checks if manifold has triangles",
    "bitbybit.manifold.manifold.evaluate.numVert": "num vert",
    "numVert": "num vert",
    "bitbybit.manifold.manifold.evaluate.numVert_description": "gets number of vertices in manifold",
    "bitbybit.manifold.manifold.evaluate.numTri": "num tri",
    "numTri": "num tri",
    "bitbybit.manifold.manifold.evaluate.numTri_description": "gets number of triangles in manifold",
    "bitbybit.manifold.manifold.evaluate.numEdge": "num edge",
    "numEdge": "num edge",
    "bitbybit.manifold.manifold.evaluate.numEdge_description": "gets number of edges in manifold",
    "bitbybit.manifold.manifold.evaluate.numProp": "num prop",
    "numProp": "num prop",
    "bitbybit.manifold.manifold.evaluate.numProp_description": "gets number of properties in manifold",
    "bitbybit.manifold.manifold.evaluate.numPropVert": "num prop vert",
    "numPropVert": "num prop vert",
    "bitbybit.manifold.manifold.evaluate.numPropVert_description": "gets number of property vertices in manifold",
    "bitbybit.manifold.manifold.evaluate.boundingBox": "bounding box",
    "boundingBox": "bounding box",
    "bitbybit.manifold.manifold.evaluate.boundingBox_description": "gets axis-aligned bounding box of manifold",
    "bitbybit.manifold.manifold.evaluate.tolerance": "tolerance",
    "bitbybit.manifold.manifold.evaluate.tolerance_description": "gets tolerance of manifold vertices",
    "bitbybit.manifold.manifold.evaluate.genus": "genus",
    "genus": "genus",
    "bitbybit.manifold.manifold.evaluate.genus_description": "gets genus of manifold",
    "bitbybit.manifold.manifold.evaluate.minGap": "min gap",
    "minGap": "min gap",
    "bitbybit.manifold.manifold.evaluate.minGap_description": "gets minimum gap between two manifolds",
    "searchLength": "search length",
    "bitbybit.manifold.manifold.evaluate.originalID": "original id",
    "originalID": "original id",
    "bitbybit.manifold.manifold.evaluate.originalID_description": "gets original id of manifold",
    "bitbybit.manifold.crossSection.crossSectionToPolygons": "cross section to polygons",
    "crossSection": "cross section",
    "crossSectionToPolygons": "cross section to polygons",
    "bitbybit.manifold.crossSection.crossSectionToPolygons_description": "turns cross section into polygons",
    "bitbybit.manifold.crossSection.crossSectionsToPolygons": "cross sections to polygons",
    "crossSectionsToPolygons": "cross sections to polygons",
    "bitbybit.manifold.crossSection.crossSectionsToPolygons_description": "turns cross sections into polygons",
    "crossSections": "cross sections",
    "bitbybit.manifold.crossSection.shapes.create": "create",
    "bitbybit.manifold.crossSection.shapes.create_description": "creates 2d cross section from contours",
    "Base.Vector2[][]": "base vector 2 array",
    "fillRule": "fill rule",
    "fillRuleEnum": "fill rule enum",
    "bitbybit.manifold.crossSection.shapes.square": "square",
    "bitbybit.manifold.crossSection.shapes.square_description": "creates 2d square cross section",
    "bitbybit.manifold.crossSection.shapes.circle": "circle",
    "bitbybit.manifold.crossSection.shapes.circle_description": "creates 2d circle cross section",
    "bitbybit.manifold.crossSection.shapes.rectangle": "rectangle",
    "bitbybit.manifold.crossSection.shapes.rectangle_description": "creates 2d rectangle cross section",
    "bitbybit.manifold.crossSection.operations.hull": "hull",
    "bitbybit.manifold.crossSection.operations.hull_description": "computes convex hull for cross section",
    "bitbybit.manifold.crossSection.operations.extrude": "extrude",
    "bitbybit.manifold.crossSection.operations.extrude_description": "extrudes cross section to 3d shape",
    "nDivisions": "n divisions",
    "twistDegrees": "twist degrees",
    "scaleTopX": "scale top x",
    "scaleTopY": "scale top y",
    "bitbybit.manifold.crossSection.operations.revolve": "revolve",
    "bitbybit.manifold.crossSection.operations.revolve_description": "revolves cross section to 3d shape",
    "revolveDegrees": "revolve degrees",
    "matchProfile": "match profile",
    "bitbybit.manifold.crossSection.operations.offset": "offset",
    "bitbybit.manifold.crossSection.operations.offset_description": "offsets cross section with delta",
    "manifoldJoinTypeEnum": "manifold join type enum",
    "miterLimit": "miter limit",
    "bitbybit.manifold.crossSection.operations.simplify": "simplify",
    "simplify": "simplify",
    "bitbybit.manifold.crossSection.operations.simplify_description": "simplifies cross section contours",
    "epsilon": "epsilon",
    "bitbybit.manifold.crossSection.operations.compose": "compose",
    "bitbybit.manifold.crossSection.operations.compose_description": "composes multiple cross sections into one",
    "bitbybit.manifold.crossSection.operations.decompose": "decompose",
    "bitbybit.manifold.crossSection.operations.decompose_description": "decomposes cross sections into parts",
    "bitbybit.manifold.crossSection.booleans.subtract": "subtract",
    "bitbybit.manifold.crossSection.booleans.subtract_description": "subtracts two cross sections",
    "crossSection1": "cross section 1",
    "crossSection2": "cross section 2",
    "bitbybit.manifold.crossSection.booleans.add": "add",
    "bitbybit.manifold.crossSection.booleans.add_description": "adds two cross sections",
    "bitbybit.manifold.crossSection.booleans.intersect": "intersect",
    "bitbybit.manifold.crossSection.booleans.intersect_description": "intersects two cross sections",
    "bitbybit.manifold.crossSection.booleans.differenceTwo": "difference two",
    "bitbybit.manifold.crossSection.booleans.differenceTwo_description": "difference of two cross sections",
    "2 cross sections": "2 cross sections",
    "bitbybit.manifold.crossSection.booleans.unionTwo": "union two",
    "bitbybit.manifold.crossSection.booleans.unionTwo_description": "union of two cross sections",
    "bitbybit.manifold.crossSection.booleans.intersectionTwo": "intersection two",
    "bitbybit.manifold.crossSection.booleans.intersectionTwo_description": "intersection of two cross sections",
    "bitbybit.manifold.crossSection.booleans.difference": "difference",
    "bitbybit.manifold.crossSection.booleans.difference_description": "difference of multiple cross sections",
    "bitbybit.manifold.crossSection.booleans.union": "union",
    "bitbybit.manifold.crossSection.booleans.union_description": "union of multiple cross sections",
    "bitbybit.manifold.crossSection.booleans.intersection": "intersection",
    "bitbybit.manifold.crossSection.booleans.intersection_description": "intersection of multiple cross sections",
    "bitbybit.manifold.crossSection.transforms.scale2D": "scale 2d",
    "scale2D": "scale 2d",
    "bitbybit.manifold.crossSection.transforms.scale2D_description": "scales cross section with 2d vector",
    "bitbybit.manifold.crossSection.transforms.scale": "scale",
    "bitbybit.manifold.crossSection.transforms.scale_description": "scales cross section with single factor",
    "bitbybit.manifold.crossSection.transforms.mirror": "mirror",
    "bitbybit.manifold.crossSection.transforms.mirror_description": "mirrors cross section over plane",
    "bitbybit.manifold.crossSection.transforms.translate": "translate",
    "bitbybit.manifold.crossSection.transforms.translate_description": "translates cross section along vector",
    "bitbybit.manifold.crossSection.transforms.translateXY": "translate xy",
    "translateXY": "translate xy",
    "bitbybit.manifold.crossSection.transforms.translateXY_description": "translates cross section along x y",
    "bitbybit.manifold.crossSection.transforms.rotate": "rotate",
    "bitbybit.manifold.crossSection.transforms.rotate_description": "rotates cross section with degrees",
    "degrees": "degrees",
    "bitbybit.manifold.crossSection.transforms.transform": "transform",
    "bitbybit.manifold.crossSection.transforms.transform_description": "transforms cross section with 3x3 matrix",
    "Base.TransformMatrix3x3": "base transform matrix 3x3",
    "bitbybit.manifold.crossSection.evaluate.area": "area",
    "area": "area",
    "bitbybit.manifold.crossSection.evaluate.area_description": "gets area of cross section",
    "bitbybit.manifold.crossSection.evaluate.isEmpty": "is empty",
    "bitbybit.manifold.crossSection.evaluate.isEmpty_description": "checks if cross section is empty",
    "bitbybit.manifold.crossSection.evaluate.numVert": "num vert",
    "bitbybit.manifold.crossSection.evaluate.numVert_description": "gets number of vertices in cross section",
    "bitbybit.manifold.crossSection.evaluate.numContour": "num contour",
    "numContour": "num contour",
    "bitbybit.manifold.crossSection.evaluate.numContour_description": "gets number of contours in cross section",
    "bitbybit.manifold.crossSection.evaluate.bounds": "bounds",
    "bounds": "bounds",
    "bitbybit.manifold.crossSection.evaluate.bounds_description": "gets bounds of contour as rectangle",
    "bitbybit.manifold.mesh.operations.merge": "merge",
    "merge": "merge",
    "bitbybit.manifold.mesh.operations.merge_description": "merges verts to manifold solid",
    "bitbybit.manifold.mesh.evaluate.position": "position",
    "bitbybit.manifold.mesh.evaluate.position_description": "gets position on mesh vertex index",
    "vertexIndex": "vertex index",
    "bitbybit.manifold.mesh.evaluate.verts": "verts",
    "verts": "verts",
    "bitbybit.manifold.mesh.evaluate.verts_description": "gets three vertex indices of triangle",
    "triangleIndex": "triangle index",
    "bitbybit.manifold.mesh.evaluate.tangent": "tangent",
    "tangent": "tangent",
    "bitbybit.manifold.mesh.evaluate.tangent_description": "gets tangent vector of half edge",
    "halfEdgeIndex": "half edge index",
    "bitbybit.manifold.mesh.evaluate.extras": "extras",
    "extras": "extras",
    "bitbybit.manifold.mesh.evaluate.extras_description": "gets extra properties of vertex",
    "bitbybit.manifold.mesh.evaluate.transform": "transform",
    "bitbybit.manifold.mesh.evaluate.transform_description": "gets 4x4 transform matrix of mesh",
    "bitbybit.manifold.mesh.evaluate.numProp": "num prop",
    "bitbybit.manifold.mesh.evaluate.numProp_description": "gets number of properties per vertex",
    "bitbybit.manifold.mesh.evaluate.numVert": "num vert",
    "bitbybit.manifold.mesh.evaluate.numVert_description": "gets number of property vertices",
    "bitbybit.manifold.mesh.evaluate.numTri": "num tri",
    "bitbybit.manifold.mesh.evaluate.numTri_description": "gets number of triangles on mesh",
    "bitbybit.manifold.mesh.evaluate.numRun": "num run",
    "numRun": "num run",
    "bitbybit.manifold.mesh.evaluate.numRun_description": "gets number of triangle runs",
    "bitbybit.logic.boolean": "boolean",
    "logic": "logic",
    "bitbybit.logic.boolean_description": "creates boolean value",
    "bitbybit.logic.randomBooleans": "random booleans",
    "randomBooleans": "random booleans",
    "bitbybit.logic.randomBooleans_description": "creates random boolean list",
    "trueThreshold": "true threshold",
    "bitbybit.logic.twoThresholdRandomGradient": "two threshold random gradient",
    "twoThresholdRandomGradient": "two threshold random gradient",
    "bitbybit.logic.twoThresholdRandomGradient_description": "creates random boolean list with thresholds",
    "numbers": "numbers",
    "thresholdTotalTrue": "threshold total true",
    "thresholdTotalFalse": "threshold total false",
    "nrLevels": "nr levels",
    "bitbybit.logic.thresholdBooleanList": "threshold boolean list",
    "thresholdBooleanList": "threshold boolean list",
    "bitbybit.logic.thresholdBooleanList_description": "creates boolean list with threshold",
    "threshold": "threshold",
    "bitbybit.logic.thresholdGapsBooleanList": "threshold gaps boolean list",
    "thresholdGapsBooleanList": "threshold gaps boolean list",
    "bitbybit.logic.thresholdGapsBooleanList_description": "creates boolean list with gap thresholds",
    "gapThresholds": "gap thresholds",
    "Base.Vector2[]": "base vector 2 array",
    "bitbybit.logic.not": "not",
    "not": "not",
    "bitbybit.logic.not_description": "applies not operator on boolean",
    "bitbybit.logic.notList": "not list",
    "notList": "not list",
    "bitbybit.logic.notList_description": "applies not operator on boolean list",
    "bitbybit.logic.compare": "compare",
    "compare": "compare",
    "bitbybit.logic.compare_description": "compares two values",
    "operator": "operator",
    "BooleanOperatorsEnum": "boolean operators enum",
    "bitbybit.logic.valueGate": "value gate",
    "valueGate": "value gate",
    "bitbybit.logic.valueGate_description": "transmits value if boolean is true",
    "bitbybit.logic.firstDefinedValueGate": "first defined value gate",
    "firstDefinedValueGate": "first defined value gate",
    "bitbybit.logic.firstDefinedValueGate_description": "returns first defined value",
    "value1": "value 1",
    "value2": "value 2",
    "bitbybit.math.number": "number",
    "math": "math",
    "bitbybit.math.number_description": "creates a number",
    "bitbybit.math.twoNrOperation": "two nr operation",
    "twoNrOperation": "two nr operation",
    "bitbybit.math.twoNrOperation_description": "does basic math operations",
    "operation": "operation",
    "mathTwoNrOperatorEnum": "math two nr operator enum",
    "bitbybit.math.modulus": "modulus",
    "modulus": "modulus",
    "bitbybit.math.modulus_description": "does modulus operation",
    "bitbybit.math.roundToDecimals": "round to decimals",
    "roundToDecimals": "round to decimals",
    "bitbybit.math.roundToDecimals_description": "rounds to decimals",
    "decimalPlaces": "decimal places",
    "bitbybit.math.oneNrOperation": "one nr operation",
    "oneNrOperation": "one nr operation",
    "bitbybit.math.oneNrOperation_description": "does math on one number",
    "mathOneNrOperatorEnum": "math one nr operator enum",
    "bitbybit.math.remap": "remap",
    "remap": "remap",
    "bitbybit.math.remap_description": "remaps number between ranges",
    "fromLow": "from low",
    "fromHigh": "from high",
    "toLow": "to low",
    "toHigh": "to high",
    "bitbybit.math.random": "random",
    "random": "random",
    "bitbybit.math.random_description": "creates random number 0 to 1",
    "generate": "generate",
    "bitbybit.math.randomNumber": "random number",
    "randomNumber": "random number",
    "bitbybit.math.randomNumber_description": "creates random number in range",
    "low": "low",
    "high": "high",
    "bitbybit.math.randomNumbers": "random numbers",
    "randomNumbers": "random numbers",
    "bitbybit.math.randomNumbers_description": "creates random numbers in range",
    "bitbybit.math.pi": "pi",
    "pi": "pi",
    "bitbybit.math.pi_description": "creates pi number",
    "bitbybit.math.toFixed": "to fixed",
    "toFixed": "to fixed",
    "bitbybit.math.toFixed_description": "rounds number to decimals",
    "bitbybit.math.add": "add",
    "bitbybit.math.add_description": "adds two numbers",
    "basics": "basics",
    "bitbybit.math.subtract": "subtract",
    "bitbybit.math.subtract_description": "subtracts two numbers",
    "bitbybit.math.multiply": "multiply",
    "bitbybit.math.multiply_description": "multiplies two numbers",
    "bitbybit.math.divide": "divide",
    "divide": "divide",
    "bitbybit.math.divide_description": "divides two numbers",
    "bitbybit.math.power": "power",
    "power": "power",
    "bitbybit.math.power_description": "powers a number",
    "bitbybit.math.sqrt": "sqrt",
    "sqrt": "sqrt",
    "bitbybit.math.sqrt_description": "gets square root",
    "bitbybit.math.abs": "abs",
    "abs": "abs",
    "bitbybit.math.abs_description": "gets absolute value",
    "bitbybit.math.round": "round",
    "round": "round",
    "bitbybit.math.round_description": "rounds a number",
    "bitbybit.math.floor": "floor",
    "floor": "floor",
    "bitbybit.math.floor_description": "floors a number",
    "bitbybit.math.ceil": "ceil",
    "ceil": "ceil",
    "bitbybit.math.ceil_description": "ceils a number",
    "bitbybit.math.negate": "negate",
    "negate": "negate",
    "bitbybit.math.negate_description": "negates a number",
    "bitbybit.math.ln": "ln",
    "ln": "ln",
    "bitbybit.math.ln_description": "gets natural logarithm",
    "bitbybit.math.log10": "log10",
    "log10": "log10",
    "bitbybit.math.log10_description": "gets base 10 logarithm",
    "bitbybit.math.tenPow": "ten pow",
    "tenPow": "ten pow",
    "bitbybit.math.tenPow_description": "raises 10 to power",
    "bitbybit.math.sin": "sin",
    "sin": "sin",
    "bitbybit.math.sin_description": "gets sine",
    "bitbybit.math.cos": "cos",
    "cos": "cos",
    "bitbybit.math.cos_description": "gets cosine",
    "bitbybit.math.tan": "tan",
    "tan": "tan",
    "bitbybit.math.tan_description": "gets tangent",
    "bitbybit.math.asin": "asin",
    "asin": "asin",
    "bitbybit.math.asin_description": "gets arcsine",
    "bitbybit.math.acos": "acos",
    "acos": "acos",
    "bitbybit.math.acos_description": "gets arccosine",
    "bitbybit.math.atan": "atan",
    "atan": "atan",
    "bitbybit.math.atan_description": "gets arctangent",
    "bitbybit.math.exp": "exp",
    "exp": "exp",
    "bitbybit.math.exp_description": "gets natural exponent",
    "bitbybit.math.degToRad": "deg to rad",
    "degToRad": "deg to rad",
    "bitbybit.math.degToRad_description": "converts degrees to radians",
    "bitbybit.math.radToDeg": "rad to deg",
    "radToDeg": "rad to deg",
    "bitbybit.math.radToDeg_description": "converts radians to degrees",
    "bitbybit.math.ease": "ease",
    "bitbybit.math.ease_description": "eases number with range",
    "easeEnum": "ease enum",
    "bitbybit.lists.getItem": "get item",
    "lists": "lists",
    "getItem": "get item",
    "bitbybit.lists.getItem_description": "gets item from list by index",
    "list": "list",
    "bitbybit.lists.randomGetThreshold": "random get threshold",
    "randomGetThreshold": "random get threshold",
    "bitbybit.lists.randomGetThreshold_description": "gets items randomly with threshold",
    "bitbybit.lists.getSubList": "get sub list",
    "getSubList": "get sub list",
    "bitbybit.lists.getSubList_description": "gets sub list between indexes",
    "indexStart": "index start",
    "indexEnd": "index end",
    "bitbybit.lists.getNthItem": "get nth item",
    "getNthItem": "get nth item",
    "bitbybit.lists.getNthItem_description": "gets nth item in list",
    "nth": "nth",
    "bitbybit.lists.getByPattern": "get by pattern",
    "getByPattern": "get by pattern",
    "bitbybit.lists.getByPattern_description": "gets elements by pattern",
    "pattern": "pattern",
    "bitbybit.lists.mergeElementsOfLists": "merge elements of lists",
    "mergeElementsOfLists": "merge elements of lists",
    "bitbybit.lists.mergeElementsOfLists_description": "merges elements of lists on level",
    "level": "level",
    "bitbybit.lists.getLongestListLength": "get longest list length",
    "getLongestListLength": "get longest list length",
    "bitbybit.lists.getLongestListLength_description": "gets longest list length",
    "bitbybit.lists.reverse": "reverse",
    "bitbybit.lists.reverse_description": "reverses list",
    "bitbybit.lists.flipLists": "flip lists",
    "flipLists": "flip lists",
    "bitbybit.lists.flipLists_description": "flips 2d lists",
    "bitbybit.lists.groupNth": "group nth",
    "groupNth": "group nth",
    "bitbybit.lists.groupNth_description": "groups list in n elements",
    "nrElements": "nr elements",
    "keepRemainder": "keep remainder",
    "bitbybit.lists.getListDepth": "get list depth",
    "getListDepth": "get list depth",
    "bitbybit.lists.getListDepth_description": "gets depth of list",
    "bitbybit.lists.listLength": "list length",
    "listLength": "list length",
    "bitbybit.lists.listLength_description": "gets length of list",
    "bitbybit.lists.addItemAtIndex": "add item at index",
    "addItemAtIndex": "add item at index",
    "bitbybit.lists.addItemAtIndex_description": "adds item to list at index",
    "item": "item",
    "bitbybit.lists.addItemAtIndexes": "add item at indexes",
    "addItemAtIndexes": "add item at indexes",
    "bitbybit.lists.addItemAtIndexes_description": "adds item to list at indexes",
    "bitbybit.lists.addItemsAtIndexes": "add items at indexes",
    "addItemsAtIndexes": "add items at indexes",
    "bitbybit.lists.addItemsAtIndexes_description": "adds items to list at indexes",
    "items": "items",
    "bitbybit.lists.removeItemAtIndex": "remove item at index",
    "removeItemAtIndex": "remove item at index",
    "bitbybit.lists.removeItemAtIndex_description": "removes item from list at index",
    "bitbybit.lists.removeItemsAtIndexes": "remove items at indexes",
    "removeItemsAtIndexes": "remove items at indexes",
    "bitbybit.lists.removeItemsAtIndexes_description": "removes items from list at indexes",
    "bitbybit.lists.removeAllItems": "remove all items",
    "removeAllItems": "remove all items",
    "bitbybit.lists.removeAllItems_description": "removes all items from list",
    "bitbybit.lists.removeNthItem": "remove nth item",
    "removeNthItem": "remove nth item",
    "bitbybit.lists.removeNthItem_description": "removes nth item from list",
    "bitbybit.lists.randomRemoveThreshold": "random remove threshold",
    "randomRemoveThreshold": "random remove threshold",
    "bitbybit.lists.randomRemoveThreshold_description": "removes items randomly with threshold",
    "bitbybit.lists.removeDuplicateNumbers": "remove duplicate numbers",
    "removeDuplicateNumbers": "remove duplicate numbers",
    "bitbybit.lists.removeDuplicateNumbers_description": "removes duplicate numbers from list",
    "bitbybit.lists.removeDuplicateNumbersTolerance": "remove duplicate numbers tolerance",
    "removeDuplicateNumbersTolerance": "remove duplicate numbers tolerance",
    "bitbybit.lists.removeDuplicateNumbersTolerance_description": "removes duplicate numbers with tolerance",
    "bitbybit.lists.addItem": "add item",
    "addItem": "add item",
    "bitbybit.lists.addItem_description": "adds item to end of list",
    "bitbybit.lists.prependItem": "prepend item",
    "prependItem": "prepend item",
    "bitbybit.lists.prependItem_description": "adds item to start of list",
    "bitbybit.lists.addItemFirstLast": "add item first last",
    "addItemFirstLast": "add item first last",
    "bitbybit.lists.addItemFirstLast_description": "adds item to start or end of list",
    "firstLastEnum": "first last enum",
    "bitbybit.lists.createEmptyList": "empty list",
    "createEmptyList": "empty list",
    "bitbybit.lists.createEmptyList_description": "creates empty list",
    "bitbybit.lists.repeat": "repeat",
    "repeat": "repeat",
    "bitbybit.lists.repeat_description": "repeats item in new list",
    "times": "times",
    "bitbybit.lists.repeatInPattern": "repeat in pattern",
    "repeatInPattern": "repeat in pattern",
    "bitbybit.lists.repeatInPattern_description": "repeats list items till length limit",
    "lengthLimit": "length limit",
    "bitbybit.lists.sortNumber": "sort number",
    "sortNumber": "sort number",
    "bitbybit.lists.sortNumber_description": "sorts list of numbers",
    "sorting": "sorting",
    "orderAsc": "order asc",
    "bitbybit.lists.sortTexts": "sort texts",
    "sortTexts": "sort texts",
    "bitbybit.lists.sortTexts_description": "sorts list of texts alphabetically",
    "bitbybit.lists.sortByPropValue": "sort by prop value",
    "sortByPropValue": "sort by prop value",
    "bitbybit.lists.sortByPropValue_description": "sorts by numeric json property",
    "property": "property",
    "bitbybit.color.hexColor": "hex color",
    "hexColor": "hex color",
    "bitbybit.color.hexColor_description": "creates hex color",
    "bitbybit.color.hexToRgb": "hex to rgb",
    "hexToRgb": "hex to rgb",
    "bitbybit.color.hexToRgb_description": "creates rgb from hex",
    "convert": "convert",
    "bitbybit.color.rgbToHex": "rgb to hex",
    "rgbToHex": "rgb to hex",
    "bitbybit.color.rgbToHex_description": "creates hex from rgb",
    "r": "r",
    "g": "g",
    "b": "b",
    "bitbybit.color.rgbObjToHex": "rgb obj to hex",
    "rgbObjToHex": "rgb obj to hex",
    "bitbybit.color.rgbObjToHex_description": "creates hex from rgb object",
    "rgb": "rgb",
    "Base.ColorRGB": "base color rgb",
    "bitbybit.color.hexToRgbMapped": "hex to rgb mapped",
    "hexToRgbMapped": "hex to rgb mapped",
    "bitbybit.color.hexToRgbMapped_description": "creates rgb from hex with range mapping",
    "bitbybit.color.getRedParam": "get red param",
    "getRedParam": "get red param",
    "bitbybit.color.getRedParam_description": "gets red param",
    "hex to": "hex to",
    "bitbybit.color.getGreenParam": "get green param",
    "getGreenParam": "get green param",
    "bitbybit.color.getGreenParam_description": "gets green param",
    "bitbybit.color.getBlueParam": "get blue param",
    "getBlueParam": "get blue param",
    "bitbybit.color.getBlueParam_description": "gets blue param",
    "bitbybit.color.rgbToRed": "rgb to red",
    "rgbToRed": "rgb to red",
    "bitbybit.color.rgbToRed_description": "gets red from rgb",
    "rgb to": "rgb to",
    "bitbybit.color.rgbToGreen": "rgb to green",
    "rgbToGreen": "rgb to green",
    "bitbybit.color.rgbToGreen_description": "gets green from rgb",
    "bitbybit.color.rgbToBlue": "rgb to blue",
    "rgbToBlue": "rgb to blue",
    "bitbybit.color.rgbToBlue_description": "gets blue from rgb",
    "bitbybit.color.invert": "invert",
    "invert": "invert",
    "bitbybit.color.invert_description": "inverts color",
    "blackAndWhite": "black and white",
    "bitbybit.text.create": "create",
    "bitbybit.text.create_description": "creates text",
    "bitbybit.text.split": "split",
    "bitbybit.text.split_description": "splits text by separator",
    "separator": "separator",
    "bitbybit.text.replaceAll": "replace all",
    "replaceAll": "replace all",
    "bitbybit.text.replaceAll_description": "replaces all text occurrences",
    "search": "search",
    "replaceWith": "replace with",
    "bitbybit.text.join": "join",
    "join": "join",
    "bitbybit.text.join_description": "joins items into text with separator",
    "string[]": "string array",
    "bitbybit.text.toString": "to string",
    "toString": "to string",
    "bitbybit.text.toString_description": "converts item to text",
    "bitbybit.text.toStringEach": "to string each",
    "toStringEach": "to string each",
    "bitbybit.text.toStringEach_description": "converts each list item to text",
    "bitbybit.text.format": "format",
    "format": "format",
    "bitbybit.text.format_description": "formats text with values",
    "values": "values",
    "bitbybit.text.vectorChar": "vector char",
    "vectorChar": "vector char",
    "bitbybit.text.vectorChar_description": "Creates a vector segments for character and includes width and height information",
    "char": "char",
    "bitbybit.text.vectorText": "vector text",
    "vectorText": "vector text",
    "bitbybit.text.vectorText_description": "Creates a vector text lines for a given text and includes width and height information",
    "bitbybit.dates.toDateString": "to date string",
    "dates": "dates",
    "toDateString": "to date string",
    "bitbybit.dates.toDateString_description": "Returns a date as a string value.",
    "date": "date",
    "Date": "date",
    "bitbybit.dates.toISOString": "to iso string",
    "toISOString": "to iso string",
    "bitbybit.dates.toISOString_description": "Returns a date as a string value in ISO format.",
    "bitbybit.dates.toJSON": "to json",
    "toJSON": "to json",
    "bitbybit.dates.toJSON_description": "Returns a date as a string value in JSON format.",
    "bitbybit.dates.toString": "to string",
    "bitbybit.dates.toString_description": "Returns a string representation of a date. The format of the string depends on the locale.",
    "bitbybit.dates.toTimeString": "to time string",
    "toTimeString": "to time string",
    "bitbybit.dates.toTimeString_description": "Returns a time as a string value.",
    "bitbybit.dates.toUTCString": "to utc string",
    "toUTCString": "to utc string",
    "bitbybit.dates.toUTCString_description": "Returns a date converted to a string using Universal Coordinated Time (UTC).",
    "bitbybit.dates.now": "now",
    "now": "now",
    "bitbybit.dates.now_description": "Returns the current date and time.",
    "bitbybit.dates.createDate": "create date",
    "createDate": "create date",
    "bitbybit.dates.createDate_description": "Creates a new date object using the provided date params.",
    "year": "year",
    "month": "month",
    "day": "day",
    "hours": "hours",
    "minutes": "minutes",
    "seconds": "seconds",
    "milliseconds": "milliseconds",
    "bitbybit.dates.createDateUTC": "create date utc",
    "createDateUTC": "create date utc",
    "bitbybit.dates.createDateUTC_description": "Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.",
    "bitbybit.dates.createFromUnixTimeStamp": "create from unix time stamp",
    "createFromUnixTimeStamp": "create from unix time stamp",
    "bitbybit.dates.createFromUnixTimeStamp_description": "Creates a new date object using the provided unix time stamp.",
    "unixTimeStamp": "unix time stamp",
    "bitbybit.dates.parseDate": "parse date",
    "parseDate": "parse date",
    "bitbybit.dates.parseDate_description": "Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.",
    "parse": "parse",
    "dateString": "date string",
    "bitbybit.dates.getDayOfMonth": "get day of month",
    "getDayOfMonth": "get day of month",
    "bitbybit.dates.getDayOfMonth_description": "Gets the day-of-the-month, using local time.",
    "bitbybit.dates.getWeekday": "get weekday",
    "getWeekday": "get weekday",
    "bitbybit.dates.getWeekday_description": "Gets the day of the week, using local time.",
    "bitbybit.dates.getYear": "get year",
    "getYear": "get year",
    "bitbybit.dates.getYear_description": "Gets the year, using local time.",
    "bitbybit.dates.getMonth": "get month",
    "getMonth": "get month",
    "bitbybit.dates.getMonth_description": "Gets the month, using local time.",
    "bitbybit.dates.getHours": "get hours",
    "getHours": "get hours",
    "bitbybit.dates.getHours_description": "Gets the hours in a date, using local time.",
    "bitbybit.dates.getMinutes": "get minutes",
    "getMinutes": "get minutes",
    "bitbybit.dates.getMinutes_description": "Gets the minutes of a Date object, using local time.",
    "bitbybit.dates.getSeconds": "get seconds",
    "getSeconds": "get seconds",
    "bitbybit.dates.getSeconds_description": "Gets the seconds of a Date object, using local time.",
    "bitbybit.dates.getMilliseconds": "get milliseconds",
    "getMilliseconds": "get milliseconds",
    "bitbybit.dates.getMilliseconds_description": "Gets the milliseconds of a Date, using local time.",
    "bitbybit.dates.getTime": "get time",
    "getTime": "get time",
    "bitbybit.dates.getTime_description": "Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.",
    "bitbybit.dates.getUTCYear": "get utc year",
    "getUTCYear": "get utc year",
    "bitbybit.dates.getUTCYear_description": "Gets the year using Universal Coordinated Time (UTC).",
    "bitbybit.dates.getUTCMonth": "get utc month",
    "getUTCMonth": "get utc month",
    "bitbybit.dates.getUTCMonth_description": "Gets the month of a Date object using Universal Coordinated Time (UTC).",
    "bitbybit.dates.getUTCDay": "get utc day",
    "getUTCDay": "get utc day",
    "bitbybit.dates.getUTCDay_description": "Gets the day-of-the-month, using Universal Coordinated Time (UTC).",
    "bitbybit.dates.getUTCHours": "get utc hours",
    "getUTCHours": "get utc hours",
    "bitbybit.dates.getUTCHours_description": "Gets the hours value in a Date object using Universal Coordinated Time (UTC).",
    "bitbybit.dates.getUTCMinutes": "get utc minutes",
    "getUTCMinutes": "get utc minutes",
    "bitbybit.dates.getUTCMinutes_description": "Gets the minutes of a Date object using Universal Coordinated Time (UTC).",
    "bitbybit.dates.getUTCSeconds": "get utc seconds",
    "getUTCSeconds": "get utc seconds",
    "bitbybit.dates.getUTCSeconds_description": "Gets the seconds of a Date object using Universal Coordinated Time (UTC).",
    "bitbybit.dates.getUTCMilliseconds": "get utc milliseconds",
    "getUTCMilliseconds": "get utc milliseconds",
    "bitbybit.dates.getUTCMilliseconds_description": "Gets the milliseconds of a Date object using Universal Coordinated Time (UTC).",
    "bitbybit.dates.setYear": "set year",
    "setYear": "set year",
    "bitbybit.dates.setYear_description": "Sets the year of the Date object using local time.",
    "bitbybit.dates.setMonth": "set month",
    "setMonth": "set month",
    "bitbybit.dates.setMonth_description": "Sets the month value in the Date object using local time.",
    "bitbybit.dates.setDayOfMonth": "set day of month",
    "setDayOfMonth": "set day of month",
    "bitbybit.dates.setDayOfMonth_description": "Sets the numeric day-of-the-month value of the Date object using local time.",
    "bitbybit.dates.setHours": "set hours",
    "setHours": "set hours",
    "bitbybit.dates.setHours_description": "Sets the hour value in the Date object using local time.",
    "bitbybit.dates.setMinutes": "set minutes",
    "setMinutes": "set minutes",
    "bitbybit.dates.setMinutes_description": "Sets the minutes value in the Date object using local time.",
    "bitbybit.dates.setSeconds": "set seconds",
    "setSeconds": "set seconds",
    "bitbybit.dates.setSeconds_description": "Sets the seconds value in the Date object using local time.",
    "bitbybit.dates.setMilliseconds": "set milliseconds",
    "setMilliseconds": "set milliseconds",
    "bitbybit.dates.setMilliseconds_description": "Sets the milliseconds value in the Date object using local time.",
    "bitbybit.dates.setTime": "set time",
    "setTime": "set time",
    "bitbybit.dates.setTime_description": "Sets the date and time value in the Date object.",
    "time": "time",
    "bitbybit.dates.setUTCYear": "set utc year",
    "setUTCYear": "set utc year",
    "bitbybit.dates.setUTCYear_description": "Sets the year value in the Date object using Universal Coordinated Time (UTC).",
    "bitbybit.dates.setUTCMonth": "set utc month",
    "setUTCMonth": "set utc month",
    "bitbybit.dates.setUTCMonth_description": "Sets the month value in the Date object using Universal Coordinated Time (UTC).",
    "bitbybit.dates.setUTCDay": "set utc day",
    "setUTCDay": "set utc day",
    "bitbybit.dates.setUTCDay_description": "Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).",
    "bitbybit.dates.setUTCHours": "set utc hours",
    "setUTCHours": "set utc hours",
    "bitbybit.dates.setUTCHours_description": "Sets the hours value in the Date object using Universal Coordinated Time (UTC).",
    "bitbybit.dates.setUTCMinutes": "set utc minutes",
    "setUTCMinutes": "set utc minutes",
    "bitbybit.dates.setUTCMinutes_description": "Sets the minutes value in the Date object using Universal Coordinated Time (UTC).",
    "bitbybit.dates.setUTCSeconds": "set utc seconds",
    "setUTCSeconds": "set utc seconds",
    "bitbybit.dates.setUTCSeconds_description": "Sets the seconds value in the Date object using Universal Coordinated Time (UTC).",
    "bitbybit.dates.setUTCMilliseconds": "set utc milliseconds",
    "setUTCMilliseconds": "set utc milliseconds",
    "bitbybit.dates.setUTCMilliseconds_description": "Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).",
    "bitbybit.json.stringify": "stringify",
    "json": "json",
    "stringify": "stringify",
    "bitbybit.json.stringify_description": "stringifies input value",
    "bitbybit.json.parse": "parse",
    "bitbybit.json.parse_description": "parses input value",
    "bitbybit.json.query": "query",
    "query": "query",
    "bitbybit.json.query_description": "queries input value",
    "jsonpath": "jsonpath",
    "bitbybit.json.setValueOnProp": "set value on prop",
    "setValueOnProp": "set value on prop",
    "bitbybit.json.setValueOnProp_description": "sets value on json property",
    "props": "props",
    "bitbybit.json.getJsonFromArrayByFirstPropMatch": "get json from array by first prop match",
    "getJsonFromArrayByFirstPropMatch": "get json from array by first prop match",
    "bitbybit.json.getJsonFromArrayByFirstPropMatch_description": "gets json from array by first property match",
    "jsonArray": "json array",
    "any[]": "any array",
    "match": "match",
    "bitbybit.json.getValueOnProp": "get value on prop",
    "getValueOnProp": "get value on prop",
    "bitbybit.json.getValueOnProp_description": "gets value of property in json",
    "bitbybit.json.setValue": "set value",
    "bitbybit.json.setValue_description": "sets value to json by path",
    "prop": "prop",
    "bitbybit.json.setValuesOnPaths": "set values on paths",
    "setValuesOnPaths": "set values on paths",
    "bitbybit.json.setValuesOnPaths_description": "sets multiple values to json by paths",
    "paths": "paths",
    "bitbybit.json.paths": "paths",
    "bitbybit.json.paths_description": "finds paths to elements in object",
    "bitbybit.json.createEmpty": "empty",
    "bitbybit.json.createEmpty_description": "creates empty javascript object",
    "bitbybit.json.previewAndSaveJson": "preview and save json",
    "previewAndSaveJson": "preview and save json",
    "bitbybit.json.previewAndSaveJson_description": "previews json and offers save option",
    "preview": "preview",
    "bitbybit.json.previewJson": "preview json",
    "previewJson": "preview json",
    "bitbybit.json.previewJson_description": "previews json",
    "bitbybit.verb.curve.createCurveByKnotsControlPointsWeights": "curve by knots control points weights",
    "verb": "verb",
    "createCurveByKnotsControlPointsWeights": "curve by knots control points weights",
    "bitbybit.verb.curve.createCurveByKnotsControlPointsWeights_description": "creates nurbs curve with knots control points weights",
    "degree": "degree",
    "knots": "knots",
    "bitbybit.verb.curve.createCurveByPoints": "curve by points",
    "createCurveByPoints": "curve by points",
    "bitbybit.verb.curve.createCurveByPoints_description": "creates nurbs curve with control points",
    "bitbybit.verb.curve.createBezierCurve": "bezier curve",
    "createBezierCurve": "bezier curve",
    "bitbybit.verb.curve.createBezierCurve_description": "creates bezier nurbs curve with control points and weights",
    "bitbybit.verb.curve.clone": "clone",
    "bitbybit.verb.curve.clone_description": "clones nurbs curve",
    "bitbybit.verb.curve.closestParam": "closest param",
    "closestParam": "closest param",
    "bitbybit.verb.curve.closestParam_description": "finds closest param on nurbs curve from point",
    "bitbybit.verb.curve.closestParams": "closest params",
    "closestParams": "closest params",
    "bitbybit.verb.curve.closestParams_description": "finds closest params on nurbs curve from points",
    "bitbybit.verb.curve.closestPoint": "closest point",
    "closestPoint": "closest point",
    "bitbybit.verb.curve.closestPoint_description": "finds closest point on nurbs curve from point",
    "bitbybit.verb.curve.closestPoints": "closest points",
    "closestPoints": "closest points",
    "bitbybit.verb.curve.closestPoints_description": "finds closest points on nurbs curve from points",
    "bitbybit.verb.curve.controlPoints": "control points",
    "controlPoints": "control points",
    "bitbybit.verb.curve.controlPoints_description": "finds control points of nurbs curve",
    "bitbybit.verb.curve.degree": "degree",
    "bitbybit.verb.curve.degree_description": "finds degree of nurbs curve",
    "bitbybit.verb.curve.derivatives": "derivatives",
    "derivatives": "derivatives",
    "bitbybit.verb.curve.derivatives_description": "finds derivatives of nurbs curve at parameter",
    "numDerivatives": "num derivatives",
    "parameter": "parameter",
    "bitbybit.verb.curve.divideByEqualArcLengthToParams": "divide by equal arc length to params",
    "divideByEqualArcLengthToParams": "divide by equal arc length to params",
    "bitbybit.verb.curve.divideByEqualArcLengthToParams_description": "divides curve by equal arc length to params",
    "subdivision": "subdivision",
    "bitbybit.verb.curve.divideByEqualArcLengthToPoints": "divide by equal arc length to points",
    "divideByEqualArcLengthToPoints": "divide by equal arc length to points",
    "bitbybit.verb.curve.divideByEqualArcLengthToPoints_description": "divides curve by equal arc length to points",
    "bitbybit.verb.curve.divideByArcLengthToParams": "divide by arc length to params",
    "divideByArcLengthToParams": "divide by arc length to params",
    "bitbybit.verb.curve.divideByArcLengthToParams_description": "divides curve by arc length to params",
    "bitbybit.verb.curve.divideByArcLengthToPoints": "divide by arc length to points",
    "divideByArcLengthToPoints": "divide by arc length to points",
    "bitbybit.verb.curve.divideByArcLengthToPoints_description": "divides curve by arc length to points",
    "bitbybit.verb.curve.divideCurvesByEqualArcLengthToPoints": "divide curves by equal arc length to points",
    "divideCurvesByEqualArcLengthToPoints": "divide curves by equal arc length to points",
    "bitbybit.verb.curve.divideCurvesByEqualArcLengthToPoints_description": "divides multiple curves by equal arc length to points",
    "bitbybit.verb.curve.divideCurvesByArcLengthToPoints": "divide curves by arc length to points",
    "divideCurvesByArcLengthToPoints": "divide curves by arc length to points",
    "bitbybit.verb.curve.divideCurvesByArcLengthToPoints_description": "divides multiple curves by arc length to points",
    "bitbybit.verb.curve.domain": "domain",
    "bitbybit.verb.curve.domain_description": "finds domain interval of curve params",
    "bitbybit.verb.curve.startPoint": "start point",
    "bitbybit.verb.curve.startPoint_description": "start point of curve",
    "bitbybit.verb.curve.endPoint": "end point",
    "bitbybit.verb.curve.endPoint_description": "end point of curve",
    "bitbybit.verb.curve.startPoints": "start points",
    "bitbybit.verb.curve.startPoints_description": "start points of curves",
    "bitbybit.verb.curve.endPoints": "end points",
    "bitbybit.verb.curve.endPoints_description": "end points of curves",
    "bitbybit.verb.curve.knots": "knots",
    "bitbybit.verb.curve.knots_description": "finds knots of nurbs curve",
    "bitbybit.verb.curve.lengthAtParam": "length at param",
    "lengthAtParam": "length at param",
    "bitbybit.verb.curve.lengthAtParam_description": "gets length of nurbs curve at param",
    "bitbybit.verb.curve.length": "length",
    "bitbybit.verb.curve.length_description": "gets length of nurbs curve",
    "bitbybit.verb.curve.paramAtLength": "param at length",
    "paramAtLength": "param at length",
    "bitbybit.verb.curve.paramAtLength_description": "gets param at length on nurbs curve",
    "bitbybit.verb.curve.pointAtParam": "point at param",
    "pointAtParam": "point at param",
    "bitbybit.verb.curve.pointAtParam_description": "gets point at param on nurbs curve",
    "bitbybit.verb.curve.pointsAtParam": "points at param",
    "pointsAtParam": "points at param",
    "bitbybit.verb.curve.pointsAtParam_description": "gets points at param on nurbs curves",
    "bitbybit.verb.curve.reverse": "reverse",
    "bitbybit.verb.curve.reverse_description": "reverses nurbs curve",
    "bitbybit.verb.curve.split": "split",
    "bitbybit.verb.curve.split_description": "splits nurbs curve at param",
    "bitbybit.verb.curve.tangent": "tangent",
    "bitbybit.verb.curve.tangent_description": "tangent of nurbs curve at param",
    "bitbybit.verb.curve.tessellate": "tessellate",
    "tessellate": "tessellate",
    "bitbybit.verb.curve.tessellate_description": "tessellates nurbs curve into points",
    "bitbybit.verb.curve.transform": "transform",
    "bitbybit.verb.curve.transform_description": "transforms nurbs curve",
    "bitbybit.verb.curve.transformCurves": "transform curves",
    "transformCurves": "transform curves",
    "bitbybit.verb.curve.transformCurves_description": "transforms nurbs curves",
    "bitbybit.verb.curve.weights": "weights",
    "bitbybit.verb.curve.weights_description": "weights of nurbs curve",
    "bitbybit.verb.curve.circle.createCircle": "circle",
    "createCircle": "circle",
    "bitbybit.verb.curve.circle.createCircle_description": "creates circle nurbs curve",
    "xAxis": "x axis",
    "yAxis": "y axis",
    "bitbybit.verb.curve.circle.createArc": "arc",
    "createArc": "arc",
    "bitbybit.verb.curve.circle.createArc_description": "creates arc nurbs curve",
    "minAngle": "min angle",
    "maxAngle": "max angle",
    "bitbybit.verb.curve.circle.center": "center",
    "bitbybit.verb.curve.circle.center_description": "gets center of circle or arc",
    "bitbybit.verb.curve.circle.radius": "radius",
    "bitbybit.verb.curve.circle.radius_description": "gets radius of circle or arc",
    "bitbybit.verb.curve.circle.maxAngle": "max angle",
    "bitbybit.verb.curve.circle.maxAngle_description": "gets max angle of arc in degrees",
    "bitbybit.verb.curve.circle.minAngle": "min angle",
    "bitbybit.verb.curve.circle.minAngle_description": "gets min angle of arc in degrees",
    "bitbybit.verb.curve.circle.xAxis": "x axis",
    "bitbybit.verb.curve.circle.xAxis_description": "gets x angle of arc",
    "bitbybit.verb.curve.circle.yAxis": "y axis",
    "bitbybit.verb.curve.circle.yAxis_description": "gets y angle of arc",
    "bitbybit.verb.curve.ellipse.createEllipse": "ellipse",
    "createEllipse": "ellipse",
    "bitbybit.verb.curve.ellipse.createEllipse_description": "creates ellipse nurbs curve",
    "bitbybit.verb.curve.ellipse.createArc": "arc",
    "bitbybit.verb.curve.ellipse.createArc_description": "creates ellipse arc nurbs curve",
    "bitbybit.verb.curve.ellipse.center": "center",
    "bitbybit.verb.curve.ellipse.center_description": "gets center of ellipse or arc",
    "bitbybit.verb.curve.ellipse.maxAngle": "max angle",
    "bitbybit.verb.curve.ellipse.maxAngle_description": "gets max angle of arc in degrees",
    "bitbybit.verb.curve.ellipse.minAngle": "min angle",
    "bitbybit.verb.curve.ellipse.minAngle_description": "gets min angle of arc in degrees",
    "bitbybit.verb.curve.ellipse.xAxis": "x axis",
    "bitbybit.verb.curve.ellipse.xAxis_description": "gets x angle of arc or ellipse",
    "bitbybit.verb.curve.ellipse.yAxis": "y axis",
    "bitbybit.verb.curve.ellipse.yAxis_description": "gets y angle of arc or ellipse",
    "bitbybit.verb.surface.boundaries": "boundaries",
    "boundaries": "boundaries",
    "bitbybit.verb.surface.boundaries_description": "gets boundary edge nurbs curves of surface",
    "bitbybit.verb.surface.createSurfaceByCorners": "surface by corners",
    "createSurfaceByCorners": "surface by corners",
    "bitbybit.verb.surface.createSurfaceByCorners_description": "creates surface with 4 corner points",
    "point3": "point 3",
    "point4": "point 4",
    "bitbybit.verb.surface.createSurfaceByKnotsControlPointsWeights": "surface by knots control points weights",
    "createSurfaceByKnotsControlPointsWeights": "surface by knots control points weights",
    "bitbybit.verb.surface.createSurfaceByKnotsControlPointsWeights_description": "creates nurbs surface with uv knots degrees points weights",
    "degreeU": "degree u",
    "degreeV": "degree v",
    "knotsU": "knots u",
    "knotsV": "knots v",
    "bitbybit.verb.surface.createSurfaceByLoftingCurves": "surface by lofting curves",
    "createSurfaceByLoftingCurves": "surface by lofting curves",
    "bitbybit.verb.surface.createSurfaceByLoftingCurves_description": "creates nurbs surface by lofting curves",
    "bitbybit.verb.surface.clone": "clone",
    "bitbybit.verb.surface.clone_description": "clones nurbs surface",
    "bitbybit.verb.surface.closestParam": "closest param",
    "bitbybit.verb.surface.closestParam_description": "finds closest param on surface from point",
    "bitbybit.verb.surface.closestPoint": "closest point",
    "bitbybit.verb.surface.closestPoint_description": "finds closest point on surface from point",
    "bitbybit.verb.surface.controlPoints": "control points",
    "bitbybit.verb.surface.controlPoints_description": "gets control points on surface",
    "bitbybit.verb.surface.degreeU": "degree u",
    "bitbybit.verb.surface.degreeU_description": "gets u degree of surface",
    "bitbybit.verb.surface.degreeV": "degree v",
    "bitbybit.verb.surface.degreeV_description": "gets v degree of surface",
    "bitbybit.verb.surface.derivatives": "derivatives",
    "bitbybit.verb.surface.derivatives_description": "gets derivatives of surface at uv",
    "u": "u",
    "v": "v",
    "bitbybit.verb.surface.domainU": "domain u",
    "domainU": "domain u",
    "bitbybit.verb.surface.domainU_description": "gets u domain of surface",
    "bitbybit.verb.surface.domainV": "domain v",
    "domainV": "domain v",
    "bitbybit.verb.surface.domainV_description": "gets v domain of surface",
    "bitbybit.verb.surface.isocurve": "isocurve",
    "isocurve": "isocurve",
    "bitbybit.verb.surface.isocurve_description": "gets nurbs isocurve on surface",
    "useV": "use v",
    "bitbybit.verb.surface.isocurvesSubdivision": "isocurves subdivision",
    "isocurvesSubdivision": "isocurves subdivision",
    "bitbybit.verb.surface.isocurvesSubdivision_description": "subdivides surface into isocurves",
    "isocurveSegments": "isocurve segments",
    "bitbybit.verb.surface.isocurvesAtParams": "isocurves at params",
    "isocurvesAtParams": "isocurves at params",
    "bitbybit.verb.surface.isocurvesAtParams_description": "subdivides surface into isocurves at params",
    "parameters": "parameters",
    "bitbybit.verb.surface.knotsU": "knots u",
    "bitbybit.verb.surface.knotsU_description": "gets u knots of surface",
    "bitbybit.verb.surface.knotsV": "knots v",
    "bitbybit.verb.surface.knotsV_description": "gets v knots of surface",
    "bitbybit.verb.surface.normal": "normal",
    "bitbybit.verb.surface.normal_description": "gets normal on surface at uv",
    "bitbybit.verb.surface.point": "point",
    "bitbybit.verb.surface.point_description": "gets point on surface at uv",
    "bitbybit.verb.surface.reverse": "reverse",
    "bitbybit.verb.surface.reverse_description": "reverses nurbs surface uv and isocurves",
    "bitbybit.verb.surface.split": "split",
    "bitbybit.verb.surface.split_description": "splits nurbs surface in two",
    "bitbybit.verb.surface.transformSurface": "transform surface",
    "transformSurface": "transform surface",
    "bitbybit.verb.surface.transformSurface_description": "transforms nurbs surface with transformations",
    "bitbybit.verb.surface.weights": "weights",
    "bitbybit.verb.surface.weights_description": "gets weights of surface",
    "bitbybit.verb.surface.cone.create": "create",
    "cone": "cone",
    "bitbybit.verb.surface.cone.create_description": "creates conical nurbs surface",
    "bitbybit.verb.surface.cone.axis": "axis",
    "bitbybit.verb.surface.cone.axis_description": "gets cone axis",
    "bitbybit.verb.surface.cone.base": "base",
    "bitbybit.verb.surface.cone.base_description": "gets cone base",
    "bitbybit.verb.surface.cone.height": "height",
    "bitbybit.verb.surface.cone.height_description": "gets cone height",
    "bitbybit.verb.surface.cone.radius": "radius",
    "bitbybit.verb.surface.cone.radius_description": "gets cone radius",
    "bitbybit.verb.surface.cone.xAxis": "x axis",
    "bitbybit.verb.surface.cone.xAxis_description": "gets cone x axis",
    "bitbybit.verb.surface.cylinder.create": "create",
    "bitbybit.verb.surface.cylinder.create_description": "creates cylindrical nurbs surface",
    "bitbybit.verb.surface.cylinder.axis": "axis",
    "bitbybit.verb.surface.cylinder.axis_description": "gets cylinder axis",
    "bitbybit.verb.surface.cylinder.base": "base",
    "bitbybit.verb.surface.cylinder.base_description": "gets cylinder base",
    "bitbybit.verb.surface.cylinder.height": "height",
    "bitbybit.verb.surface.cylinder.height_description": "gets cylinder height",
    "bitbybit.verb.surface.cylinder.radius": "radius",
    "bitbybit.verb.surface.cylinder.radius_description": "gets cylinder radius",
    "bitbybit.verb.surface.cylinder.xAxis": "x axis",
    "bitbybit.verb.surface.cylinder.xAxis_description": "gets cylinder x axis",
    "bitbybit.verb.surface.extrusion.create": "create",
    "extrusion": "extrusion",
    "bitbybit.verb.surface.extrusion.create_description": "creates nurbs surface extrusion from curve",
    "profile": "profile",
    "bitbybit.verb.surface.extrusion.direction": "direction",
    "bitbybit.verb.surface.extrusion.direction_description": "gets direction vector of extrusion",
    "bitbybit.verb.surface.extrusion.profile": "profile",
    "bitbybit.verb.surface.extrusion.profile_description": "gets profile nurbs curve of extrusion",
    "bitbybit.verb.surface.sphere.create": "create",
    "bitbybit.verb.surface.sphere.create_description": "creates spherical nurbs surface",
    "bitbybit.verb.surface.sphere.radius": "radius",
    "bitbybit.verb.surface.sphere.radius_description": "gets radius of spherical nurbs surface",
    "bitbybit.verb.surface.sphere.center": "center",
    "bitbybit.verb.surface.sphere.center_description": "gets center of spherical nurbs surface",
    "bitbybit.verb.surface.revolved.create": "create",
    "revolved": "revolved",
    "bitbybit.verb.surface.revolved.create_description": "creates revolved nurbs surface",
    "bitbybit.verb.surface.revolved.profile": "profile",
    "bitbybit.verb.surface.revolved.profile_description": "gets profile nurbs curve of revolved surface",
    "revolution": "revolution",
    "bitbybit.verb.surface.revolved.center": "center",
    "bitbybit.verb.surface.revolved.center_description": "gets center nurbs curve of revolved surface",
    "bitbybit.verb.surface.revolved.axis": "axis",
    "bitbybit.verb.surface.revolved.axis_description": "gets rotation axis of revolved surface",
    "bitbybit.verb.surface.revolved.angle": "angle",
    "bitbybit.verb.surface.revolved.angle_description": "gets angle of rotation of revolved surface",
    "bitbybit.verb.surface.sweep.create": "create",
    "sweep": "sweep",
    "bitbybit.verb.surface.sweep.create_description": "creates sweep nurbs surface",
    "rail": "rail",
    "bitbybit.verb.surface.sweep.profile": "profile",
    "bitbybit.verb.surface.sweep.profile_description": "gets profile nurbs curve of swept surface",
    "bitbybit.verb.surface.sweep.rail": "rail",
    "bitbybit.verb.surface.sweep.rail_description": "gets rail nurbs curve of swept surface",
    "bitbybit.verb.intersect.curves": "curves",
    "bitbybit.verb.intersect.curves_description": "intersects two verb nurbs curves",
    "firstCurve": "first curve",
    "secondCurve": "second curve",
    "bitbybit.verb.intersect.curveAndSurface": "curve and surface",
    "curveAndSurface": "curve and surface",
    "bitbybit.verb.intersect.curveAndSurface_description": "intersects curve and surface",
    "bitbybit.verb.intersect.surfaces": "surfaces",
    "bitbybit.verb.intersect.surfaces_description": "intersects two surfaces",
    "firstSurface": "first surface",
    "secondSurface": "second surface",
    "bitbybit.verb.intersect.curveCurveFirstParams": "curve curve first params",
    "curveCurveFirstParams": "curve curve first params",
    "bitbybit.verb.intersect.curveCurveFirstParams_description": "gets intersection params on first curve",
    "intersections": "intersections",
    "BaseTypes.CurveCurveIntersection[]": "base types curve curve intersection array",
    "bitbybit.verb.intersect.curveCurveSecondParams": "curve curve second params",
    "curveCurveSecondParams": "curve curve second params",
    "bitbybit.verb.intersect.curveCurveSecondParams_description": "gets intersection params on second curve",
    "bitbybit.verb.intersect.curveCurveFirstPoints": "curve curve first points",
    "curveCurveFirstPoints": "curve curve first points",
    "bitbybit.verb.intersect.curveCurveFirstPoints_description": "gets intersection points on first curve",
    "bitbybit.verb.intersect.curveCurveSecondPoints": "curve curve second points",
    "curveCurveSecondPoints": "curve curve second points",
    "bitbybit.verb.intersect.curveCurveSecondPoints_description": "gets intersection points on second curve",
    "bitbybit.verb.intersect.curveSurfaceCurveParams": "curve surface curve params",
    "curveSurfaceCurveParams": "curve surface curve params",
    "bitbybit.verb.intersect.curveSurfaceCurveParams_description": "gets intersection params on curve",
    "BaseTypes.CurveSurfaceIntersection[]": "base types curve surface intersection array",
    "bitbybit.verb.intersect.curveSurfaceSurfaceParams": "curve surface surface params",
    "curveSurfaceSurfaceParams": "curve surface surface params",
    "bitbybit.verb.intersect.curveSurfaceSurfaceParams_description": "gets intersection params on surface",
    "bitbybit.verb.intersect.curveSurfaceCurvePoints": "curve surface curve points",
    "curveSurfaceCurvePoints": "curve surface curve points",
    "bitbybit.verb.intersect.curveSurfaceCurvePoints_description": "gets intersection points on curve",
    "bitbybit.verb.intersect.curveSurfaceSurfacePoints": "curve surface surface points",
    "curveSurfaceSurfacePoints": "curve surface surface points",
    "bitbybit.verb.intersect.curveSurfaceSurfacePoints_description": "gets intersection points on surface",
    "bitbybit.tag.create": "create",
    "tag": "tag",
    "bitbybit.tag.create_description": "creates tag dto",
    "adaptDepth": "adapt depth",
    "needsUpdate": "needs update",
    "bitbybit.time.registerRenderFunction": "register render function",
    "registerRenderFunction": "register render function",
    "bitbybit.time.registerRenderFunction_description": "registers function to render loop",
    "bitbybit.asset.getFile": "get file",
    "asset": "asset",
    "getFile": "get file",
    "bitbybit.asset.getFile_description": "gets asset file",
    "bitbybit.asset.getLocalFile": "get local file",
    "getLocalFile": "get local file",
    "bitbybit.asset.getLocalFile_description": "gets local asset file from browser",
    "bitbybit.asset.fetchBlob": "fetch blob",
    "fetchBlob": "fetch blob",
    "bitbybit.asset.fetchBlob_description": "fetches blob from cors url",
    "fetch": "fetch",
    "bitbybit.asset.fetchFile": "fetch file",
    "fetchFile": "fetch file",
    "bitbybit.asset.fetchFile_description": "fetches file from cors url",
    "bitbybit.asset.fetchJSON": "fetch json",
    "fetchJSON": "fetch json",
    "bitbybit.asset.fetchJSON_description": "fetches json from cors url",
    "bitbybit.asset.fetchText": "fetch text",
    "fetchText": "fetch text",
    "bitbybit.asset.fetchText_description": "fetches text from cors url",
    "bitbybit.asset.createObjectURL": "object url",
    "createObjectURL": "object url",
    "bitbybit.asset.createObjectURL_description": "creates url to file in memory",
    "file": "file",
    "File | Blob": "file or blob",
    "bitbybit.asset.createObjectURLs": "object urls",
    "createObjectURLs": "object urls",
    "bitbybit.asset.createObjectURLs_description": "creates urls to files in memory",
    "files": "files",
    "(File | Blob)[]": "file or blob array",
    "exec": "exec",
    "Visible": "Visible",
    "Hidden": "Hidden",
    "flatten": "flatten",
    "force exec": "force exec",
    "console log": "console log",
    "preview data": "preview data",
    "flow": "flow",
    "code": "code",
    "runner": "runner",
    "counters": "counters",
    "actions": "actions",
    "loops": "loops",
    "interval": "interval",
    "delay": "delay",
    "expire": "expire",
    "timeout": "timeout",
    "counter min max": "counter min max",
    "counter steps": "counter steps",
    "reset": "reset",
    "trigger": "trigger",
    "mouse": "mouse",
    "mouse click": "mouse click",
    "key": "key",
    "pointer": "pointer",
    "pick info": "pick info",
    "down": "down",
    "wheel": "wheel",
    "tap": "tap",
    "double tap": "double tap",
    "render": "render",
    "passed ms": "passed ms",
    "babylon observable listener": "babylon observable listener",
    "object": "object",
    "observable selector": "observable selector",
    "get event data": "get event data",
    "exec click": "exec click",
    "exec down": "exec down",
    "toggle": "toggle",
    "flip flop": "flip flop",
    "boolean gate": "boolean gate",
    "boolean gate silent": "boolean gate silent",
    "is undefined": "is undefined",
    "for loop": "for loop",
    "last": "last",
    "for each loop": "for each loop",
    "element": "element",
    "body": "body",
    "complete": "complete",
    "editors": "editors",
    "inputs": "inputs",
    "outputs": "outputs",
    "recent": "recent",
    "Clear": "Clear",
    "Run": "Run",
    "Swap Canvas": "Swap Canvas",
    "Local Assets": "Local Assets",
    "Import": "Import",
    "Export": "Export",
    "Copy to Clipboard": "Copy to Clipboard",
    "Paste from Clipboard": "Paste from Clipboard",
    "Export to runner": "Export to runner",
    "Clean Cache": "Clean Cache",
    "Community": "Community",
    "Sponsors and Partners": "Sponsors and Partners",
    "API Documentation": "API Documentation",
    "About": "About",
    "Toolbox": "Toolbox",
    "More": "More",
    "bitbybit.code.typeScriptEditor": "typescript editor",
    "bitbybit.code.typeScriptEditor_description": "Allows to write TypeScript code with full bitbybit intellisense in one function. Whatever start function returns it will be seen as an output of the component.",
    "bitbybit.code.javaScriptEditor": "javascript editor",
    "bitbybit.code.javaScriptEditor_description": "Allows to write JavaScript code in one function. Whatever start function returns it will be seen as an output of the component.",
    "bitbybit.code.jsonEditor": "json editor",
    "bitbybit.code.jsonEditor_description": "Allows to write JSON code. Whatever start function returns it will be seen as an output of the component.",
    "bitbybit.flow.actions.keyboard": "keyboard",
    "bitbybit.flow.actions.keyboard_description": "Will execute on keyboard events by clicking the buttons.",
    "bitbybit.flow.actions.mouseClick": "mouse click",
    "bitbybit.flow.actions.mouseClick_description": "Will execute on mouse events by clicking the buttons.",
    "bitbybit.flow.actions.start": "start",
    "bitbybit.flow.actions.start_description": "Starts the control flow and triggers executions.",
    "bitbybit.flow.actions.trigger": "trigger",
    "bitbybit.flow.actions.trigger_description": "Triggers the execution by clicking the button.",
    "bitbybit.flow.babylon.gui.button": "button",
    "bitbybit.flow.babylon.gui.button_description": "Will execute on various pointer events by clicking the left mouse button on babylonjs canvas.",
    "bitbybit.flow.babylon.scene.pointerEvents": "pointer",
    "bitbybit.flow.babylon.scene.pointerEvents_description": "Will execute on various pointer events by clicking the left mouse button on babylonjs canvas.",
    "bitbybit.flow.babylon.getEventDataFromObservedResult": "get event data",
    "bitbybit.flow.babylon.getEventDataFromObservedResult_description": "Gets event data from observed result of the observable listener.",
    "bitbybit.flow.babylon.observableListener": "babylon observable listener",
    "bitbybit.flow.babylon.observableListener_description": "Will subscribe and listen to any of the babylonjs observables.",
    "bitbybit.flow.babylon.render": "render",
    "bitbybit.flow.babylon.render_description": "Executes on each babylonjs render frame.",
    "bitbybit.flow.counters.counterMinMax": "counter min max",
    "bitbybit.flow.counters.counterMinMax_description": "Counts the number of flow executions between min and max values. When max is reached it resets",
    "bitbybit.flow.counters.counterSteps": "counter steps",
    "bitbybit.flow.counters.counterSteps_description": "Counts the number of flow executions by starting on given count value and increasing at each execution by given step from the list, till steps are finished. When end is reached it resets",
    "bitbybit.flow.counters.counter": "counter",
    "bitbybit.flow.counters.counter_description": "Counts the number of flow executions.",
    "bitbybit.flow.logic.booleanGateSilent": "boolean gate silent",
    "bitbybit.flow.logic.booleanGateSilent_description": "Triggers different execution events based on the value of boolean provided, but executes only when boolean changes its value, this prevents from multiple events firing constantly even though no change happened.",
    "bitbybit.flow.logic.booleanGate": "boolean gate",
    "bitbybit.flow.logic.booleanGate_description": "Triggers different execution events based on the value of boolean provided.",
    "bitbybit.flow.logic.flipFlop": "flip flop",
    "bitbybit.flow.logic.flipFlop_description": "Every time an event is executed a different event will fire, in essence creating a toggle functionality.",
    "bitbybit.flow.logic.isUndefined": "is undefined",
    "bitbybit.flow.logic.isUndefined_description": "Checks whether the value provided is undefined and triggers true or false event.",
    "bitbybit.flow.loops.forEach": "for each loop",
    "bitbybit.flow.loops.forEach_description": "For each loop that walks through all the elements in the list.",
    "bitbybit.flow.loops.for": "for loop",
    "bitbybit.flow.loops.for_description": "For loop that executes body between two values.",
    "bitbybit.flow.time.delay": "delay",
    "bitbybit.flow.time.delay_description": "Delays execution by given timeout in ms.",
    "bitbybit.flow.time.interval": "interval",
    "bitbybit.flow.time.interval_description": "Executes the flow every given interval in ms.",
    "bitbybit.lists.createList": "create list",
    "bitbybit.lists.createList_description": "Creates a list from the given elements.",
    "bitbybit.lists.flatten": "flatten",
    "bitbybit.lists.flatten_description": "Flattens the list of lists into a single list.",
    "bitbybit.lists.passThrough": "pass through",
    "bitbybit.lists.passThrough_description": "Casts value to 'any' type and passes the input to output without any changes.",
    "bitbybit.math.numberSlider": "number slider",
    "bitbybit.math.numberSlider_description": "Creates a number with a slider. You can set up min, mac and step values.",
    "bitbybit.consoleLog": "console log",
    "bitbybit.consoleLog_description": "Logs the input to the browser console.",
    "bitbybit.previewData": "preview data",
    "bitbybit.previewData_description": "Shows the input data in a preview overview area. It can be text, numbers, json objects, arrays, etc. Circular Javascript objects not allowed.",
    "bitbybit.runner.getRunnerInputValue": "get runner input value",
    "bitbybit.runner.getRunnerInputValue_description": "Get the runner input value from the inputs JSON. This component will always return an undefined value in the editor context.",
    "bitbybit.runner.getRunnerInputs": "get runner inputs",
    "bitbybit.runner.getRunnerInputs_description": "Get the runner inputs in JSON. This component will always return empty object in the editor context.",
    "bitbybit.runner.run": "run",
    "bitbybit.runner.run_description": "Runs runner javascript code",
    "bitbybit.runner.setRunnerResult": "set runner result",
    "bitbybit.runner.setRunnerResult_description": "Sets the complete JSON result for the runner. Keep in mind that it is safer to set values as this method will overwrite the whole result object with the value provided.",
    "bitbybit.runner.setRunnerResultArrayValue": "set runner result array value",
    "bitbybit.runner.setRunnerResultArrayValue_description": "Sets the runner result value on the proiperty of JSON object. Each value will be added to an array, that is the value of the property.",
    "bitbybit.runner.setRunnerResultValue": "set runner result value",
    "bitbybit.runner.setRunnerResultValue_description": "Sets the runner result value on the proiperty of JSON object.",
    "bitbybit.text.areaCreate": "text area",
    "bitbybit.text.areaCreate_description": "Creates a text area in the editor. You can set up the text, width and height of the area.",
    "update on drag": "update on drag",
    "paste": "paste",
    "duplicate": "duplicate",
    "delete": "delete",
    "keyboard": "keyboard",
    "data": "data",
    "observables": "observables",
    "buttons": "buttons",
    "variables": "variables",
    "functions": "functions",
    "loop": "loop",
    "apply": "apply",
    "async context": "async context",
    "async context description": "Create asynchronous context that can use await components, simplifying asynchronous code execution and readability.",
    "then": "then",
    "await": "await",
    "await description": "Waits for the promise to be resolved and returns the value.",
    "when the": "when the",
    "error": "error",
    "happens in the promise": "happens in the promise",
    "catch": "catch",
    "catch description": "Catches the error that may happen while running asynchronous code. User can choose to handle errors appropriately.",
    "cancel the interval execution": "cancel the interval execution",
    "cancel the interval description": "Cancels the interval execution by providing the handler.",
    "cancel the timeout execution": "cancel the timeout execution",
    "cancel the timeout description": "Cancels the timeout execution by providing the handler.",
    "key down": "key down",
    "key down descritpion": "Triggeres code when key down event happens.",
    "key up": "key up",
    "key up description": "Triggeres code when key up event happens.",
    "key press": "key press",
    "key press description": "Triggeres code when key press event happens.",
    "is key pressed": "is key pressed",
    "block_validation_required": "must be provided",
    "block_validation_of_length": "must contain item count of",
    "block_validation_higher_or_equal": "must be higher or equal to",
    "block_validation_lower_or_equal": "must be lower or equal to",
    "block_validation_range": "must be in range",
    "block_validation_smaller_than": "must be smaller than",
    "block_validation_smaller_or_equal_than": "must be smaller or equal than",
    "block_validation_larger_than": "must be larger than",
    "block_validation_larger_or_equal_than": "must be larger or equal than",
    "save text to file": "save text to file",
    "save text to file description": "Saves text to a file and allows you to choose the name and extension. This component does not preview the text and can be used in situations where text may be too big to edit in text area field.",
    "print text on screen": "print text on screen",
    "print text on screen description": "Prints text on screen. This component is useful for debugging purposes.",
    "preview text and save to file": "preview text and save to file",
    "preview text and save to file description": "Prints text on screen and allows you to save it to a file. This component is useful for debugging purposes.",
    "register render loop listener": "register render loop listener",
    "and update": "and update",
    "register render loop listener description": "Runs the statment in the render loop and indicates how much time has passed since last frame in timeElapsedFromPreviousFrame variable.",
    "timeElapsedFromPreviousFrame_var": "timeElapsedFromPreviousFrame",
    "computing": "computing",
    "result": "result",
    "of promise is returned": "of promise is returned",
    "on pointer up": "on pointer up",
    "on pointer move": "on pointer move",
    "on pointer down": "on pointer down",
    "of babylonjs observable object": "of babylonjs observable object",
    "observable name": "observable name",
    "is key pressed description": "Checks whether the key is pressed and returns true or false.",
    "execute code after": "execute code after",
    "execute code after description": "Executes the code after given timeout in seconds.",
    "execute code every": "execute code every",
    "second(s)": "second(s)",
    "execute code every description": "Executes the code every given interval in seconds.",
    "handler": "handler",
    "workers initialising": "workers initialising",
    "Assets": "Assets",
    "Local assets stored in browser cache:": "Local assets stored in browser cache:",
    "Asset Name": "Asset Name",
    "Name is required": "Name is required",
    "Asset with this name already exists, choose a different one": "Asset with this name already exists, choose a different one",
    "Allowed file formats:": "Allowed file formats:",
    "You must select an asset file": "You must select an asset file",
    "Upload Local Asset": "Upload Local Asset",
    "File Name": "File Name",
    "File Size": "File Size",
    "Your browser does not support indexDB and you can't upload local asset files.": "Your browser does not support indexDB and you can't upload local asset files.",
    "Upload": "Upload",
    "elements": "elements",
    "bitbybit.vector.vectorsTheSame": "vectors the same",
    "vectorsTheSame": "vectors the same",
    "bitbybit.vector.vectorsTheSame_description": "Checks if two vectors are the same within a given tolerance",
    "vec1": "vector 1",
    "vec2": "vector 2",
    "bitbybit.point.boundingBoxOfPoints": "bounding box of points",
    "boundingBoxOfPoints": "bounding box of points",
    "bitbybit.point.boundingBoxOfPoints_description": "Gets a bounding box of the points",
    "bitbybit.point.normalFromThreePoints": "normal from three points",
    "normalFromThreePoints": "normal from three points",
    "bitbybit.point.normalFromThreePoints_description": "Creates a normal vector from 3 points",
    "reverseNormal": "reverse normal",
    "bitbybit.occt.shapes.wire.createLineWireWithExtensions": "line wire with extensions",
    "createLineWireWithExtensions": "line wire with extensions",
    "bitbybit.occt.shapes.wire.createLineWireWithExtensions_description": "Creates OpenCascade line wire with extensions",
    "extensionStart": "ext start",
    "extensionEnd": "ext end",
    "bitbybit.occt.shapes.wire.midPointOnWire": "mid point on wire",
    "midPointOnWire": "mid point on wire",
    "bitbybit.occt.shapes.wire.midPointOnWire_description": "Computes the middle point on the wire at param 0.5",
    "centerOnOrigin": "center on origin",
    "bitbybit.occt.shapes.wire.textWiresWithData": "text wires with data",
    "textWiresWithData": "text wires with data",
    "bitbybit.occt.shapes.wire.textWiresWithData_description": "Creates OpenCascade compound out of text wires and returns additional information based on simplex font created by Dr. A. V. Hershey",
    "bitbybit.occt.transforms.alignNormAndAxis": "align normal and axis",
    "alignNormAndAxis": "align normal and axis",
    "bitbybit.occt.transforms.alignNormAndAxis_description": "Align the shape with normal and axis",
    "fromNorm": "from normal",
    "fromAx": "from axis",
    "toNorm": "to normal",
    "toAx": "to axis",
    "bitbybit.occt.dimensions.simpleLinearLengthDimension": "simple linear length dimension",
    "simpleLinearLengthDimension": "simple linear length dimension",
    "bitbybit.occt.dimensions.simpleLinearLengthDimension_description": "Creates simple linear length dimension between two points - measuring units",
    "offsetFromPoints": "offset from points",
    "crossingSize": "crossing size",
    "labelSuffix": "label suffix",
    "labelSize": "label size",
    "labelOffset": "label offset",
    "bitbybit.occt.dimensions.simpleAngularDimension": "simple angular dimension",
    "simpleAngularDimension": "simple angular dimension",
    "bitbybit.occt.dimensions.simpleAngularDimension_description": "Creates simple angular dimension. By default we output degrees, but you can opt to use radians.",
    "direction1": "direction 1",
    "direction2": "direction 2",
    "offsetFromCenter": "offset from center",
    "extraSize": "extra size",
    "radians": "radians",
    "bitbybit.occt.dimensions.pinWithLabel": "pin with label",
    "pinWithLabel": "pin with label",
    "bitbybit.occt.dimensions.pinWithLabel_description": "Creates pin label. It can be used to explain things about the models or mark important things in the 3D scene.",
    "offsetFromStart": "offset from start",
    "bitbybit.vector.lengthSq": "length squared",
    "lengthSq": "length squared",
    "bitbybit.vector.lengthSq_description": "Computes the squared length of the vector",
    "bitbybit.point.twoPointsAlmostEqual": "two points equal",
    "twoPointsAlmostEqual": "two points equal",
    "bitbybit.point.twoPointsAlmostEqual_description": "Checks if two points are almost equal",
    "bitbybit.line.lineToSegment": "line to segment",
    "lineToSegment": "line to segment",
    "bitbybit.line.lineToSegment_description": "Convert the line to segment",
    "bitbybit.line.linesToSegments": "lines to segments",
    "linesToSegments": "lines to segments",
    "bitbybit.line.linesToSegments_description": "Converts the lines to segments",
    "bitbybit.line.segmentToLine": "segment to line",
    "segmentToLine": "segment to line",
    "bitbybit.line.segmentToLine_description": "Converts the segment to line",
    "segment": "segment",
    "Base.Segment3": "Base.Segment3",
    "bitbybit.line.segmentsToLines": "segments to lines",
    "segmentsToLines": "segments to lines",
    "bitbybit.line.segmentsToLines_description": "Converts the segments to lines",
    "Base.Segment3[]": "Base.Segment3[]",
    "bitbybit.polyline.sortSegmentsIntoPolylines": "sort segments to polylines",
    "sortSegmentsIntoPolylines": "sort segments to polylines",
    "bitbybit.polyline.sortSegmentsIntoPolylines_description": "Create the polylines from segments that are potentially connected but scrambled randomly",
    "sort": "sort",
    "bitbybit.mesh.signedDistanceToPlane": "signed distance to plane",
    "signedDistanceToPlane": "signed distance to plane",
    "bitbybit.mesh.signedDistanceToPlane_description": "Computes the signed distance from a point to a plane.",
    "plane": "plane",
    "Base.TrianglePlane3": "Base.TrianglePlane3",
    "bitbybit.mesh.calculateTrianglePlane": "calculate triangle plane",
    "calculateTrianglePlane": "calculate triangle plane",
    "bitbybit.mesh.calculateTrianglePlane_description": "Calculates the triangle plane from triangle.",
    "triangle": "triangle",
    "Base.Triangle3": "Base.Triangle3",
    "bitbybit.mesh.triangleTriangleIntersection": "triangle triangle intersection",
    "triangleTriangleIntersection": "triangle triangle intersection",
    "bitbybit.mesh.triangleTriangleIntersection_description": "Calculates the intersection of two triangles.",
    "triangle1": "triangle 1",
    "triangle2": "triangle 2",
    "bitbybit.mesh.meshMeshIntersectionSegments": "mesh mesh intersection segments",
    "meshMeshIntersectionSegments": "mesh mesh intersection segments",
    "bitbybit.mesh.meshMeshIntersectionSegments_description": "Computes the intersection segments of two meshes.",
    "mesh1": "mesh 1",
    "Base.Mesh3": "Base.Mesh3",
    "mesh2": "mesh 2",
    "bitbybit.mesh.meshMeshIntersectionPolylines": "mesh mesh intersection polylines",
    "meshMeshIntersectionPolylines": "mesh mesh intersection polylines",
    "bitbybit.mesh.meshMeshIntersectionPolylines_description": "Computes the intersection polylines of two meshes.",
    "bitbybit.occt.shapeFacesToPolygonPoints": "shape faces to polygon points",
    "shapeFacesToPolygonPoints": "shape faces to polygon points",
    "bitbybit.occt.shapeFacesToPolygonPoints_description": "Creates polygon points from the shape faces",
    "reversedPoints": "reversed points",
    "bitbybit.occt.shapeToMesh": "shape to mesh",
    "shapeToMesh": "shape to mesh",
    "bitbybit.occt.shapeToMesh_description": "Creates mesh from the shape",
    "bitbybit.occt.shapesToMeshes": "shapes to meshes",
    "shapesToMeshes": "shapes to meshes",
    "bitbybit.occt.shapesToMeshes_description": "Creates mesh from the shape",
    "bitbybit.manifold.manifold.shapes.fromPolygonPoints": "from polygon points",
    "bitbybit.manifold.manifold.shapes.fromPolygonPoints_description": "Create a Manifold from a set of polygon points describing triangles.",
    "traingle": "traingle",
    "bitbybit.point.stretchPointsDirFromCenter": "stretch points dir from center",
    "stretchPointsDirFromCenter": "stretch points dir from center",
    "bitbybit.point.stretchPointsDirFromCenter_description": "Stretch multiple points by providing center point, direction and uniform scale factor",
    "bitbybit.point.hexGridScaledToFit": "hex grid scaled to fit",
    "hexGridScaledToFit": "hex grid scaled to fit",
    "bitbybit.point.hexGridScaledToFit_description": "Creates a pointy  top hexagon grid, scaling hexagons to fit specified dimensions exactly. Returns both center points and the vertices of each (potentially scaled) hexagon. Hexagons are ordered column-first, then row-first.",
    "nrHexagonsU": "nr hexagons u",
    "nrHexagonsV": "nr hexagons v",
    "extendTop": "extend top",
    "extendBottom": "extend bottom",
    "extendLeft": "extend left",
    "extendRight": "extend right",
    "centerGrid": "center grid",
    "bitbybit.point.sortPoints": "sort points",
    "sortPoints": "sort points",
    "bitbybit.point.sortPoints_description": "Sorts points lexicographically (X, then Y, then Z)",
    "bitbybit.line.lineLineIntersection": "line line intersection",
    "lineLineIntersection": "line line intersection",
    "bitbybit.line.lineLineIntersection_description": "If two lines intersect return the intersection point",
    "line1": "line 1",
    "line2": "line 2",
    "checkSegmentsOnly": "check segments only",
    "bitbybit.polyline.polylineToLines": "polyline to lines",
    "polylineToLines": "polyline to lines",
    "bitbybit.polyline.polylineToLines_description": "Create the lines from the polyline",
    "bitbybit.polyline.polylineToSegments": "polyline to segments",
    "polylineToSegments": "polyline to segments",
    "bitbybit.polyline.polylineToSegments_description": "Create the segments from the polyline",
    "bitbybit.polyline.polylineSelfIntersection": "polyline self intersection",
    "polylineSelfIntersection": "polyline self intersection",
    "bitbybit.polyline.polylineSelfIntersection_description": "Finds the points of self intersection of the polyline",
    "bitbybit.polyline.twoPolylineIntersection": "two polyline intersection",
    "twoPolylineIntersection": "two polyline intersection",
    "bitbybit.polyline.twoPolylineIntersection_description": "Finds the intersection points between two polylines.",
    "polyline1": "polyline 1",
    "polyline2": "polyline 2",
    "bitbybit.occt.shapes.face.subdivideToHexagonWires": "subdivide to hexagon wires",
    "subdivideToHexagonWires": "subdivide to hexagon wires",
    "bitbybit.occt.shapes.face.subdivideToHexagonWires_description": "Subdivides a face to hexagon wires",
    "extendUUp": "extend u up",
    "extendUBottom": "extend u bottom",
    "extendVUp": "extend v up",
    "extendVBottom": "extend v bottom",
    "nrHexagonsInHeight": "nr hexagons in height",
    "nrHexagonsInWidth": "nr hexagons in width",
    "bitbybit.vector.length": "vector length",
    "bitbybit.vector.length_description": "Computes the length of the vector",
    "bitbybit.point.maxFilletRadius": "max fillet radius",
    "maxFilletRadius": "max fillet radius",
    "bitbybit.point.maxFilletRadius_description": "Calculates the maximum possible fillet radius at a corner formed by two line segments sharing an endpoint (C), such that the fillet arc is tangent to both segments and lies entirely within them.",
    "bitbybit.point.maxFilletRadiusHalfLine": "max fillet radius half line",
    "maxFilletRadiusHalfLine": "max fillet radius half line",
    "bitbybit.point.maxFilletRadiusHalfLine_description": "Calculates the maximum possible fillet radius at a corner C, such that the fillet arc is tangent to both segments (P1-C, P2-C) and the tangent points lie within the first half of each segment (measured from C).",
    "bitbybit.point.maxFilletsHalfLine": "max fillets half line",
    "maxFilletsHalfLine": "max fillets half line",
    "bitbybit.point.maxFilletsHalfLine_description": "Calculates the maximum possible fillet radius at each corner of a polyline formed by formed by a series of points. The fillet radius is calculated for each internal corner and optionally for the closing corners if the polyline is closed.",
    "checkLastWithFirst": "check last with first",
    "bitbybit.point.safestPointsMaxFilletHalfLine": "safest points max fillet half line",
    "safestPointsMaxFilletHalfLine": "safest points max fillet half line",
    "bitbybit.point.safestPointsMaxFilletHalfLine_description": "Calculates the single safest maximum fillet radius that can be applied uniformly to all corners of collection of points, based on the 'half-line' constraint. This is determined by finding the minimum of the maximum possible fillet radii calculated for each individual corner.",
    "bitbybit.polyline.maxFilletsHalfLine": "max fillets half line",
    "bitbybit.polyline.maxFilletsHalfLine_description": "Calculates the maximum possible half-line fillet radius for each corner of a given polyline. For a closed polyline, it includes the corners connecting the last segment back to the first. The calculation uses the 'half-line' constraint, meaning the fillet's tangent points must lie within the first half of each segment connected to the corner.",
    "bitbybit.polyline.safestFilletRadius": "safest fillet radius",
    "safestFilletRadius": "safest fillet radius",
    "bitbybit.polyline.safestFilletRadius_description": "Calculates the single safest maximum fillet radius that can be applied uniformly to all corners of a polyline, based on the 'half-line' constraint. This is determined by finding the minimum of the maximum possible fillet radii calculated for each individual corner.",
    "flatTop": "flat top",
    "bitbybit.mesh.meshMeshIntersectionPoints": "mesh mesh intersection points",
    "meshMeshIntersectionPoints": "mesh mesh intersection points",
    "bitbybit.mesh.meshMeshIntersectionPoints_description": "Computes the intersection points of two meshes.",
    "bitbybit.occt.shapes.wire.hexagonsInGrid": "hexagons in grid",
    "hexagonsInGrid": "hexagons in grid",
    "bitbybit.occt.shapes.wire.hexagonsInGrid_description": "Creates OpenCascade hexagon wires in grid",
    "scalePatternWidth": "scale pattern width",
    "scalePatternHeight": "scale pattern height",
    "bitbybit.occt.booleans.meshMeshIntersectionWires": "mesh mesh intersection wires",
    "meshMeshIntersectionWires": "mesh mesh intersection wires",
    "bitbybit.occt.booleans.meshMeshIntersectionWires_description": "Does mesh mesh intersection operation between two shapes - both shapes can have their own  meshing precision. This algorithm intersects the meshes and returns the wires of the intersection, which are polylines or polygons.",
    "mesh based": "mesh based",
    "precision1": "precision 1",
    "precision2": "precision 2",
    "bitbybit.occt.booleans.meshMeshIntersectionPoints": "mesh mesh intersection points",
    "bitbybit.occt.booleans.meshMeshIntersectionPoints_description": "Does mesh mesh intersection operation between two shapes - both shapes can have their own  meshing precision. This algorithm intersects the meshes and returns the points of the intersection, which are polylines or polygons.",
    "bitbybit.occt.booleans.meshMeshIntersectionOfShapesWires": "mesh mesh intersection to wires",
    "meshMeshIntersectionOfShapesWires": "mesh mesh intersection to wires",
    "bitbybit.occt.booleans.meshMeshIntersectionOfShapesWires_description": "Does mesh mesh intersection operation between the shape and multiple other shapes - all shapes can have their own meshing precision. This algorithm intersects the meshes and returns the wires of the intersection, which are polylines or polygons.",
    "precisionShapes": "precision shapes",
    "bitbybit.occt.booleans.meshMeshIntersectionOfShapesPoints": "mesh mesh intersection to points",
    "meshMeshIntersectionOfShapesPoints": "mesh mesh intersection to points",
    "bitbybit.occt.booleans.meshMeshIntersectionOfShapesPoints_description": "Does mesh mesh intersection operation between the shape and multiple other shapes - all shapes can have their own meshing precision. This algorithm intersects the meshes and returns the points of the intersection.",
    "bitbybit.occt.shapes.face.hexagonsInGrid": "hexagons in grid",
    "bitbybit.occt.shapes.face.hexagonsInGrid_description": "Creates OpenCascade hexagons in grid",
    "bitbybit.jscad.toPolygonPoints": "to polygon points",
    "toPolygonPoints": "to polygon points",
    "bitbybit.jscad.toPolygonPoints_description": "Turns jscad shape into a collection of polygon points representing the mesh",
    "conversions": "conversions",
    "bitbybit.manifold.toPolygonPoints": "to polygon points",
    "bitbybit.manifold.toPolygonPoints_description": "Turns manifold shape into a collection of polygon points representing the mesh.",
    "flatU": "flat u",
    "bitbybit.occt.shapes.face.subdivideToHexagonHoles": "subdivide to hexagon holes",
    "subdivideToHexagonHoles": "subdivide to hexagon holes",
    "bitbybit.occt.shapes.face.subdivideToHexagonHoles_description": "Subdivides a face to hexagon holes",
    "bitbybit.verb.curve.convertLinesToNurbsCurves": "convert lines to nurbs curves",
    "bitbybit.verb.curve.convertLinesToNurbsCurves_description": "Converts lines to NURBS curves Returns array of the verbnurbs Line objects",
    "bitbybit.verb.curve.convertLineToNurbsCurve": "convert line to nurbs curve",
    "convertLineToNurbsCurve": "convert line to nurbs curve",
    "bitbybit.verb.curve.convertLineToNurbsCurve_description": "Converts line to NURBS curve Returns the verbnurbs Line object",
    "Base.Line3": "Base.Line3",
    "bitbybit.verb.curve.convertPolylineToNurbsCurve": "convert polyline to nurbs curve",
    "convertPolylineToNurbsCurve": "convert polyline to nurbs curve",
    "bitbybit.verb.curve.convertPolylineToNurbsCurve_description": "Converts a polyline to a NURBS curve Returns the verbnurbs NurbsCurve object",
    "Base.Polyline3": "Base.Polyline3",
    "bitbybit.verb.curve.convertPolylinesToNurbsCurves": "convert polylines to nurbs curves",
    "convertPolylinesToNurbsCurves": "convert polylines to nurbs curves",
    "bitbybit.verb.curve.convertPolylinesToNurbsCurves_description": "Converts a polylines to a NURBS curves Returns the verbnurbs NurbsCurve objects",
    "Base.Polyline3[]": "Base.Polyline3[]",
    "bitbybit.line.createSegment": "segment",
    "createSegment": "segment",
    "bitbybit.line.createSegment_description": "Create the segment",
    "bitbybit.occt.shapes.edge.fromBaseLine": "edge from base line",
    "fromBaseLine": "from base line",
    "bitbybit.occt.shapes.edge.fromBaseLine_description": "Creates linear edge from base line format {start: Point3, end: Point3}",
    "from base": "from base",
    "bitbybit.occt.shapes.edge.fromBaseLines": "edge from base lines",
    "fromBaseLines": "from base lines",
    "bitbybit.occt.shapes.edge.fromBaseLines_description": "Creates linear edges from base lines format {start: Point3, end: Point3}[]",
    "bitbybit.occt.shapes.edge.fromBaseSegment": "edge from base segment",
    "fromBaseSegment": "from base segment",
    "bitbybit.occt.shapes.edge.fromBaseSegment_description": "Creates linear edge from base segment format [Point3, Point3]",
    "bitbybit.occt.shapes.edge.fromBaseSegments": "edges from base segments",
    "fromBaseSegments": "from base segments",
    "bitbybit.occt.shapes.edge.fromBaseSegments_description": "Creates linear edge from base segments format [Point3, Point3][]",
    "bitbybit.occt.shapes.edge.fromPoints": "edges from points",
    "fromPoints": "fromPoints",
    "bitbybit.occt.shapes.edge.fromPoints_description": "Creates linear edges from collection of points",
    "bitbybit.occt.shapes.edge.fromBasePolyline": "edges from base polyline",
    "fromBasePolyline": "from base polyline",
    "bitbybit.occt.shapes.edge.fromBasePolyline_description": "Creates linear edges from polyline definition",
    "bitbybit.occt.shapes.edge.fromBaseTriangle": "edges from base triangle",
    "fromBaseTriangle": "from base triangle",
    "bitbybit.occt.shapes.edge.fromBaseTriangle_description": "Creates linear edges from triangle definition",
    "bitbybit.occt.shapes.edge.fromBaseMesh": "edges from base mesh",
    "fromBaseMesh": "edges from base mesh",
    "bitbybit.occt.shapes.edge.fromBaseMesh_description": "Creates linear edges from mesh definition",
    "bitbybit.occt.shapes.wire.fromBaseLine": "wire from base line",
    "bitbybit.occt.shapes.wire.fromBaseLine_description": "Creates linear wire from base line format {start: Point3, end: Point3}",
    "bitbybit.occt.shapes.wire.fromBaseLines": "wires from base lines",
    "bitbybit.occt.shapes.wire.fromBaseLines_description": "Creates linear wires from base lines format {start: Point3, end: Point3}[]",
    "bitbybit.occt.shapes.wire.fromBaseSegment": "wire from base segment",
    "bitbybit.occt.shapes.wire.fromBaseSegment_description": "Creates linear wire from base segment format [Point3, Point3]",
    "bitbybit.occt.shapes.wire.fromBaseSegments": "wires from base segments",
    "bitbybit.occt.shapes.wire.fromBaseSegments_description": "Creates linear wires from base segments format [Point3, Point3][]",
    "bitbybit.occt.shapes.wire.fromPoints": "wire from points",
    "bitbybit.occt.shapes.wire.fromPoints_description": "Creates wire from collection of points",
    "bitbybit.occt.shapes.wire.fromBasePolyline": "wire from base polyline",
    "bitbybit.occt.shapes.wire.fromBasePolyline_description": "Creates wire from polyline definition",
    "bitbybit.occt.shapes.wire.fromBaseTriangle": "wire from base triangle",
    "bitbybit.occt.shapes.wire.fromBaseTriangle_description": "Creates wire from triangle definition",
    "bitbybit.occt.shapes.wire.fromBaseMesh": "wires from base mesh",
    "bitbybit.occt.shapes.wire.fromBaseMesh_description": "Creates wires from mesh definition",
    "bitbybit.occt.shapes.face.fromBaseTriangle": "face from base triangle",
    "bitbybit.occt.shapes.face.fromBaseTriangle_description": "Creates face from triangle definition",
    "bitbybit.occt.shapes.face.fromBaseMesh": "faces from base mesh",
    "bitbybit.occt.shapes.face.fromBaseMesh_description": "Creates faces from mesh definition",
    "fromRightHanded": "from right handed",
    "bitbybit.advanced.text3d.createWithUrl": "text with url",
    "createWithUrl": "text with url",
    "bitbybit.advanced.text3d.createWithUrl_description": "Creates a 3d text with a font URL. This is useful when you want to use a custom font that is not included in the library. The font will be loaded from the provided URL and used to generate the 3d text. Make sure that fonts do not contain self intersection and other bad characters - that is common issue with custom fonts. Font formats supported are: ttf, otf, woff. Please note that Woff2 is not supported by opentype.js as it is a compressed format.",
    "fontUrl": "font url",
    "bitbybit.advanced.text3d.createTextOnFaceUrl": "text on face url",
    "createTextOnFaceUrl": "text on face url",
    "bitbybit.advanced.text3d.createTextOnFaceUrl_description": "Creates a 3d text on the face using a font URL. This is useful when you want to use a custom font that is not included in the library. The font will be loaded from the provided URL and used to generate the 3d text. Make sure that fonts do not contain self intersection and other bad characters - that is common issue with custom fonts. Font formats supported are: ttf, otf, woff. Please note that Woff2 is not supported by opentype.js as it is a compressed format.",
    "bitbybit.advanced.text3d.createTextsOnFaceUrl": "texts on face url",
    "createTextsOnFaceUrl": "texts on face url",
    "bitbybit.advanced.text3d.createTextsOnFaceUrl_description": "Creates 3d texts on the face from multiple url definitions. This is useful when you want to use a custom font that is not included in the library. The font will be loaded from the provided URL and used to generate the 3d text. Make sure that fonts do not contain self intersection and other bad characters - that is common issue with custom fonts. Font formats supported are: ttf, otf, woff. Please note that Woff2 is not supported by opentype.js as it is a compressed format.",
    "Text3DFaceDefinitionUrlDto[]": "Text3DFaceDefinitionUrlDto[]",
    "bitbybit.advanced.text3d.definition3dTextOnFaceUrl": "definition 3d text on face url",
    "definition3dTextOnFaceUrl": "definition 3d text on face url",
    "bitbybit.advanced.text3d.definition3dTextOnFaceUrl_description": "Creates 3d text that will be used on the face url definition. This is useful when you want to use a custom font that is not included in the library. The font will be loaded from the provided URL and used to generate the 3d text. Make sure that fonts do not contain self intersection and other bad characters - that is common issue with custom fonts. Font formats supported are: ttf, otf, woff. Please note that Woff2 is not supported by opentype.js as it is a compressed format.",
    "bitbybit.advanced.navigation.pointOfInterest": "point of interest",
    "navigation": "navigation",
    "pointOfInterest": "point of interest",
    "bitbybit.advanced.navigation.pointOfInterest_description": "fly through node",
    "cameraTarget": "camera target",
    "cameraPosition": "camera position",
    "bitbybit.advanced.navigation.pointsOfInterestSystem": "points of interest system",
    "pointsOfInterestSystem": "points of interest system",
    "bitbybit.advanced.navigation.pointsOfInterestSystem_description": "",
    "pointsOfInterest": "points of interest",
    "PointOfInterestDto[]": "PointOfInterestDto[]",
    "point of interest": "point of interest",
    "style": "style",
    "PointOfInterestStyleDto": "PointOfInterestStyleDto",
    "bitbybit.advanced.navigation.pointOfInterestStyle": "point of interest style",
    "pointOfInterestStyle": "point of interest style",
    "bitbybit.advanced.navigation.pointOfInterestStyle_description": "Create point of interest style - used to style point of interest indicators in 3D space. You can customize point size, color, hover color, pulse effect, text label color and size.",
    "pointSize": "point size",
    "pointColor": "point color",
    "hoverPointColor": "hover point color",
    "pulseColor": "pulse color",
    "hoverPulseColor": "hover pulse color",
    "pulseMinSize": "pulse min size",
    "pulseMaxSize": "pulse max size",
    "pulseThickness": "pulse thickness",
    "pulseSpeed": "pulse speed",
    "textColor": "text color",
    "hoverTextColor": "hover text color",
    "textSize": "text size",
    "hideSkybox": "hide skybox",
    "textureUrl": "texture url",
    "hdrTexture": "hdr texture",
    "textureSize": "texture size",
    "bitbybit.babylon.scene.enableSkyboxCustomTexture": "enable skybox custom texture",
    "enableSkyboxCustomTexture": "enable skybox custom texture",
    "bitbybit.babylon.scene.enableSkyboxCustomTexture_description": "Enables skybox with custom texture",
    "bitbybit.babylon.scene.canvasCSSBackgroundImage": "canvas css background image",
    "canvasCSSBackgroundImage": "canvas css background image",
    "bitbybit.babylon.scene.canvasCSSBackgroundImage_description": "Changes the scene background to a css background image for 3D space",
    "cssBackgroundImage": "css background image",
    "bitbybit.babylon.scene.twoColorLinearGradient": "two color linear gradient",
    "twoColorLinearGradient": "two color linear gradient",
    "bitbybit.babylon.scene.twoColorLinearGradient_description": "Creates a two-color linear gradient background for 3D space",
    "colorFrom": "color from",
    "colorTo": "color to",
    "Base.gradientDirectionEnum": "Base.gradientDirectionEnum",
    "stopFrom": "stop from",
    "stopTo": "stop to",
    "bitbybit.babylon.scene.twoColorRadialGradient": "two color radial gradient",
    "twoColorRadialGradient": "two color radial gradient",
    "bitbybit.babylon.scene.twoColorRadialGradient_description": "Creates a two-color radial gradient background for 3D space",
    "Base.gradientPositionEnum": "Base.gradientPositionEnum",
    "Base.gradientShapeEnum": "Base.gradientShapeEnum",
    "bitbybit.babylon.scene.multiColorLinearGradient": "multi color linear gradient",
    "multiColorLinearGradient": "multi color linear gradient",
    "bitbybit.babylon.scene.multiColorLinearGradient_description": "Creates a multi-color linear gradient background for 3D space",
    "Base.Color[]": "Base.Color[]",
    "stops": "stops",
    "bitbybit.babylon.scene.multiColorRadialGradient": "multi color radial gradient",
    "multiColorRadialGradient": "multi color radial gradient",
    "bitbybit.babylon.scene.multiColorRadialGradient_description": "Creates a multi-color radial gradient background for 3D space",
    "bitbybit.babylon.scene.canvasBackgroundImage": "canvas background image",
    "canvasBackgroundImage": "canvas background image",
    "bitbybit.babylon.scene.canvasBackgroundImage_description": "Sets a background image with various customization options for 3D space",
    "imageUrl": "image url",
    "Base.backgroundRepeatEnum": "Base.backgroundRepeatEnum",
    "Base.backgroundSizeEnum": "Base.backgroundSizeEnum",
    "attachment": "attachment",
    "Base.backgroundAttachmentEnum": "Base.backgroundAttachmentEnum",
    "Base.backgroundOriginClipEnum": "Base.backgroundOriginClipEnum",
    "clip": "clip",
    "labelRotation": "label rotation",
    "bitbybit.advanced.dimensions.linearDimension": "linear dimension",
    "linearDimension": "linear dimension",
    "bitbybit.advanced.dimensions.linearDimension_description": "Creates linear dimension - a measurement line between two points with extension lines and text label. The dimension shows the distance between the points and can be styled with DimensionStyleDto.",
    "linear dimension": "linear dimension",
    "DimensionStyleDto": "DimensionStyleDto",
    "bitbybit.advanced.dimensions.angularDimension": "angular dimension",
    "angularDimension": "angular dimension",
    "bitbybit.advanced.dimensions.angularDimension_description": "Creates angular dimension - a measurement arc between two direction vectors with extension lines and text label. The dimension shows the angle between the directions and can be styled with DimensionStyleDto.",
    "angular dimension": "angular dimension",
    "centerPoint": "center point",
    "bitbybit.advanced.dimensions.dimensionStyle": "dimension style",
    "dimensionStyle": "dimension style",
    "bitbybit.advanced.dimensions.dimensionStyle_description": "Create dimension style - used to style dimension lines, arrows, and text in 3D space. You can customize line colors, thickness, text size, arrow size, and background colors.",
    "dimension style": "dimension style",
    "lineColor": "line color",
    "lineThickness": "line thickness",
    "extensionLineLength": "extension line length",
    "textBackgroundColor": "text background color",
    "textBackgroundOpacity": "text background opacity",
    "arrowSize": "arrow size",
    "arrowColor": "arrow color",
    "textRenderMode": "text render mode",
    "textRenderModeEnum": "textRenderModeEnum",
    "textBillboard": "text billboard",
    "occlusionCheckInterval": "occlusion check interval",
    "arrowTailLength": "arrow tail length",
    "showArrows": "show arrows",
    "labelOverwrite": "label overwrite",
    "bitbybit.advanced.dimensions.radialDimension": "radial dimension",
    "radialDimension": "radial dimension",
    "bitbybit.advanced.dimensions.radialDimension_description": "Creates radial dimension - a measurement line from center to perimeter showing radius or diameter. Shows 'R' prefix for radius or '⌀' prefix for diameter with optional center mark.",
    "radial dimension": "radial dimension",
    "radiusPoint": "radius point",
    "showDiameter": "show diameter",
    "showCenterMark": "show center mark",
    "bitbybit.advanced.dimensions.diametralDimension": "diametral dimension",
    "diametralDimension": "diametral dimension",
    "bitbybit.advanced.dimensions.diametralDimension_description": "Creates diametral dimension - a measurement line spanning full diameter of circular features. Shows '⌀' prefix with optional center mark and arrows at both ends.",
    "diametral dimension": "diametral dimension",
    "bitbybit.advanced.dimensions.ordinateDimension": "ordinate dimension",
    "ordinateDimension": "ordinate dimension",
    "bitbybit.advanced.dimensions.ordinateDimension_description": "Creates ordinate dimension - shows X, Y, or Z coordinate from a reference point with leader line. Useful for coordinate annotations and datum referencing in technical drawings.",
    "ordinate dimension": "ordinate dimension",
    "measurementPoint": "measurement point",
    "referencePoint": "reference point",
    "ordinateAxisEnum": "ordinateAxisEnum",
    "showLeaderLine": "show leader line",
    "viewMode": "view mode",
    "schema": "schema",
    "json schema": "json schema",
    "metadata": "metadata",
    "bitbybit.babylon.scene.twoColorLinearGradientBackground": "two color linear gradient background",
    "twoColorLinearGradientBackground": "two color linear gradient background",
    "bitbybit.babylon.scene.twoColorLinearGradientBackground_description": "Creates a two-color linear gradient background for 3D space",
    "bitbybit.babylon.scene.twoColorRadialGradientBackground": "two color radial gradient background",
    "twoColorRadialGradientBackground": "two color radial gradient background",
    "bitbybit.babylon.scene.twoColorRadialGradientBackground_description": "Creates a two-color radial gradient background for 3D space",
    "bitbybit.babylon.scene.multiColorLinearGradientBackground": "multi color linear gradient background",
    "multiColorLinearGradientBackground": "multi color linear gradient background",
    "bitbybit.babylon.scene.multiColorLinearGradientBackground_description": "Creates a multi-color linear gradient background for 3D space",
    "bitbybit.babylon.scene.multiColorRadialGradientBackground": "multi color radial gradient background",
    "multiColorRadialGradientBackground": "multi color radial gradient background",
    "bitbybit.babylon.scene.multiColorRadialGradientBackground_description": "Creates a multi-color radial gradient background for 3D space",
    "textBackgroundStroke": "text background stroke",
    "textBackgroundRadius": "text background radius",
    "stableSize": "stable size",
    "alwaysOnTop": "always on top",
    "textStableSize": "text stable size",
    "bitbybit.occt.io.shapeToDxfPaths": "shape to dxf paths",
    "shapeToDxfPaths": "shape to dxf paths",
    "bitbybit.occt.io.shapeToDxfPaths_description": "Creates DXF paths from an OCCT shape. Important - shapes containing wires must lie on XZ plane (Y=0) for correct 2D DXF export.",
    "dxf": "dxf",
    "bitbybit.occt.io.dxfPathsWithLayer": "dxf paths with layer",
    "dxfPathsWithLayer": "dxf paths with layer",
    "bitbybit.occt.io.dxfPathsWithLayer_description": "Adds layer and color information to DXF paths. Important - shapes containing wires must lie on XZ plane (Y=0) for correct 2D DXF export.",
    "IO.DxfPathDto[]": "IO.DxfPathDto[]",
    "layer": "layer",
    "bitbybit.occt.io.dxfCreate": "dxf create",
    "dxfCreate": "dxf create",
    "bitbybit.occt.io.dxfCreate_description": "Assembles multiple path parts into a complete DXF file. Important - shapes containing wires must lie on XZ plane (Y=0) for correct 2D DXF export.",
    "pathsParts": "paths parts",
    "IO.DxfPathsPartDto[]": "IO.DxfPathsPartDto[]",
    "textFontWeight": "text font weight",
    "textPosition": "text position",
    "textBackgroundStrokeThickness": "stroke thickness",
    "Inputs.Base.topBottomEnum": "Inputs.Base.topBottomEnum"
}