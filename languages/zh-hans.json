{
    "bitbybit.draw.drawAnyAsyncNoReturn": "绘制任何异步无返回",
    "bitbybit": "bitbybit",
    "draw": "绘制",
    "drawAnyAsyncNoReturn": "绘制任何异步无返回",
    "bitbybit.draw.drawAnyAsyncNoReturn_description": "绘制任何几何体且无返回值",
    "draw async": "异步绘制",
    "entity": "实体",
    "Entity": "实体",
    "options": "选项",
    "DrawOptions": "绘制选项",
    "babylonMesh": "Babylon 网格",
    "BABYLON.Mesh | BABYLON.LinesMesh": "Babylon 网格或线框网格",
    "bitbybit.draw.drawAnyAsync": "绘制任何异步",
    "drawAnyAsync": "绘制任何异步",
    "bitbybit.draw.drawAnyAsync_description": "绘制任何几何体并返回 Babylon 网格",
    "bitbybit.draw.drawAnyNoReturn": "绘制任何无返回",
    "drawAnyNoReturn": "绘制任何无返回",
    "bitbybit.draw.drawAnyNoReturn_description": "绘制同步几何体，不适用于 occt 或 jscad 形状",
    "draw sync": "同步绘制",
    "bitbybit.draw.drawAny": "绘制任何",
    "drawAny": "绘制任何",
    "bitbybit.draw.drawAny_description": "绘制同步几何体，不适用于 occt 或 jscad 形状",
    "bitbybit.draw.drawGridMeshNoReturn": "绘制网格地面无返回",
    "drawGridMeshNoReturn": "绘制网格地面无返回",
    "bitbybit.draw.drawGridMeshNoReturn_description": "在地面上绘制网格以辅助定位",
    "grid": "网格",
    "width": "宽度",
    "number": "数字",
    "height": "高度",
    "subdivisions": "细分数",
    "majorUnitFrequency": "主单位频率",
    "minorUnitVisibility": "次单位可见性",
    "gridRatio": "网格比率",
    "opacity": "不透明度",
    "backFaceCulling": "背面剔除",
    "boolean": "布尔值",
    "mainColor": "主颜色",
    "Base.Color": "基础颜色",
    "secondaryColor": "次颜色",
    "bitbybit.draw.drawGridMesh": "绘制网格地面",
    "drawGridMesh": "绘制网格地面",
    "bitbybit.draw.drawGridMesh_description": "在地面上绘制网格以辅助定位",
    "bitbybit.draw.optionsSimple": "简单选项",
    "optionsSimple": "简单选项",
    "bitbybit.draw.optionsSimple_description": "为点和线等基本几何体设置绘制选项",
    "colours": "颜色",
    "string | string[]": "字符串或字符串数组",
    "size": "大小",
    "updatable": "可更新",
    "hidden": "隐藏",
    "bitbybit.draw.optionsOcctShape": "OCCT 形状选项",
    "optionsOcctShape": "OCCT 形状选项",
    "bitbybit.draw.optionsOcctShape_description": "为 OCCT 形状（如边和实体）设置绘制选项",
    "faceOpacity": "面不透明度",
    "edgeOpacity": "边不透明度",
    "edgeColour": "边颜色",
    "faceColour": "面颜色",
    "vertexColour": "顶点颜色",
    "faceMaterial": "面材质",
    "Base.Material": "基础材质",
    "edgeWidth": "边宽度",
    "vertexSize": "顶点大小",
    "drawEdges": "绘制边",
    "drawFaces": "绘制面",
    "drawVertices": "绘制顶点",
    "precision": "精度",
    "drawEdgeIndexes": "绘制边索引",
    "edgeIndexHeight": "边索引高度",
    "edgeIndexColour": "边索引颜色",
    "drawFaceIndexes": "绘制面索引",
    "faceIndexHeight": "面索引高度",
    "faceIndexColour": "面索引颜色",
    "bitbybit.draw.optionsOcctShapeSimple": "OCCT 形状简单选项",
    "optionsOcctShapeSimple": "OCCT 形状简单选项",
    "bitbybit.draw.optionsOcctShapeSimple_description": "为 OCCT 形状设置简单的绘制选项",
    "bitbybit.draw.optionsOcctShapeMaterial": "OCCT 形状材质选项",
    "optionsOcctShapeMaterial": "OCCT 形状材质选项",
    "bitbybit.draw.optionsOcctShapeMaterial_description": "为 OCCT 形状设置带有自定义面材质的绘制选项",
    "any": "任何",
    "bitbybit.draw.optionsManifoldShapeMaterial": "Manifold 形状材质选项",
    "optionsManifoldShapeMaterial": "Manifold 形状材质选项",
    "bitbybit.draw.optionsManifoldShapeMaterial_description": "为 Manifold 几何体设置绘制选项",
    "crossSectionColour": "横截面颜色",
    "crossSectionWidth": "横截面宽度",
    "crossSectionOpacity": "横截面不透明度",
    "computeNormals": "计算法线",
    "bitbybit.draw.optionsBabylonNode": "Babylon 节点选项",
    "optionsBabylonNode": "Babylon 节点选项",
    "bitbybit.draw.optionsBabylonNode_description": "为 Babylon.js 节点设置绘制选项",
    "colorX": "X 颜色",
    "colorY": "Y 颜色",
    "colorZ": "Z 颜色",
    "bitbybit.babylon.mesh.dispose": "销毁网格",
    "babylon": "Babylon",
    "mesh": "网格",
    "dispose": "销毁",
    "bitbybit.babylon.mesh.dispose_description": "从场景中移除已绘制的网格",
    "memory": "内存",
    "BABYLON.Mesh": "Babylon 网格",
    "bitbybit.babylon.mesh.updateDrawn": "更新已绘制",
    "updateDrawn": "更新已绘制",
    "bitbybit.babylon.mesh.updateDrawn_description": "更新 Babylon.js 网格而不销毁",
    "updates": "更新",
    "position": "位置",
    "Base.Point3": "基础点 3D",
    "rotation": "旋转",
    "Base.Vector3": "基础向量 3D",
    "scaling": "缩放",
    "bitbybit.babylon.mesh.setVisibility": "设置可见性",
    "setVisibility": "设置可见性",
    "bitbybit.babylon.mesh.setVisibility_description": "更改 Babylon.js 网格的可见性",
    "visibility": "可见性",
    "includeChildren": "包括子项",
    "bitbybit.babylon.mesh.hide": "隐藏",
    "hide": "隐藏",
    "bitbybit.babylon.mesh.hide_description": "隐藏网格",
    "bitbybit.babylon.mesh.show": "显示",
    "show": "显示",
    "bitbybit.babylon.mesh.show_description": "显示网格",
    "bitbybit.babylon.mesh.setParent": "设置父项",
    "setParent": "设置父项",
    "bitbybit.babylon.mesh.setParent_description": "更改已绘制网格的父项",
    "set": "设置",
    "BABYLON.Mesh | BABYLON.InstancedMesh | BABYLON.AbstractMesh": "Babylon 网格、实例网格或抽象网格",
    "parentMesh": "父网格",
    "bitbybit.babylon.mesh.getParent": "获取父项",
    "getParent": "获取父项",
    "bitbybit.babylon.mesh.getParent_description": "获取已绘制网格的父项",
    "get": "获取",
    "bitbybit.babylon.mesh.setCheckCollisions": "设置碰撞检测",
    "setCheckCollisions": "设置碰撞检测",
    "bitbybit.babylon.mesh.setCheckCollisions_description": "更改已绘制网格的碰撞检测属性",
    "checkCollisions": "碰撞检测",
    "bitbybit.babylon.mesh.getCheckCollisions": "获取碰撞检测",
    "getCheckCollisions": "获取碰撞检测",
    "bitbybit.babylon.mesh.getCheckCollisions_description": "获取已绘制网格的碰撞检测属性",
    "bitbybit.babylon.mesh.setPickable": "设置可拾取",
    "setPickable": "设置可拾取",
    "bitbybit.babylon.mesh.setPickable_description": "更改已绘制网格的可拾取属性",
    "pickable": "可拾取",
    "bitbybit.babylon.mesh.enablePointerMoveEvents": "启用指针移动事件",
    "enablePointerMoveEvents": "启用指针移动事件",
    "bitbybit.babylon.mesh.enablePointerMoveEvents_description": "使网格可通过指针移动事件拾取，性能开销大",
    "bitbybit.babylon.mesh.disablePointerMoveEvents": "禁用指针移动事件",
    "disablePointerMoveEvents": "禁用指针移动事件",
    "bitbybit.babylon.mesh.disablePointerMoveEvents_description": "使网格忽略指针移动事件",
    "bitbybit.babylon.mesh.getPickable": "获取可拾取",
    "getPickable": "获取可拾取",
    "bitbybit.babylon.mesh.getPickable_description": "获取已绘制网格的可拾取属性",
    "bitbybit.babylon.mesh.getMeshesWhereNameContains": "获取名称包含指定文本的网格",
    "getMeshesWhereNameContains": "获取名称包含指定文本的网格",
    "bitbybit.babylon.mesh.getMeshesWhereNameContains_description": "获取名称包含给定文本的网格",
    "name": "名称",
    "string": "字符串",
    "bitbybit.babylon.mesh.getChildMeshes": "获取子网格",
    "getChildMeshes": "获取子网格",
    "bitbybit.babylon.mesh.getChildMeshes_description": "获取子网格",
    "directDescendantsOnly": "仅直接后代",
    "bitbybit.babylon.mesh.getMeshesOfId": "获取 ID 对应的网格",
    "getMeshesOfId": "获取 ID 对应的网格",
    "bitbybit.babylon.mesh.getMeshesOfId_description": "通过 ID 获取网格",
    "id": "ID",
    "bitbybit.babylon.mesh.getMeshOfId": "获取 ID 对应的网格",
    "getMeshOfId": "获取 ID 对应的网格",
    "bitbybit.babylon.mesh.getMeshOfId_description": "通过 ID 获取网格",
    "bitbybit.babylon.mesh.getMeshOfUniqueId": "获取唯一 ID 对应的网格",
    "getMeshOfUniqueId": "获取唯一 ID 对应的网格",
    "bitbybit.babylon.mesh.getMeshOfUniqueId_description": "通过唯一 ID 获取网格",
    "uniqueId": "唯一 ID",
    "bitbybit.babylon.mesh.mergeMeshes": "合并网格",
    "mergeMeshes": "合并网格",
    "bitbybit.babylon.mesh.mergeMeshes_description": "将多个网格合并为一个",
    "edit": "编辑",
    "arrayOfMeshes": "网格数组",
    "BABYLON.Mesh[]": "Babylon 网格数组",
    "disposeSource": "销毁源",
    "allow32BitsIndices": "允许 32 位索引",
    "meshSubclass": "网格子类",
    "subdivideWithSubMeshes": "使用子网格细分",
    "multiMultiMaterials": "多重材质",
    "bitbybit.babylon.mesh.convertToFlatShadedMesh": "转换为平面着色网格",
    "convertToFlatShadedMesh": "转换为平面着色网格",
    "bitbybit.babylon.mesh.convertToFlatShadedMesh_description": "将网格转换为平面着色网格",
    "bitbybit.babylon.mesh.clone": "克隆",
    "clone": "克隆",
    "bitbybit.babylon.mesh.clone_description": "克隆网格",
    "bitbybit.babylon.mesh.cloneToPositions": "克隆到多个位置",
    "cloneToPositions": "克隆到多个位置",
    "bitbybit.babylon.mesh.cloneToPositions_description": "将网格克隆到多个位置",
    "positions": "位置",
    "Base.Point3[]": "基础点 3D 数组",
    "bitbybit.babylon.mesh.setId": "设置 ID",
    "setId": "设置 ID",
    "bitbybit.babylon.mesh.setId_description": "更改已绘制网格的 ID",
    "bitbybit.babylon.mesh.getId": "获取 ID",
    "getId": "获取 ID",
    "bitbybit.babylon.mesh.getId_description": "获取已绘制网格的 ID",
    "bitbybit.babylon.mesh.getUniqueId": "获取唯一 ID",
    "getUniqueId": "获取唯一 ID",
    "bitbybit.babylon.mesh.getUniqueId_description": "获取已绘制网格的唯一 ID",
    "bitbybit.babylon.mesh.setName": "设置名称",
    "setName": "设置名称",
    "bitbybit.babylon.mesh.setName_description": "更改已绘制网格的名称",
    "bitbybit.babylon.mesh.getVerticesAsPolygonPoints": "获取顶点作为多边形点",
    "getVerticesAsPolygonPoints": "获取顶点作为多边形点",
    "bitbybit.babylon.mesh.getVerticesAsPolygonPoints_description": "获取顶点作为多边形点用于网格构建，需要三角化",
    "bitbybit.babylon.mesh.getName": "获取名称",
    "getName": "获取名称",
    "bitbybit.babylon.mesh.getName_description": "获取 Babylon 网格的名称",
    "bitbybit.babylon.mesh.setMaterial": "设置材质",
    "setMaterial": "设置材质",
    "bitbybit.babylon.mesh.setMaterial_description": "更改已绘制网格的材质",
    "material": "材质",
    "BABYLON.Material": "Babylon 材质",
    "bitbybit.babylon.mesh.getMaterial": "获取材质",
    "getMaterial": "获取材质",
    "bitbybit.babylon.mesh.getMaterial_description": "获取 Babylon 网格的材质",
    "bitbybit.babylon.mesh.getPosition": "获取位置",
    "getPosition": "获取位置",
    "bitbybit.babylon.mesh.getPosition_description": "获取 Babylon.js 网格的位置（作为点）",
    "bitbybit.babylon.mesh.getAbsolutePosition": "获取绝对位置",
    "getAbsolutePosition": "获取绝对位置",
    "bitbybit.babylon.mesh.getAbsolutePosition_description": "获取 Babylon.js 网格在世界坐标系中的绝对位置（作为点）",
    "bitbybit.babylon.mesh.getRotation": "获取旋转",
    "getRotation": "获取旋转",
    "bitbybit.babylon.mesh.getRotation_description": "获取 Babylon.js 网格的旋转向量",
    "bitbybit.babylon.mesh.getScale": "获取缩放",
    "getScale": "获取缩放",
    "bitbybit.babylon.mesh.getScale_description": "获取 Babylon.js 网格的缩放向量",
    "bitbybit.babylon.mesh.moveForward": "向前移动",
    "moveForward": "向前移动",
    "bitbybit.babylon.mesh.moveForward_description": "在局部空间中向前移动 Babylon.js 网格",
    "move": "移动",
    "distance": "距离",
    "bitbybit.babylon.mesh.moveBackward": "向后移动",
    "moveBackward": "向后移动",
    "bitbybit.babylon.mesh.moveBackward_description": "在局部空间中向后移动 Babylon.js 网格",
    "bitbybit.babylon.mesh.moveUp": "向上移动",
    "moveUp": "向上移动",
    "bitbybit.babylon.mesh.moveUp_description": "在局部空间中向上移动 Babylon.js 网格",
    "bitbybit.babylon.mesh.moveDown": "向下移动",
    "moveDown": "向下移动",
    "bitbybit.babylon.mesh.moveDown_description": "在局部空间中向下移动 Babylon.js 网格",
    "bitbybit.babylon.mesh.moveRight": "向右移动",
    "moveRight": "向右移动",
    "bitbybit.babylon.mesh.moveRight_description": "在局部空间中向右移动 Babylon.js 网格",
    "bitbybit.babylon.mesh.moveLeft": "向左移动",
    "moveLeft": "向左移动",
    "bitbybit.babylon.mesh.moveLeft_description": "在局部空间中向左移动 Babylon.js 网格",
    "bitbybit.babylon.mesh.yaw": "偏航",
    "yaw": "偏航",
    "bitbybit.babylon.mesh.yaw_description": "围绕局部 Y 轴旋转 Babylon.js 网格",
    "rotate": "旋转",
    "bitbybit.babylon.mesh.pitch": "俯仰",
    "pitch": "俯仰",
    "bitbybit.babylon.mesh.pitch_description": "围绕局部 X 轴旋转 Babylon.js 网格",
    "bitbybit.babylon.mesh.roll": "翻滚",
    "roll": "翻滚",
    "bitbybit.babylon.mesh.roll_description": "围绕局部 Z 轴旋转 Babylon.js 网格",
    "bitbybit.babylon.mesh.rotateAroundAxisWithPosition": "围绕轴和位置旋转",
    "rotateAroundAxisWithPosition": "围绕轴和位置旋转",
    "bitbybit.babylon.mesh.rotateAroundAxisWithPosition_description": "围绕轴和位置按角度旋转网格",
    "axis": "轴",
    "angle": "角度",
    "bitbybit.babylon.mesh.setPosition": "设置位置",
    "setPosition": "设置位置",
    "bitbybit.babylon.mesh.setPosition_description": "更新 Babylon.js 网格或实例网格的位置",
    "BABYLON.Mesh | BABYLON.InstancedMesh": "Babylon 网格或实例网格",
    "bitbybit.babylon.mesh.setRotation": "设置旋转",
    "setRotation": "设置旋转",
    "bitbybit.babylon.mesh.setRotation_description": "更新 Babylon.js 网格或实例网格的旋转",
    "bitbybit.babylon.mesh.setScale": "设置缩放",
    "setScale": "设置缩放",
    "bitbybit.babylon.mesh.setScale_description": "更新 Babylon.js 网格或实例网格的缩放",
    "scale": "缩放",
    "bitbybit.babylon.mesh.intersectsMesh": "与网格相交",
    "intersectsMesh": "与网格相交",
    "bitbybit.babylon.mesh.intersectsMesh_description": "检查网格是否与另一个网格相交",
    "intersects": "相交",
    "babylonMesh2": "Babylon 网格 2",
    "precise": "精确",
    "includeDescendants": "包括后代",
    "bitbybit.babylon.mesh.intersectsPoint": "与点相交",
    "intersectsPoint": "与点相交",
    "bitbybit.babylon.mesh.intersectsPoint_description": "检查网格是否与点相交",
    "point": "点",
    "bitbybit.babylon.mesh.createMeshInstanceAndTransformNoReturn": "网格实例和变换无返回",
    "createMeshInstanceAndTransformNoReturn": "网格实例和变换无返回",
    "bitbybit.babylon.mesh.createMeshInstanceAndTransformNoReturn_description": "创建带子项的网格实例以优化渲染，无返回",
    "instance": "实例",
    "bitbybit.babylon.mesh.createMeshInstanceAndTransform": "网格实例和变换",
    "createMeshInstanceAndTransform": "网格实例和变换",
    "bitbybit.babylon.mesh.createMeshInstanceAndTransform_description": "创建带子项的网格实例以优化渲染，返回网格",
    "bitbybit.babylon.mesh.createMeshInstance": "网格实例",
    "createMeshInstance": "网格实例",
    "bitbybit.babylon.mesh.createMeshInstance_description": "创建带子项的网格实例以优化渲染",
    "bitbybit.babylon.gaussianSplatting.create": "高斯溅射",
    "gaussianSplatting": "高斯溅射",
    "create": "创建",
    "bitbybit.babylon.gaussianSplatting.create_description": "创建高斯溅射网格",
    "url": "URL",
    "bitbybit.babylon.gaussianSplatting.clone": "克隆高斯溅射",
    "bitbybit.babylon.gaussianSplatting.clone_description": "克隆高斯溅射网格",
    "multiply": "乘以",
    "BABYLON.GaussianSplattingMesh": "Babylon 高斯溅射网格",
    "bitbybit.babylon.gaussianSplatting.getSplatPositions": "获取溅射位置",
    "getSplatPositions": "获取溅射位置",
    "bitbybit.babylon.gaussianSplatting.getSplatPositions_description": "获取高斯溅射网格的溅射位置",
    "bitbybit.babylon.camera.freezeProjectionMatrix": "冻结投影矩阵",
    "camera": "相机",
    "freezeProjectionMatrix": "冻结投影矩阵",
    "bitbybit.babylon.camera.freezeProjectionMatrix_description": "冻结相机投影矩阵",
    "adjust": "调整",
    "BABYLON.Camera": "Babylon 相机",
    "bitbybit.babylon.camera.unfreezeProjectionMatrix": "解冻投影矩阵",
    "unfreezeProjectionMatrix": "解冻投影矩阵",
    "bitbybit.babylon.camera.unfreezeProjectionMatrix_description": "解冻相机投影矩阵",
    "bitbybit.babylon.camera.setPosition": "设置位置",
    "bitbybit.babylon.camera.setPosition_description": "更改相机位置",
    "BABYLON.TargetCamera": "Babylon 目标相机",
    "bitbybit.babylon.camera.getPosition": "获取位置",
    "bitbybit.babylon.camera.getPosition_description": "获取相机位置",
    "bitbybit.babylon.camera.setTarget": "设置目标",
    "setTarget": "设置目标",
    "bitbybit.babylon.camera.setTarget_description": "更改相机目标",
    "target": "目标",
    "bitbybit.babylon.camera.getTarget": "获取目标",
    "getTarget": "获取目标",
    "bitbybit.babylon.camera.getTarget_description": "获取相机目标",
    "bitbybit.babylon.camera.setSpeed": "设置速度",
    "setSpeed": "设置速度",
    "bitbybit.babylon.camera.setSpeed_description": "更改相机速度",
    "speed": "速度",
    "bitbybit.babylon.camera.getSpeed": "获取速度",
    "getSpeed": "获取速度",
    "bitbybit.babylon.camera.getSpeed_description": "获取相机速度",
    "bitbybit.babylon.camera.setMinZ": "设置最小 Z 值",
    "setMinZ": "设置最小 Z 值",
    "bitbybit.babylon.camera.setMinZ_description": "更改相机最小 Z 值",
    "minZ": "最小 Z 值",
    "bitbybit.babylon.camera.setMaxZ": "设置最大 Z 值",
    "setMaxZ": "设置最大 Z 值",
    "bitbybit.babylon.camera.setMaxZ_description": "更改相机最大 Z 值",
    "maxZ": "最大 Z 值",
    "bitbybit.babylon.camera.makeCameraOrthographic": "设为正交相机",
    "makeCameraOrthographic": "设为正交相机",
    "bitbybit.babylon.camera.makeCameraOrthographic_description": "将相机设置为正交模式",
    "orthoLeft": "正交左",
    "orthoRight": "正交右",
    "orthoBottom": "正交底",
    "orthoTop": "正交顶",
    "bitbybit.babylon.camera.makeCameraPerspective": "设为透视相机",
    "makeCameraPerspective": "设为透视相机",
    "bitbybit.babylon.camera.makeCameraPerspective_description": "将相机设置为透视模式",
    "bitbybit.babylon.camera.free.create": "自由相机",
    "free": "自由",
    "bitbybit.babylon.camera.free.create_description": "创建自由相机",
    "bitbybit.babylon.camera.arcRotate.create": "弧形旋转相机",
    "arcRotate": "弧形旋转",
    "bitbybit.babylon.camera.arcRotate.create_description": "创建围绕目标沿弧形路径旋转的相机，bitbybit 默认相机",
    "radius": "半径",
    "alpha": "Alpha 角",
    "beta": "Beta 角",
    "lowerRadiusLimit": "半径下限",
    "upperRadiusLimit": "半径上限",
    "lowerAlphaLimit": "Alpha 角下限",
    "upperAlphaLimit": "Alpha 角上限",
    "lowerBetaLimit": "Beta 角下限",
    "upperBetaLimit": "Beta 角上限",
    "angularSensibilityX": "X 轴角度灵敏度",
    "angularSensibilityY": "Y 轴角度灵敏度",
    "panningSensibility": "平移灵敏度",
    "wheelPrecision": "滚轮精度",
    "bitbybit.babylon.camera.target.create": "目标相机",
    "bitbybit.babylon.camera.target.create_description": "创建目标相机",
    "bitbybit.babylon.webXr.simple.createImmersiveARExperience": "沉浸式 AR 体验",
    "webXr": "Web XR",
    "simple": "简单",
    "createImmersiveARExperience": "创建沉浸式 AR 体验",
    "bitbybit.babylon.webXr.simple.createImmersiveARExperience_description": "在沉浸式 AR 模式下创建默认 XR 体验",
    "scene": "场景",
    "bitbybit.babylon.webXr.simple.createDefaultXRExperienceWithTeleportation": "带传送的默认 XR 体验",
    "createDefaultXRExperienceWithTeleportation": "创建带传送的默认 XR 体验",
    "bitbybit.babylon.webXr.simple.createDefaultXRExperienceWithTeleportation_description": "创建带传送功能的基本 XR 体验",
    "groundMeshes": "地面网格",
    "bitbybit.babylon.webXr.simple.createDefaultXRExperienceWithTeleportationReturn": "带传送的默认 XR 体验（返回结果）",
    "createDefaultXRExperienceWithTeleportationReturn": "创建带传送的默认 XR 体验（返回结果）",
    "bitbybit.babylon.webXr.simple.createDefaultXRExperienceWithTeleportationReturn_description": "创建带传送功能的基本 XR 体验，返回结果",
    "bitbybit.babylon.node.drawNode": "绘制节点",
    "node": "节点",
    "drawNode": "绘制节点",
    "bitbybit.babylon.node.drawNode_description": "绘制带有尺寸和轴颜色的节点",
    "BABYLON.TransformNode": "Babylon 变换节点",
    "bitbybit.babylon.node.drawNodes": "绘制多个节点",
    "drawNodes": "绘制多个节点",
    "bitbybit.babylon.node.drawNodes_description": "绘制带有尺寸和轴颜色的多个节点",
    "nodes": "节点",
    "BABYLON.TransformNode[]": "Babylon 变换节点数组",
    "bitbybit.babylon.node.createNodeFromRotation": "从旋转创建节点",
    "createNodeFromRotation": "从旋转创建节点",
    "bitbybit.babylon.node.createNodeFromRotation_description": "在原点创建具有父空间旋转的节点",
    "parent": "父项",
    "BABYLON.TransformNode | null": "Babylon 变换节点或 null",
    "origin": "原点",
    "bitbybit.babylon.node.createWorldNode": "世界节点",
    "createWorldNode": "创建世界节点",
    "bitbybit.babylon.node.createWorldNode_description": "创建以根节点为父项的节点",
    "bitbybit.babylon.node.getAbsoluteForwardVector": "获取绝对前向向量",
    "getAbsoluteForwardVector": "获取绝对前向向量",
    "bitbybit.babylon.node.getAbsoluteForwardVector_description": "获取世界空间中的绝对前向向量",
    "bitbybit.babylon.node.getAbsoluteRightVector": "获取绝对右向向量",
    "getAbsoluteRightVector": "获取绝对右向向量",
    "bitbybit.babylon.node.getAbsoluteRightVector_description": "获取世界空间中的绝对右向向量",
    "bitbybit.babylon.node.getAbsoluteUpVector": "获取绝对上向向量",
    "getAbsoluteUpVector": "获取绝对上向向量",
    "bitbybit.babylon.node.getAbsoluteUpVector_description": "获取世界空间中的绝对上向向量",
    "bitbybit.babylon.node.getAbsolutePosition": "获取绝对位置",
    "bitbybit.babylon.node.getAbsolutePosition_description": "获取节点在世界空间中的绝对位置",
    "bitbybit.babylon.node.getAbsoluteRotationTransformation": "获取绝对旋转变换",
    "getAbsoluteRotationTransformation": "获取绝对旋转变换",
    "bitbybit.babylon.node.getAbsoluteRotationTransformation_description": "获取绝对旋转作为变换矩阵（16 个数字）",
    "bitbybit.babylon.node.getRotationTransformation": "获取旋转变换",
    "getRotationTransformation": "获取旋转变换",
    "bitbybit.babylon.node.getRotationTransformation_description": "获取局部旋转作为变换矩阵（16 个数字）",
    "bitbybit.babylon.node.getChildren": "获取子项",
    "getChildren": "获取子项",
    "bitbybit.babylon.node.getChildren_description": "获取节点的子项",
    "bitbybit.babylon.node.getParent": "获取父项",
    "bitbybit.babylon.node.getParent_description": "获取节点的父项",
    "bitbybit.babylon.node.getPositionExpressedInLocalSpace": "获取局部空间中的位置",
    "getPositionExpressedInLocalSpace": "获取局部空间中的位置",
    "bitbybit.babylon.node.getPositionExpressedInLocalSpace_description": "获取节点在局部空间中的位置",
    "bitbybit.babylon.node.getRootNode": "获取根节点",
    "getRootNode": "获取根节点",
    "bitbybit.babylon.node.getRootNode_description": "获取根节点",
    "bitbybit.babylon.node.getRotation": "获取旋转",
    "bitbybit.babylon.node.getRotation_description": "获取节点的欧拉旋转角",
    "bitbybit.babylon.node.rotateAroundAxisWithPosition": "围绕轴和位置旋转",
    "bitbybit.babylon.node.rotateAroundAxisWithPosition_description": "围绕轴和位置按角度旋转节点",
    "bitbybit.babylon.node.rotate": "旋转",
    "bitbybit.babylon.node.rotate_description": "围绕原点和轴旋转节点",
    "bitbybit.babylon.node.setAbsolutePosition": "设置绝对位置",
    "setAbsolutePosition": "设置绝对位置",
    "bitbybit.babylon.node.setAbsolutePosition_description": "设置节点的绝对位置",
    "bitbybit.babylon.node.setDirection": "设置方向",
    "setDirection": "设置方向",
    "bitbybit.babylon.node.setDirection_description": "设置节点的方向",
    "direction": "方向",
    "number[]": "数字数组",
    "bitbybit.babylon.node.setParent": "设置父项",
    "bitbybit.babylon.node.setParent_description": "为节点设置新的父项",
    "parentNode": "父节点",
    "bitbybit.babylon.node.translate": "平移",
    "translate": "平移",
    "bitbybit.babylon.node.translate_description": "按方向向量和距离移动节点",
    "bitbybit.babylon.scene.backgroundColour": "背景颜色",
    "backgroundColour": "背景颜色",
    "bitbybit.babylon.scene.backgroundColour_description": "更改 3D 空间中的场景背景颜色",
    "environment": "环境",
    "colour": "颜色",
    "bitbybit.babylon.scene.activateCamera": "激活相机",
    "activateCamera": "激活相机",
    "bitbybit.babylon.scene.activateCamera_description": "将相机设为活动相机，替换当前相机",
    "bitbybit.babylon.scene.useRightHandedSystem": "使用右手坐标系",
    "useRightHandedSystem": "使用右手坐标系",
    "bitbybit.babylon.scene.useRightHandedSystem_description": "切换到右手坐标系",
    "system": "系统",
    "use": "使用",
    "bitbybit.babylon.scene.drawPointLightNoReturn": "绘制点光源无返回",
    "drawPointLightNoReturn": "绘制点光源无返回",
    "bitbybit.babylon.scene.drawPointLightNoReturn_description": "向场景添加点光源，无输出",
    "lights": "灯光",
    "intensity": "强度",
    "diffuse": "漫反射",
    "specular": "高光反射",
    "shadowGeneratorMapSize": "阴影生成器贴图大小",
    "enableShadows": "启用阴影",
    "shadowDarkness": "阴影暗度",
    "shadowUsePercentageCloserFiltering": "阴影使用百分比接近过滤",
    "shadowContactHardeningLightSizeUVRatio": "阴影接触硬化光照大小 UV 比率",
    "shadowBias": "阴影偏移",
    "shadowNormalBias": "阴影法线偏移",
    "shadowMaxZ": "阴影最大 Z 值",
    "shadowMinZ": "阴影最小 Z 值",
    "bitbybit.babylon.scene.getShadowGenerators": "获取阴影生成器",
    "getShadowGenerators": "获取阴影生成器",
    "bitbybit.babylon.scene.getShadowGenerators_description": "从 bitbybit 灯光获取阴影生成器",
    "bitbybit.babylon.scene.drawPointLight": "绘制点光源",
    "drawPointLight": "绘制点光源",
    "bitbybit.babylon.scene.drawPointLight_description": "向场景添加点光源",
    "bitbybit.babylon.scene.drawDirectionalLightNoReturn": "绘制平行光无返回",
    "drawDirectionalLightNoReturn": "绘制平行光无返回",
    "bitbybit.babylon.scene.drawDirectionalLightNoReturn_description": "向场景添加平行光，无输出",
    "bitbybit.babylon.scene.drawDirectionalLight": "绘制平行光",
    "drawDirectionalLight": "绘制平行光",
    "bitbybit.babylon.scene.drawDirectionalLight_description": "向场景添加平行光",
    "bitbybit.babylon.scene.getActiveCamera": "获取活动相机",
    "getActiveCamera": "获取活动相机",
    "bitbybit.babylon.scene.getActiveCamera_description": "获取场景中当前的活动相机",
    "bitbybit.babylon.scene.adjustActiveArcRotateCamera": "调整活动弧形旋转相机",
    "adjustActiveArcRotateCamera": "调整活动弧形旋转相机",
    "bitbybit.babylon.scene.adjustActiveArcRotateCamera_description": "调整活动弧形旋转相机的设置",
    "lookAt": "看向",
    "bitbybit.babylon.scene.clearAllDrawn": "清除所有已绘制",
    "clearAllDrawn": "清除所有已绘制",
    "bitbybit.babylon.scene.clearAllDrawn_description": "从 3D 场景中移除所有已绘制的对象",
    "bitbybit.babylon.scene.enableSkybox": "启用天空盒",
    "enableSkybox": "启用天空盒",
    "bitbybit.babylon.scene.enableSkybox_description": "在场景中开启天空盒",
    "skybox": "天空盒",
    "Base.skyboxEnum": "基础天空盒枚举",
    "blur": "模糊",
    "environmentIntensity": "环境强度",
    "bitbybit.babylon.scene.fog": "雾",
    "fog": "雾",
    "bitbybit.babylon.scene.fog_description": "在场景中开启雾模式",
    "mode": "模式",
    "Base.fogModeEnum": "基础雾模式枚举",
    "color": "颜色",
    "density": "密度",
    "start": "开始",
    "end": "结束",
    "bitbybit.babylon.transforms.rotationCenterAxis": "旋转中心轴",
    "transforms": "变换",
    "rotationCenterAxis": "旋转中心轴",
    "bitbybit.babylon.transforms.rotationCenterAxis_description": "创建围绕中心和轴的旋转变换",
    "center": "中心",
    "bitbybit.babylon.transforms.rotationCenterX": "旋转中心 X",
    "rotationCenterX": "旋转中心 X",
    "bitbybit.babylon.transforms.rotationCenterX_description": "创建围绕中心和 X 轴的旋转变换",
    "bitbybit.babylon.transforms.rotationCenterY": "旋转中心 Y",
    "rotationCenterY": "旋转中心 Y",
    "bitbybit.babylon.transforms.rotationCenterY_description": "创建围绕中心和 Y 轴的旋转变换",
    "bitbybit.babylon.transforms.rotationCenterZ": "旋转中心 Z",
    "rotationCenterZ": "旋转中心 Z",
    "bitbybit.babylon.transforms.rotationCenterZ_description": "创建围绕中心和 Z 轴的旋转变换",
    "bitbybit.babylon.transforms.rotationCenterYawPitchRoll": "旋转中心（偏航、俯仰、翻滚）",
    "rotationCenterYawPitchRoll": "旋转中心（偏航、俯仰、翻滚）",
    "bitbybit.babylon.transforms.rotationCenterYawPitchRoll_description": "创建带有偏航、俯仰、翻滚的旋转变换",
    "bitbybit.babylon.transforms.scaleCenterXYZ": "缩放中心 XYZ",
    "scaleCenterXYZ": "缩放中心 XYZ",
    "bitbybit.babylon.transforms.scaleCenterXYZ_description": "创建围绕中心的 XYZ 缩放变换",
    "scaleXyz": "XYZ 缩放",
    "bitbybit.babylon.transforms.scaleXYZ": "缩放 XYZ",
    "scaleXYZ": "缩放 XYZ",
    "bitbybit.babylon.transforms.scaleXYZ_description": "创建 X、Y、Z 方向的缩放变换",
    "bitbybit.babylon.transforms.uniformScale": "统一缩放",
    "uniformScale": "统一缩放",
    "bitbybit.babylon.transforms.uniformScale_description": "创建统一缩放变换",
    "bitbybit.babylon.transforms.uniformScaleFromCenter": "从中心统一缩放",
    "uniformScaleFromCenter": "从中心统一缩放",
    "bitbybit.babylon.transforms.uniformScaleFromCenter_description": "创建从中心开始的统一缩放变换",
    "bitbybit.babylon.transforms.translationXYZ": "平移 XYZ",
    "translationXYZ": "平移 XYZ",
    "bitbybit.babylon.transforms.translationXYZ_description": "创建平移变换",
    "translation": "平移",
    "bitbybit.babylon.transforms.translationsXYZ": "多个平移 XYZ",
    "translationsXYZ": "多个平移 XYZ",
    "bitbybit.babylon.transforms.translationsXYZ_description": "创建多个平移变换",
    "translations": "平移",
    "Base.Vector3[]": "基础向量 3D 数组",
    "bitbybit.babylon.io.loadAssetIntoScene": "加载资源到场景",
    "io": "输入/输出",
    "loadAssetIntoScene": "加载资源到场景",
    "bitbybit.babylon.io.loadAssetIntoScene_description": "从上传的项目资源导入网格",
    "load": "加载",
    "assetFile": "资源文件",
    "File": "文件",
    "bitbybit.babylon.io.loadAssetIntoSceneNoReturn": "加载资源到场景无返回",
    "loadAssetIntoSceneNoReturn": "加载资源到场景无返回",
    "bitbybit.babylon.io.loadAssetIntoSceneNoReturn_description": "从上传的项目资源导入网格，无输出",
    "bitbybit.babylon.io.loadAssetIntoSceneFromRootUrl": "从根 URL 加载资源到场景",
    "loadAssetIntoSceneFromRootUrl": "从根 URL 加载资源到场景",
    "bitbybit.babylon.io.loadAssetIntoSceneFromRootUrl_description": "从公共 Web URL 导入网格，需要 CORS",
    "rootUrl": "根 URL",
    "bitbybit.babylon.io.loadAssetIntoSceneFromRootUrlNoReturn": "从根 URL 加载资源到场景无返回",
    "loadAssetIntoSceneFromRootUrlNoReturn": "从根 URL 加载资源到场景无返回",
    "bitbybit.babylon.io.loadAssetIntoSceneFromRootUrlNoReturn_description": "从公共 Web URL 导入网格，无输出，需要 CORS",
    "bitbybit.babylon.io.exportBabylon": "导出 Babylon",
    "exportBabylon": "导出 Babylon",
    "bitbybit.babylon.io.exportBabylon_description": "将场景导出为 .babylon 格式以供编辑",
    "export": "导出",
    "fileName": "文件名",
    "bitbybit.babylon.io.exportGLB": "导出 GLB",
    "exportGLB": "导出 GLB",
    "bitbybit.babylon.io.exportGLB_description": "将场景导出为 .glb 格式，Web 标准格式",
    "discardSkyboxAndGrid": "丢弃天空盒和网格",
    "bitbybit.babylon.io.exportMeshToStl": "导出网格到 STL",
    "exportMeshToStl": "导出网格到 STL",
    "bitbybit.babylon.io.exportMeshToStl_description": "将网格及其子项导出为 STL",
    "bitbybit.babylon.io.exportMeshesToStl": "导出多个网格到 STL",
    "exportMeshesToStl": "导出多个网格到 STL",
    "bitbybit.babylon.io.exportMeshesToStl_description": "将多个网格导出为 STL",
    "meshes": "网格",
    "bitbybit.babylon.ray.createPickingRay": "拾取射线",
    "ray": "射线",
    "createPickingRay": "创建拾取射线",
    "bitbybit.babylon.ray.createPickingRay_description": "从活动相机中的鼠标位置创建拾取射线",
    "bitbybit.babylon.ray.createRay": "创建射线",
    "createRay": "创建射线",
    "bitbybit.babylon.ray.createRay_description": "从原点创建具有方向和可选长度的射线",
    "length": "长度",
    "bitbybit.babylon.ray.createRayFromTo": "从点到点的射线",
    "createRayFromTo": "创建从点到点的射线",
    "bitbybit.babylon.ray.createRayFromTo_description": "创建两点之间的射线",
    "from": "从",
    "to": "到",
    "bitbybit.babylon.ray.getOrigin": "获取原点",
    "getOrigin": "获取原点",
    "bitbybit.babylon.ray.getOrigin_description": "获取射线的原点",
    "BABYLON.Ray": "Babylon 射线",
    "bitbybit.babylon.ray.getDirection": "获取方向",
    "getDirection": "获取方向",
    "bitbybit.babylon.ray.getDirection_description": "获取射线的方向",
    "bitbybit.babylon.ray.getLength": "获取长度",
    "getLength": "获取长度",
    "bitbybit.babylon.ray.getLength_description": "获取射线的长度",
    "bitbybit.babylon.pick.pickWithRay": "用射线拾取",
    "pick": "拾取",
    "pickWithRay": "用射线拾取",
    "bitbybit.babylon.pick.pickWithRay_description": "从射线拾取获取命中结果",
    "bitbybit.babylon.pick.pickWithPickingRay": "用拾取射线拾取",
    "pickWithPickingRay": "用拾取射线拾取",
    "bitbybit.babylon.pick.pickWithPickingRay_description": "用活动相机中的鼠标位置发出的射线进行拾取",
    "bitbybit.babylon.pick.getDistance": "获取距离",
    "getDistance": "获取距离",
    "bitbybit.babylon.pick.getDistance_description": "获取到拾取对象的距离（如果拾取成功）",
    "get from pick info": "从拾取信息获取",
    "pickInfo": "拾取信息",
    "BABYLON.PickingInfo": "Babylon 拾取信息",
    "bitbybit.babylon.pick.getPickedMesh": "获取拾取的网格",
    "getPickedMesh": "获取拾取的网格",
    "bitbybit.babylon.pick.getPickedMesh_description": "获取被拾取的网格",
    "bitbybit.babylon.pick.getPickedPoint": "获取拾取的点",
    "getPickedPoint": "获取拾取的点",
    "bitbybit.babylon.pick.getPickedPoint_description": "获取被拾取的点",
    "bitbybit.babylon.pick.hit": "命中",
    "hit": "命中",
    "bitbybit.babylon.pick.hit_description": "检查射线是否命中场景中的任何物体",
    "bitbybit.babylon.pick.getSubMeshId": "获取子网格 ID",
    "getSubMeshId": "获取子网格 ID",
    "bitbybit.babylon.pick.getSubMeshId_description": "获取拾取的唯一子网格 ID（如果拾取成功）",
    "bitbybit.babylon.pick.getSubMeshFaceId": "获取子网格面 ID",
    "getSubMeshFaceId": "获取子网格面 ID",
    "bitbybit.babylon.pick.getSubMeshFaceId_description": "获取拾取的唯一子网格面 ID（如果拾取成功）",
    "bitbybit.babylon.pick.getBU": "获取 BU",
    "getBU": "获取 BU",
    "bitbybit.babylon.pick.getBU_description": "获取用于纹理碰撞的重心坐标 U",
    "bitbybit.babylon.pick.getBV": "获取 BV",
    "getBV": "获取 BV",
    "bitbybit.babylon.pick.getBV_description": "获取用于纹理碰撞的重心坐标 V",
    "bitbybit.babylon.pick.getPickedSprite": "获取拾取的精灵",
    "getPickedSprite": "获取拾取的精灵",
    "bitbybit.babylon.pick.getPickedSprite_description": "获取拾取的精灵",
    "bitbybit.babylon.material.pbrMetallicRoughness.create": "PBR 金属粗糙度",
    "pbrMetallicRoughness": "PBR 金属粗糙度",
    "bitbybit.babylon.material.pbrMetallicRoughness.create_description": "创建 PBR 金属粗糙度材质",
    "baseColor": "基础颜色",
    "emissiveColor": "自发光颜色",
    "metallic": "金属度",
    "roughness": "粗糙度",
    "zOffset": "Z 偏移",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBaseColor": "设置基础颜色",
    "setBaseColor": "设置基础颜色",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBaseColor_description": "设置材质的基础颜色",
    "BABYLON.PBRMetallicRoughnessMaterial": "Babylon PBR 金属粗糙度材质",
    "bitbybit.babylon.material.pbrMetallicRoughness.setMetallic": "设置金属度",
    "setMetallic": "设置金属度",
    "bitbybit.babylon.material.pbrMetallicRoughness.setMetallic_description": "设置材质的金属度属性",
    "bitbybit.babylon.material.pbrMetallicRoughness.setRoughness": "设置粗糙度",
    "setRoughness": "设置粗糙度",
    "bitbybit.babylon.material.pbrMetallicRoughness.setRoughness_description": "设置材质的粗糙度",
    "bitbybit.babylon.material.pbrMetallicRoughness.setAlpha": "设置 Alpha 值",
    "setAlpha": "设置 Alpha 值",
    "bitbybit.babylon.material.pbrMetallicRoughness.setAlpha_description": "设置材质的 Alpha 值",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBackFaceCulling": "设置背面剔除",
    "setBackFaceCulling": "设置背面剔除",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBackFaceCulling_description": "设置材质的背面剔除",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBaseTexture": "设置基础纹理",
    "setBaseTexture": "设置基础纹理",
    "bitbybit.babylon.material.pbrMetallicRoughness.setBaseTexture_description": "设置材质的纹理",
    "baseTexture": "基础纹理",
    "BABYLON.Texture": "Babylon 纹理",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBaseColor": "获取基础颜色",
    "getBaseColor": "获取基础颜色",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBaseColor_description": "获取材质的基础颜色",
    "bitbybit.babylon.material.pbrMetallicRoughness.getMetallic": "获取金属度",
    "getMetallic": "获取金属度",
    "bitbybit.babylon.material.pbrMetallicRoughness.getMetallic_description": "获取材质的金属度属性",
    "bitbybit.babylon.material.pbrMetallicRoughness.getRoughness": "获取粗糙度",
    "getRoughness": "获取粗糙度",
    "bitbybit.babylon.material.pbrMetallicRoughness.getRoughness_description": "获取材质的粗糙度",
    "bitbybit.babylon.material.pbrMetallicRoughness.getAlpha": "获取 Alpha 值",
    "getAlpha": "获取 Alpha 值",
    "bitbybit.babylon.material.pbrMetallicRoughness.getAlpha_description": "获取材质的 Alpha 值",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBackFaceCulling": "获取背面剔除",
    "getBackFaceCulling": "获取背面剔除",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBackFaceCulling_description": "获取材质的背面剔除",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBaseTexture": "获取基础纹理",
    "getBaseTexture": "获取基础纹理",
    "bitbybit.babylon.material.pbrMetallicRoughness.getBaseTexture_description": "获取材质的基础纹理",
    "bitbybit.babylon.material.skyMaterial.create": "天空材质",
    "skyMaterial": "天空材质",
    "bitbybit.babylon.material.skyMaterial.create_description": "创建天空材质",
    "luminance": "亮度",
    "turbidity": "浑浊度",
    "rayleigh": "瑞利散射",
    "mieCoefficient": "米氏系数",
    "mieDirectionalG": "米氏方向性 G",
    "inclination": "倾角",
    "azimuth": "方位角",
    "sunPosition": "太阳位置",
    "useSunPosition": "使用太阳位置",
    "cameraOffset": "相机偏移",
    "up": "上方向",
    "dithering": "抖动",
    "bitbybit.babylon.material.skyMaterial.setLuminance": "设置亮度",
    "setLuminance": "设置亮度",
    "bitbybit.babylon.material.skyMaterial.setLuminance_description": "设置天空材质的亮度",
    "MATERIALS.SkyMaterial": "材质库天空材质",
    "bitbybit.babylon.material.skyMaterial.setTurbidity": "设置浑浊度",
    "setTurbidity": "设置浑浊度",
    "bitbybit.babylon.material.skyMaterial.setTurbidity_description": "设置天空材质的浑浊度",
    "bitbybit.babylon.material.skyMaterial.setRayleigh": "设置瑞利散射",
    "setRayleigh": "设置瑞利散射",
    "bitbybit.babylon.material.skyMaterial.setRayleigh_description": "设置天空材质的瑞利散射",
    "bitbybit.babylon.material.skyMaterial.setMieCoefficient": "设置米氏系数",
    "setMieCoefficient": "设置米氏系数",
    "bitbybit.babylon.material.skyMaterial.setMieCoefficient_description": "设置天空材质的米氏系数",
    "bitbybit.babylon.material.skyMaterial.setMieDirectionalG": "设置米氏方向性 G",
    "setMieDirectionalG": "设置米氏方向性 G",
    "bitbybit.babylon.material.skyMaterial.setMieDirectionalG_description": "设置天空材质的米氏方向性 G",
    "bitbybit.babylon.material.skyMaterial.setDistance": "设置距离",
    "setDistance": "设置距离",
    "bitbybit.babylon.material.skyMaterial.setDistance_description": "设置天空材质的距离",
    "bitbybit.babylon.material.skyMaterial.setInclination": "设置倾角",
    "setInclination": "设置倾角",
    "bitbybit.babylon.material.skyMaterial.setInclination_description": "设置天空材质的倾角",
    "bitbybit.babylon.material.skyMaterial.setAzimuth": "设置方位角",
    "setAzimuth": "设置方位角",
    "bitbybit.babylon.material.skyMaterial.setAzimuth_description": "设置天空材质的方位角",
    "bitbybit.babylon.material.skyMaterial.setSunPosition": "设置太阳位置",
    "setSunPosition": "设置太阳位置",
    "bitbybit.babylon.material.skyMaterial.setSunPosition_description": "设置天空材质的太阳位置",
    "bitbybit.babylon.material.skyMaterial.setUseSunPosition": "设置使用太阳位置",
    "setUseSunPosition": "设置使用太阳位置",
    "bitbybit.babylon.material.skyMaterial.setUseSunPosition_description": "设置天空材质是否使用太阳位置",
    "bitbybit.babylon.material.skyMaterial.setCameraOffset": "设置相机偏移",
    "setCameraOffset": "设置相机偏移",
    "bitbybit.babylon.material.skyMaterial.setCameraOffset_description": "设置天空材质的相机偏移",
    "bitbybit.babylon.material.skyMaterial.setUp": "设置上方向",
    "setUp": "设置上方向",
    "bitbybit.babylon.material.skyMaterial.setUp_description": "设置天空材质的上方向",
    "bitbybit.babylon.material.skyMaterial.setDithering": "设置抖动",
    "setDithering": "设置抖动",
    "bitbybit.babylon.material.skyMaterial.setDithering_description": "设置天空材质的抖动",
    "bitbybit.babylon.material.skyMaterial.getLuminance": "获取亮度",
    "getLuminance": "获取亮度",
    "bitbybit.babylon.material.skyMaterial.getLuminance_description": "获取天空材质的亮度",
    "bitbybit.babylon.material.skyMaterial.getTurbidity": "获取浑浊度",
    "getTurbidity": "获取浑浊度",
    "bitbybit.babylon.material.skyMaterial.getTurbidity_description": "获取天空材质的浑浊度",
    "bitbybit.babylon.material.skyMaterial.getRayleigh": "获取瑞利散射",
    "getRayleigh": "获取瑞利散射",
    "bitbybit.babylon.material.skyMaterial.getRayleigh_description": "获取天空材质的瑞利散射",
    "bitbybit.babylon.material.skyMaterial.getMieCoefficient": "获取米氏系数",
    "getMieCoefficient": "获取米氏系数",
    "bitbybit.babylon.material.skyMaterial.getMieCoefficient_description": "获取天空材质的米氏系数",
    "bitbybit.babylon.material.skyMaterial.getMieDirectionalG": "获取米氏方向性 G",
    "getMieDirectionalG": "获取米氏方向性 G",
    "bitbybit.babylon.material.skyMaterial.getMieDirectionalG_description": "获取天空材质的米氏方向性 G",
    "bitbybit.babylon.material.skyMaterial.getDistance": "获取距离",
    "bitbybit.babylon.material.skyMaterial.getDistance_description": "获取天空材质的距离",
    "bitbybit.babylon.material.skyMaterial.getInclination": "获取倾角",
    "getInclination": "获取倾角",
    "bitbybit.babylon.material.skyMaterial.getInclination_description": "获取天空材质的倾角",
    "bitbybit.babylon.material.skyMaterial.getAzimuth": "获取方位角",
    "getAzimuth": "获取方位角",
    "bitbybit.babylon.material.skyMaterial.getAzimuth_description": "获取天空材质的方位角",
    "bitbybit.babylon.material.skyMaterial.getSunPosition": "获取太阳位置",
    "getSunPosition": "获取太阳位置",
    "bitbybit.babylon.material.skyMaterial.getSunPosition_description": "获取天空材质的太阳位置",
    "bitbybit.babylon.material.skyMaterial.getUseSunPosition": "获取使用太阳位置",
    "getUseSunPosition": "获取使用太阳位置",
    "bitbybit.babylon.material.skyMaterial.getUseSunPosition_description": "获取天空材质是否使用太阳位置",
    "bitbybit.babylon.material.skyMaterial.getCameraOffset": "获取相机偏移",
    "getCameraOffset": "获取相机偏移",
    "bitbybit.babylon.material.skyMaterial.getCameraOffset_description": "获取天空材质的相机偏移",
    "bitbybit.babylon.material.skyMaterial.getUp": "获取上方向",
    "getUp": "获取上方向",
    "bitbybit.babylon.material.skyMaterial.getUp_description": "获取天空材质的上方向",
    "bitbybit.babylon.material.skyMaterial.getDithering": "获取抖动",
    "getDithering": "获取抖动",
    "bitbybit.babylon.material.skyMaterial.getDithering_description": "获取天空材质的抖动",
    "bitbybit.babylon.lights.shadowLight.setDirectionToTarget": "设置指向目标的方向",
    "shadowLight": "阴影灯光",
    "setDirectionToTarget": "设置指向目标的方向",
    "bitbybit.babylon.lights.shadowLight.setDirectionToTarget_description": "设置阴影灯光的方向",
    "BABYLON.ShadowLight": "Babylon 阴影灯光",
    "bitbybit.babylon.lights.shadowLight.setPosition": "设置位置",
    "bitbybit.babylon.lights.shadowLight.setPosition_description": "设置阴影灯光的位置",
    "bitbybit.babylon.meshBuilder.createBox": "创建长方体",
    "meshBuilder": "网格构建器",
    "createBox": "创建长方体",
    "bitbybit.babylon.meshBuilder.createBox_description": "创建长方体网格",
    "create simple": "简单创建",
    "depth": "深度",
    "sideOrientation": "侧面朝向",
    "BabylonMesh.sideOrientationEnum": "Babylon 网格侧面朝向枚举",
    "bitbybit.babylon.meshBuilder.createCube": "创建立方体",
    "createCube": "创建立方体",
    "bitbybit.babylon.meshBuilder.createCube_description": "创建立方体网格",
    "bitbybit.babylon.meshBuilder.createSquarePlane": "创建正方形平面",
    "createSquarePlane": "创建正方形平面",
    "bitbybit.babylon.meshBuilder.createSquarePlane_description": "创建正方形平面网格",
    "bitbybit.babylon.meshBuilder.createSphere": "创建球体",
    "createSphere": "创建球体",
    "bitbybit.babylon.meshBuilder.createSphere_description": "创建球体网格",
    "diameter": "直径",
    "segments": "段数",
    "bitbybit.babylon.meshBuilder.createIcoSphere": "创建二十面体球",
    "createIcoSphere": "创建二十面体球",
    "bitbybit.babylon.meshBuilder.createIcoSphere_description": "创建二十面体球网格",
    "radiusX": "X 半径",
    "radiusY": "Y 半径",
    "radiusZ": "Z 半径",
    "flat": "平面",
    "bitbybit.babylon.meshBuilder.createDisc": "创建圆盘",
    "createDisc": "创建圆盘",
    "bitbybit.babylon.meshBuilder.createDisc_description": "创建圆盘网格",
    "tessellation": "镶嵌数",
    "arc": "弧度",
    "bitbybit.babylon.meshBuilder.createTorus": "创建圆环体",
    "createTorus": "创建圆环体",
    "bitbybit.babylon.meshBuilder.createTorus_description": "创建圆环体网格",
    "thickness": "厚度",
    "bitbybit.babylon.meshBuilder.createTorusKnot": "创建环面纽结体",
    "createTorusKnot": "创建环面纽结体",
    "bitbybit.babylon.meshBuilder.createTorusKnot_description": "创建环面纽结体网格",
    "tube": "管径",
    "radialSegments": "径向段数",
    "tubularSegments": "管状段数",
    "p": "p",
    "q": "q",
    "bitbybit.babylon.meshBuilder.createPolygon": "创建多边形",
    "createPolygon": "创建多边形",
    "bitbybit.babylon.meshBuilder.createPolygon_description": "创建多边形网格",
    "shape": "形状",
    "holes": "孔洞",
    "Base.Vector3[][]": "基础向量 3D 二维数组",
    "smoothingThreshold": "平滑阈值",
    "wrap": "包裹",
    "bitbybit.babylon.meshBuilder.extrudePolygon": "拉伸多边形",
    "extrudePolygon": "拉伸多边形",
    "bitbybit.babylon.meshBuilder.extrudePolygon_description": "创建拉伸的多边形网格",
    "bitbybit.babylon.meshBuilder.createTube": "创建管体",
    "createTube": "创建管体",
    "bitbybit.babylon.meshBuilder.createTube_description": "创建管体网格",
    "path": "路径",
    "cap": "封口类型",
    "bitbybit.babylon.meshBuilder.createPolyhedron": "创建多面体",
    "createPolyhedron": "创建多面体",
    "bitbybit.babylon.meshBuilder.createPolyhedron_description": "创建多面体网格",
    "type": "类型",
    "sizeX": "X 尺寸",
    "sizeY": "Y 尺寸",
    "sizeZ": "Z 尺寸",
    "custom": "自定义",
    "bitbybit.babylon.meshBuilder.createGeodesic": "创建测地线球体",
    "createGeodesic": "创建测地线球体",
    "bitbybit.babylon.meshBuilder.createGeodesic_description": "创建测地线球体网格",
    "m": "m",
    "n": "n",
    "bitbybit.babylon.meshBuilder.createGoldberg": "创建戈德堡多面体",
    "createGoldberg": "创建戈德堡多面体",
    "bitbybit.babylon.meshBuilder.createGoldberg_description": "创建戈德堡多面体网格",
    "bitbybit.babylon.meshBuilder.createCapsule": "创建胶囊体",
    "createCapsule": "创建胶囊体",
    "bitbybit.babylon.meshBuilder.createCapsule_description": "创建胶囊体网格",
    "orientation": "朝向",
    "capSubdivisions": "封口细分数",
    "radiusTop": "顶部半径",
    "radiusBottom": "底部半径",
    "topCapSubdivisions": "顶部封口细分数",
    "bottomCapSubdivisions": "底部封口细分数",
    "bitbybit.babylon.meshBuilder.createCylinder": "创建圆柱体",
    "createCylinder": "创建圆柱体",
    "bitbybit.babylon.meshBuilder.createCylinder_description": "创建圆柱体网格",
    "diameterTop": "顶部直径",
    "diameterBottom": "底部直径",
    "bitbybit.babylon.meshBuilder.createExtrudedSahpe": "创建拉伸形状",
    "createExtrudedSahpe": "创建拉伸形状",
    "bitbybit.babylon.meshBuilder.createExtrudedSahpe_description": "创建拉伸形状网格",
    "closeShape": "闭合形状",
    "closePath": "闭合路径",
    "bitbybit.babylon.meshBuilder.createRibbon": "创建带状体",
    "createRibbon": "创建带状体",
    "bitbybit.babylon.meshBuilder.createRibbon_description": "创建带状体网格",
    "pathArray": "路径数组",
    "closeArray": "闭合数组",
    "offset": "偏移",
    "bitbybit.babylon.meshBuilder.createLathe": "创建旋转体",
    "createLathe": "创建旋转体",
    "bitbybit.babylon.meshBuilder.createLathe_description": "创建旋转体网格",
    "closed": "闭合",
    "bitbybit.babylon.meshBuilder.createGround": "创建地面",
    "createGround": "创建地面",
    "bitbybit.babylon.meshBuilder.createGround_description": "创建地面网格",
    "subdivisionsX": "X 细分数",
    "subdivisionsY": "Y 细分数",
    "bitbybit.babylon.meshBuilder.createRectanglePlane": "创建矩形平面",
    "createRectanglePlane": "创建矩形平面",
    "bitbybit.babylon.meshBuilder.createRectanglePlane_description": "创建矩形平面网格",
    "bitbybit.babylon.texture.createSimple": "简单纹理",
    "texture": "纹理",
    "createSimple": "简单创建",
    "bitbybit.babylon.texture.createSimple_description": "使用基本选项从 URL 创建纹理",
    "invertY": "反转 Y",
    "invertZ": "反转 Z",
    "wAng": "W 角",
    "uScale": "U 缩放",
    "vScale": "V 缩放",
    "uOffset": "U 偏移",
    "vOffset": "V 偏移",
    "samplingMode": "采样模式",
    "samplingModeEnum": "采样模式枚举",
    "bitbybit.babylon.tools.createScreenshot": "截图",
    "tools": "工具",
    "createScreenshot": "创建截图",
    "bitbybit.babylon.tools.createScreenshot_description": "捕获场景截图",
    "screenshots": "截图",
    "mimeType": "MIME 类型",
    "quality": "质量",
    "bitbybit.babylon.tools.createScreenshotAndDownload": "截图并下载",
    "createScreenshotAndDownload": "创建截图并下载",
    "bitbybit.babylon.tools.createScreenshotAndDownload_description": "捕获并下载场景截图",
    "bitbybit.babylon.gui.advancedDynamicTexture.createFullScreenUI": "全屏 UI",
    "gui": "图形用户界面",
    "advancedDynamicTexture": "高级动态纹理",
    "createFullScreenUI": "创建全屏 UI",
    "bitbybit.babylon.gui.advancedDynamicTexture.createFullScreenUI_description": "创建全屏用户界面",
    "spaces": "空间",
    "foreground": "前景",
    "adaptiveScaling": "自适应缩放",
    "bitbybit.babylon.gui.advancedDynamicTexture.createForMesh": "为网格创建",
    "createForMesh": "为网格创建",
    "bitbybit.babylon.gui.advancedDynamicTexture.createForMesh_description": "为网格创建纹理",
    "BABYLON.AbstractMesh": "Babylon 抽象网格",
    "supportPointerMove": "支持指针移动",
    "onlyAlphaTesting": "仅 Alpha 测试",
    "sampling": "采样",
    "BabylonTexture.samplingModeEnum": "Babylon 纹理采样模式枚举",
    "bitbybit.babylon.gui.control.changeControlPadding": "更改控件内边距",
    "control": "控件",
    "changeControlPadding": "更改控件内边距",
    "bitbybit.babylon.gui.control.changeControlPadding_description": "设置控件的内边距",
    "positioning": "定位",
    "BABYLON.GUI.Control": "Babylon GUI 控件",
    "paddingLeft": "左内边距",
    "number | string": "数字或字符串",
    "paddingRight": "右内边距",
    "paddingTop": "上内边距",
    "paddingBottom": "下内边距",
    "bitbybit.babylon.gui.control.changeControlAlignment": "更改控件对齐方式",
    "changeControlAlignment": "更改控件对齐方式",
    "bitbybit.babylon.gui.control.changeControlAlignment_description": "设置控件的对齐方式",
    "T": "T",
    "horizontalAlignment": "水平对齐",
    "horizontalAlignmentEnum": "水平对齐枚举",
    "verticalAlignment": "垂直对齐",
    "verticalAlignmentEnum": "垂直对齐枚举",
    "bitbybit.babylon.gui.control.cloneControl": "克隆控件",
    "cloneControl": "克隆控件",
    "bitbybit.babylon.gui.control.cloneControl_description": "克隆控件",
    "container": "容器",
    "BABYLON.GUI.Container": "Babylon GUI 容器",
    "host": "宿主",
    "BABYLON.GUI.AdvancedDynamicTexture": "Babylon GUI 高级动态纹理",
    "bitbybit.babylon.gui.control.createControlObservableSelector": "控件可观察对象选择器",
    "createControlObservableSelector": "创建控件可观察对象选择器",
    "bitbybit.babylon.gui.control.createControlObservableSelector_description": "为控件创建可观察对象选择器",
    "selector": "选择器",
    "controlObservableSelectorEnum": "控件可观察对象选择器枚举",
    "bitbybit.babylon.gui.control.getControlByName": "按名称获取控件",
    "getControlByName": "按名称获取控件",
    "bitbybit.babylon.gui.control.getControlByName_description": "按名称获取控件",
    "bitbybit.babylon.gui.control.setIsVisible": "设置可见",
    "setIsVisible": "设置可见",
    "bitbybit.babylon.gui.control.setIsVisible_description": "设置控件可见性",
    "isVisible": "可见",
    "bitbybit.babylon.gui.control.setIsReadonly": "设置只读",
    "setIsReadonly": "设置只读",
    "bitbybit.babylon.gui.control.setIsReadonly_description": "设置控件只读",
    "isReadOnly": "只读",
    "bitbybit.babylon.gui.control.setIsEnabled": "设置启用",
    "setIsEnabled": "设置启用",
    "bitbybit.babylon.gui.control.setIsEnabled_description": "设置控件启用状态",
    "isEnabled": "已启用",
    "bitbybit.babylon.gui.control.setHeight": "设置高度",
    "setHeight": "设置高度",
    "bitbybit.babylon.gui.control.setHeight_description": "设置控件高度",
    "bitbybit.babylon.gui.control.setWidth": "设置宽度",
    "setWidth": "设置宽度",
    "bitbybit.babylon.gui.control.setWidth_description": "设置控件宽度",
    "bitbybit.babylon.gui.control.setColor": "设置颜色",
    "setColor": "设置颜色",
    "bitbybit.babylon.gui.control.setColor_description": "设置控件颜色",
    "bitbybit.babylon.gui.control.setFontSize": "设置字体大小",
    "setFontSize": "设置字体大小",
    "bitbybit.babylon.gui.control.setFontSize_description": "设置控件字体大小",
    "fontSize": "字体大小",
    "bitbybit.babylon.gui.control.getHeight": "获取高度",
    "getHeight": "获取高度",
    "bitbybit.babylon.gui.control.getHeight_description": "获取控件高度",
    "bitbybit.babylon.gui.control.getWidth": "获取宽度",
    "getWidth": "获取宽度",
    "bitbybit.babylon.gui.control.getWidth_description": "获取控件宽度",
    "bitbybit.babylon.gui.control.getColor": "获取颜色",
    "getColor": "获取颜色",
    "bitbybit.babylon.gui.control.getColor_description": "获取控件颜色",
    "bitbybit.babylon.gui.control.getFontSize": "获取字体大小",
    "getFontSize": "获取字体大小",
    "bitbybit.babylon.gui.control.getFontSize_description": "获取控件字体大小",
    "bitbybit.babylon.gui.control.getIsVisible": "获取可见",
    "getIsVisible": "获取可见",
    "bitbybit.babylon.gui.control.getIsVisible_description": "获取控件可见性",
    "bitbybit.babylon.gui.control.getIsReadonly": "获取只读",
    "getIsReadonly": "获取只读",
    "bitbybit.babylon.gui.control.getIsReadonly_description": "获取控件只读状态",
    "bitbybit.babylon.gui.control.getIsEnabled": "获取启用",
    "getIsEnabled": "获取启用",
    "bitbybit.babylon.gui.control.getIsEnabled_description": "获取控件启用状态",
    "bitbybit.babylon.gui.container.addControls": "添加控件",
    "addControls": "添加控件",
    "bitbybit.babylon.gui.container.addControls_description": "按顺序向容器添加控件",
    "controls": "控件",
    "BABYLON.GUI.Control[]": "Babylon GUI 控件数组",
    "clearControlsFirst": "先清除控件",
    "bitbybit.babylon.gui.container.setBackground": "设置背景",
    "setBackground": "设置背景",
    "bitbybit.babylon.gui.container.setBackground_description": "设置容器背景",
    "background": "背景",
    "bitbybit.babylon.gui.container.setIsReadonly": "设置只读",
    "bitbybit.babylon.gui.container.setIsReadonly_description": "设置容器只读",
    "bitbybit.babylon.gui.container.getBackground": "获取背景",
    "getBackground": "获取背景",
    "bitbybit.babylon.gui.container.getBackground_description": "获取容器背景",
    "bitbybit.babylon.gui.container.getIsReadonly": "获取只读",
    "bitbybit.babylon.gui.container.getIsReadonly_description": "获取容器只读状态",
    "bitbybit.babylon.gui.stackPanel.createStackPanel": "堆栈面板",
    "stackPanel": "堆栈面板",
    "createStackPanel": "创建堆栈面板",
    "bitbybit.babylon.gui.stackPanel.createStackPanel_description": "创建堆栈面板",
    "isVertical": "垂直",
    "spacing": "间距",
    "bitbybit.babylon.gui.stackPanel.setIsVertical": "设置为垂直",
    "setIsVertical": "设置为垂直",
    "bitbybit.babylon.gui.stackPanel.setIsVertical_description": "设置堆栈面板为垂直",
    "BABYLON.GUI.StackPanel": "Babylon GUI 堆栈面板",
    "bitbybit.babylon.gui.stackPanel.setSpacing": "设置间距",
    "setSpacing": "设置间距",
    "bitbybit.babylon.gui.stackPanel.setSpacing_description": "设置堆栈面板间距",
    "bitbybit.babylon.gui.stackPanel.setWidth": "设置宽度",
    "bitbybit.babylon.gui.stackPanel.setWidth_description": "设置堆栈面板宽度",
    "bitbybit.babylon.gui.stackPanel.setHeight": "设置高度",
    "bitbybit.babylon.gui.stackPanel.setHeight_description": "设置堆栈面板高度",
    "bitbybit.babylon.gui.stackPanel.getIsVertical": "获取是否垂直",
    "getIsVertical": "获取是否垂直",
    "bitbybit.babylon.gui.stackPanel.getIsVertical_description": "获取堆栈面板是否垂直",
    "bitbybit.babylon.gui.stackPanel.getSpacing": "获取间距",
    "getSpacing": "获取间距",
    "bitbybit.babylon.gui.stackPanel.getSpacing_description": "获取堆栈面板间距",
    "bitbybit.babylon.gui.stackPanel.getWidth": "获取宽度",
    "bitbybit.babylon.gui.stackPanel.getWidth_description": "获取堆栈面板宽度",
    "bitbybit.babylon.gui.stackPanel.getHeight": "获取高度",
    "bitbybit.babylon.gui.stackPanel.getHeight_description": "获取堆栈面板高度",
    "bitbybit.babylon.gui.button.createSimpleButton": "简单按钮",
    "button": "按钮",
    "createSimpleButton": "创建简单按钮",
    "bitbybit.babylon.gui.button.createSimpleButton_description": "创建简单按钮",
    "label": "标签",
    "bitbybit.babylon.gui.button.setButtonText": "设置按钮文本",
    "setButtonText": "设置按钮文本",
    "bitbybit.babylon.gui.button.setButtonText_description": "设置按钮文本",
    "BABYLON.GUI.Button": "Babylon GUI 按钮",
    "text": "文本",
    "bitbybit.babylon.gui.button.getButtonText": "获取按钮文本",
    "getButtonText": "获取按钮文本",
    "bitbybit.babylon.gui.button.getButtonText_description": "获取按钮文本",
    "bitbybit.babylon.gui.slider.createSlider": "滑块",
    "slider": "滑块",
    "createSlider": "创建滑块",
    "bitbybit.babylon.gui.slider.createSlider_description": "创建滑块",
    "minimum": "最小值",
    "maximum": "最大值",
    "value": "值",
    "step": "步长",
    "displayThumb": "显示滑块",
    "bitbybit.babylon.gui.slider.changeSliderThumb": "更改滑块",
    "changeSliderThumb": "更改滑块",
    "bitbybit.babylon.gui.slider.changeSliderThumb_description": "更改滑块属性",
    "BABYLON.GUI.Slider": "Babylon GUI 滑块",
    "isThumbCircle": "滑块是圆形",
    "thumbColor": "滑块颜色",
    "thumbWidth": "滑块宽度",
    "string | number": "字符串或数字",
    "isThumbClamped": "滑块被限制",
    "bitbybit.babylon.gui.slider.setBorderColor": "设置边框颜色",
    "setBorderColor": "设置边框颜色",
    "bitbybit.babylon.gui.slider.setBorderColor_description": "设置滑块边框颜色",
    "borderColor": "边框颜色",
    "bitbybit.babylon.gui.slider.setBackgroundColor": "设置背景颜色",
    "setBackgroundColor": "设置背景颜色",
    "bitbybit.babylon.gui.slider.setBackgroundColor_description": "设置滑块背景颜色",
    "backgroundColor": "背景颜色",
    "bitbybit.babylon.gui.slider.setMaximum": "设置最大值",
    "setMaximum": "设置最大值",
    "bitbybit.babylon.gui.slider.setMaximum_description": "设置滑块最大值",
    "bitbybit.babylon.gui.slider.setMinimum": "设置最小值",
    "setMinimum": "设置最小值",
    "bitbybit.babylon.gui.slider.setMinimum_description": "设置滑块最小值",
    "bitbybit.babylon.gui.slider.setStep": "设置步长",
    "setStep": "设置步长",
    "bitbybit.babylon.gui.slider.setStep_description": "设置滑块步长",
    "bitbybit.babylon.gui.slider.setValue": "设置值",
    "setValue": "设置值",
    "bitbybit.babylon.gui.slider.setValue_description": "设置滑块值",
    "bitbybit.babylon.gui.slider.createSliderObservableSelector": "滑块可观察对象选择器",
    "createSliderObservableSelector": "创建滑块可观察对象选择器",
    "bitbybit.babylon.gui.slider.createSliderObservableSelector_description": "为滑块创建可观察对象选择器",
    "sliderObservableSelectorEnum": "滑块可观察对象选择器枚举",
    "bitbybit.babylon.gui.slider.getBorderColor": "获取边框颜色",
    "getBorderColor": "获取边框颜色",
    "bitbybit.babylon.gui.slider.getBorderColor_description": "获取滑块边框颜色",
    "bitbybit.babylon.gui.slider.getBackgroundColor": "获取背景颜色",
    "getBackgroundColor": "获取背景颜色",
    "bitbybit.babylon.gui.slider.getBackgroundColor_description": "获取滑块背景颜色",
    "bitbybit.babylon.gui.slider.getMaximum": "获取最大值",
    "getMaximum": "获取最大值",
    "bitbybit.babylon.gui.slider.getMaximum_description": "获取滑块最大值",
    "bitbybit.babylon.gui.slider.getMinimum": "获取最小值",
    "getMinimum": "获取最小值",
    "bitbybit.babylon.gui.slider.getMinimum_description": "获取滑块最小值",
    "bitbybit.babylon.gui.slider.getStep": "获取步长",
    "getStep": "获取步长",
    "bitbybit.babylon.gui.slider.getStep_description": "获取滑块步长",
    "bitbybit.babylon.gui.slider.getValue": "获取值",
    "getValue": "获取值",
    "bitbybit.babylon.gui.slider.getValue_description": "获取滑块值",
    "bitbybit.babylon.gui.slider.getThumbColor": "获取滑块颜色",
    "getThumbColor": "获取滑块颜色",
    "bitbybit.babylon.gui.slider.getThumbColor_description": "获取滑块颜色",
    "bitbybit.babylon.gui.slider.getThumbWidth": "获取滑块宽度",
    "getThumbWidth": "获取滑块宽度",
    "bitbybit.babylon.gui.slider.getThumbWidth_description": "获取滑块宽度",
    "bitbybit.babylon.gui.slider.getIsVertical": "获取是否垂直",
    "bitbybit.babylon.gui.slider.getIsVertical_description": "获取滑块是否垂直",
    "bitbybit.babylon.gui.slider.getDisplayThumb": "获取显示滑块",
    "getDisplayThumb": "获取显示滑块",
    "bitbybit.babylon.gui.slider.getDisplayThumb_description": "获取滑块是否显示",
    "bitbybit.babylon.gui.slider.getIsThumbCircle": "获取滑块是否圆形",
    "getIsThumbCircle": "获取滑块是否圆形",
    "bitbybit.babylon.gui.slider.getIsThumbCircle_description": "获取滑块是否圆形",
    "bitbybit.babylon.gui.slider.getIsThumbClamped": "获取滑块是否被限制",
    "getIsThumbClamped": "获取滑块是否被限制",
    "bitbybit.babylon.gui.slider.getIsThumbClamped_description": "获取滑块是否被限制",
    "bitbybit.babylon.gui.textBlock.createTextBlock": "文本块",
    "textBlock": "文本块",
    "createTextBlock": "创建文本块",
    "bitbybit.babylon.gui.textBlock.createTextBlock_description": "创建文本块",
    "bitbybit.babylon.gui.textBlock.alignText": "对齐文本",
    "alignText": "对齐文本",
    "bitbybit.babylon.gui.textBlock.alignText_description": "设置文本对齐方式",
    "bitbybit.babylon.gui.textBlock.setTextOutline": "设置文本轮廓",
    "setTextOutline": "设置文本轮廓",
    "bitbybit.babylon.gui.textBlock.setTextOutline_description": "设置文本轮廓",
    "BABYLON.GUI.TextBlock": "Babylon GUI 文本块",
    "outlineWidth": "轮廓宽度",
    "outlineColor": "轮廓颜色",
    "bitbybit.babylon.gui.textBlock.setText": "设置文本",
    "setText": "设置文本",
    "bitbybit.babylon.gui.textBlock.setText_description": "设置文本块文本",
    "bitbybit.babylon.gui.textBlock.setRsizeToFit": "设置自适应大小",
    "setRsizeToFit": "设置自适应大小",
    "bitbybit.babylon.gui.textBlock.setRsizeToFit_description": "设置是否自适应大小",
    "resizeToFit": "自适应大小",
    "bitbybit.babylon.gui.textBlock.setTextWrapping": "设置文本换行",
    "setTextWrapping": "设置文本换行",
    "bitbybit.babylon.gui.textBlock.setTextWrapping_description": "设置文本换行",
    "textWrapping": "文本换行",
    "boolean | BABYLON.GUI.TextWrapping": "布尔值或 Babylon GUI 文本换行",
    "bitbybit.babylon.gui.textBlock.setLineSpacing": "设置行间距",
    "setLineSpacing": "设置行间距",
    "bitbybit.babylon.gui.textBlock.setLineSpacing_description": "设置文本行间距",
    "lineSpacing": "行间距",
    "bitbybit.babylon.gui.textBlock.getText": "获取文本",
    "getText": "获取文本",
    "bitbybit.babylon.gui.textBlock.getText_description": "获取文本块文本",
    "bitbybit.babylon.gui.textBlock.getTextWrapping": "获取文本换行",
    "getTextWrapping": "获取文本换行",
    "bitbybit.babylon.gui.textBlock.getTextWrapping_description": "获取文本换行状态",
    "bitbybit.babylon.gui.textBlock.getLineSpacing": "获取行间距",
    "getLineSpacing": "获取行间距",
    "bitbybit.babylon.gui.textBlock.getLineSpacing_description": "获取文本行间距",
    "bitbybit.babylon.gui.textBlock.getOutlineWidth": "获取轮廓宽度",
    "getOutlineWidth": "获取轮廓宽度",
    "bitbybit.babylon.gui.textBlock.getOutlineWidth_description": "获取文本轮廓宽度",
    "bitbybit.babylon.gui.textBlock.getResizeToFit": "获取自适应大小",
    "getResizeToFit": "获取自适应大小",
    "bitbybit.babylon.gui.textBlock.getResizeToFit_description": "获取是否自适应大小",
    "bitbybit.babylon.gui.textBlock.getTextHorizontalAlignment": "获取文本水平对齐",
    "getTextHorizontalAlignment": "获取文本水平对齐",
    "bitbybit.babylon.gui.textBlock.getTextHorizontalAlignment_description": "获取文本水平对齐方式",
    "bitbybit.babylon.gui.textBlock.getTextVerticalAlignment": "获取文本垂直对齐",
    "getTextVerticalAlignment": "获取文本垂直对齐",
    "bitbybit.babylon.gui.textBlock.getTextVerticalAlignment_description": "获取文本垂直对齐方式",
    "bitbybit.babylon.gui.textBlock.createTextBlockObservableSelector": "文本块可观察对象选择器",
    "createTextBlockObservableSelector": "创建文本块可观察对象选择器",
    "bitbybit.babylon.gui.textBlock.createTextBlockObservableSelector_description": "为文本块创建可观察对象选择器",
    "textBlockObservableSelectorEnum": "文本块可观察对象选择器枚举",
    "bitbybit.babylon.gui.radioButton.createRadioButton": "单选按钮",
    "radioButton": "单选按钮",
    "createRadioButton": "创建单选按钮",
    "bitbybit.babylon.gui.radioButton.createRadioButton_description": "创建单选按钮",
    "group": "组",
    "isChecked": "已选中",
    "checkSizeRatio": "选中标记大小比例",
    "bitbybit.babylon.gui.radioButton.setCheckSizeRatio": "设置选中标记大小比例",
    "setCheckSizeRatio": "设置选中标记大小比例",
    "bitbybit.babylon.gui.radioButton.setCheckSizeRatio_description": "设置单选按钮选中标记大小比例",
    "BABYLON.GUI.RadioButton": "Babylon GUI 单选按钮",
    "bitbybit.babylon.gui.radioButton.setGroup": "设置组",
    "setGroup": "设置组",
    "bitbybit.babylon.gui.radioButton.setGroup_description": "设置单选按钮组",
    "bitbybit.babylon.gui.radioButton.setBackground": "设置背景",
    "bitbybit.babylon.gui.radioButton.setBackground_description": "设置单选按钮背景",
    "bitbybit.babylon.gui.radioButton.getCheckSizeRatio": "获取选中标记大小比例",
    "getCheckSizeRatio": "获取选中标记大小比例",
    "bitbybit.babylon.gui.radioButton.getCheckSizeRatio_description": "获取单选按钮选中标记大小比例",
    "bitbybit.babylon.gui.radioButton.getGroup": "获取组",
    "getGroup": "获取组",
    "bitbybit.babylon.gui.radioButton.getGroup_description": "获取单选按钮组",
    "bitbybit.babylon.gui.radioButton.getBackground": "获取背景",
    "bitbybit.babylon.gui.radioButton.getBackground_description": "获取单选按钮背景",
    "bitbybit.babylon.gui.radioButton.createRadioButtonObservableSelector": "单选按钮可观察对象选择器",
    "createRadioButtonObservableSelector": "创建单选按钮可观察对象选择器",
    "bitbybit.babylon.gui.radioButton.createRadioButtonObservableSelector_description": "为单选按钮创建可观察对象选择器",
    "radioButtonObservableSelectorEnum": "单选按钮可观察对象选择器枚举",
    "bitbybit.babylon.gui.checkbox.createCheckbox": "复选框",
    "checkbox": "复选框",
    "createCheckbox": "创建复选框",
    "bitbybit.babylon.gui.checkbox.createCheckbox_description": "创建复选框",
    "bitbybit.babylon.gui.checkbox.setBackground": "设置背景",
    "bitbybit.babylon.gui.checkbox.setBackground_description": "设置复选框背景",
    "BABYLON.GUI.Checkbox": "Babylon GUI 复选框",
    "bitbybit.babylon.gui.checkbox.setCheckSizeRatio": "设置选中标记大小比例",
    "bitbybit.babylon.gui.checkbox.setCheckSizeRatio_description": "设置复选框选中标记大小比例",
    "bitbybit.babylon.gui.checkbox.setIsChecked": "设置选中",
    "setIsChecked": "设置选中",
    "bitbybit.babylon.gui.checkbox.setIsChecked_description": "设置复选框选中状态",
    "bitbybit.babylon.gui.checkbox.getCheckSizeRatio": "获取选中标记大小比例",
    "bitbybit.babylon.gui.checkbox.getCheckSizeRatio_description": "获取复选框选中标记大小比例",
    "bitbybit.babylon.gui.checkbox.getIsChecked": "获取选中",
    "getIsChecked": "获取选中",
    "bitbybit.babylon.gui.checkbox.getIsChecked_description": "获取复选框选中状态",
    "bitbybit.babylon.gui.checkbox.getBackground": "获取背景",
    "bitbybit.babylon.gui.checkbox.getBackground_description": "获取复选框背景",
    "bitbybit.babylon.gui.checkbox.createCheckboxObservableSelector": "复选框可观察对象选择器",
    "createCheckboxObservableSelector": "创建复选框可观察对象选择器",
    "bitbybit.babylon.gui.checkbox.createCheckboxObservableSelector_description": "为复选框创建可观察对象选择器",
    "checkboxObservableSelectorEnum": "复选框可观察对象选择器枚举",
    "bitbybit.babylon.gui.inputText.createInputText": "输入文本框",
    "inputText": "输入文本框",
    "createInputText": "创建输入文本框",
    "bitbybit.babylon.gui.inputText.createInputText_description": "创建输入文本框",
    "placeholder": "占位符",
    "bitbybit.babylon.gui.inputText.setBackground": "设置背景",
    "bitbybit.babylon.gui.inputText.setBackground_description": "设置输入文本框背景",
    "BABYLON.GUI.InputText": "Babylon GUI 输入文本框",
    "bitbybit.babylon.gui.inputText.setText": "设置文本",
    "bitbybit.babylon.gui.inputText.setText_description": "设置输入文本框文本",
    "bitbybit.babylon.gui.inputText.setPlaceholder": "设置占位符",
    "setPlaceholder": "设置占位符",
    "bitbybit.babylon.gui.inputText.setPlaceholder_description": "设置输入文本框占位符",
    "bitbybit.babylon.gui.inputText.getBackground": "获取背景",
    "bitbybit.babylon.gui.inputText.getBackground_description": "获取输入文本框背景",
    "bitbybit.babylon.gui.inputText.getText": "获取文本",
    "bitbybit.babylon.gui.inputText.getText_description": "获取输入文本框文本",
    "bitbybit.babylon.gui.inputText.getPlaceholder": "获取占位符",
    "getPlaceholder": "获取占位符",
    "bitbybit.babylon.gui.inputText.getPlaceholder_description": "获取输入文本框占位符",
    "bitbybit.babylon.gui.inputText.createInputTextObservableSelector": "输入文本框可观察对象选择器",
    "createInputTextObservableSelector": "创建输入文本框可观察对象选择器",
    "bitbybit.babylon.gui.inputText.createInputTextObservableSelector_description": "为输入文本框创建可观察对象选择器",
    "inputTextObservableSelectorEnum": "输入文本框可观察对象选择器枚举",
    "bitbybit.babylon.gui.colorPicker.createColorPicker": "颜色选择器",
    "colorPicker": "颜色选择器",
    "createColorPicker": "创建颜色选择器",
    "bitbybit.babylon.gui.colorPicker.createColorPicker_description": "创建颜色选择器",
    "defaultColor": "默认颜色",
    "bitbybit.babylon.gui.colorPicker.setColorPickerValue": "设置颜色选择器值",
    "setColorPickerValue": "设置颜色选择器值",
    "bitbybit.babylon.gui.colorPicker.setColorPickerValue_description": "设置颜色选择器值",
    "BABYLON.GUI.ColorPicker": "Babylon GUI 颜色选择器",
    "bitbybit.babylon.gui.colorPicker.setColorPickerSize": "设置颜色选择器大小",
    "setColorPickerSize": "设置颜色选择器大小",
    "bitbybit.babylon.gui.colorPicker.setColorPickerSize_description": "设置颜色选择器大小",
    "bitbybit.babylon.gui.colorPicker.getColorPickerValue": "获取颜色选择器值",
    "getColorPickerValue": "获取颜色选择器值",
    "bitbybit.babylon.gui.colorPicker.getColorPickerValue_description": "获取颜色选择器值",
    "bitbybit.babylon.gui.colorPicker.getColorPickerSize": "获取颜色选择器大小",
    "getColorPickerSize": "获取颜色选择器大小",
    "bitbybit.babylon.gui.colorPicker.getColorPickerSize_description": "获取颜色选择器大小",
    "bitbybit.babylon.gui.colorPicker.createColorPickerObservableSelector": "颜色选择器可观察对象选择器",
    "createColorPickerObservableSelector": "创建颜色选择器可观察对象选择器",
    "bitbybit.babylon.gui.colorPicker.createColorPickerObservableSelector_description": "为颜色选择器创建可观察对象选择器",
    "colorPickerObservableSelectorEnum": "颜色选择器可观察对象选择器枚举",
    "bitbybit.babylon.gui.image.createImage": "图像",
    "image": "图像",
    "createImage": "创建图像",
    "bitbybit.babylon.gui.image.createImage_description": "创建图像控件",
    "bitbybit.babylon.gui.image.setSourceUrl": "设置源 URL",
    "setSourceUrl": "设置源 URL",
    "bitbybit.babylon.gui.image.setSourceUrl_description": "设置图像源 URL",
    "BABYLON.GUI.Image": "Babylon GUI 图像",
    "bitbybit.babylon.gui.image.getSourceUrl": "获取源 URL",
    "getSourceUrl": "获取源 URL",
    "bitbybit.babylon.gui.image.getSourceUrl_description": "获取图像源 URL",
    "bitbybit.babylon.gizmo.manager.createGizmoManager": "Gizmo 管理器",
    "gizmo": "Gizmo",
    "manager": "管理器",
    "createGizmoManager": "创建 Gizmo 管理器",
    "bitbybit.babylon.gizmo.manager.createGizmoManager_description": "创建 Gizmo 管理器",
    "positionGizmoEnabled": "位置 Gizmo 已启用",
    "rotationGizmoEnabled": "旋转 Gizmo 已启用",
    "scaleGizmoEnabled": "缩放 Gizmo 已启用",
    "boundingBoxGizmoEnabled": "边界框 Gizmo 已启用",
    "usePointerToAttachGizmos": "使用指针附加 Gizmo",
    "clearGizmoOnEmptyPointerEvent": "在空指针事件时清除 Gizmo",
    "scaleRatio": "缩放比例",
    "attachableMeshes": "可附加网格",
    "BABYLON.AbstractMesh[]": "Babylon 抽象网格数组",
    "bitbybit.babylon.gizmo.manager.getPositionGizmo": "获取位置 Gizmo",
    "getPositionGizmo": "获取位置 Gizmo",
    "bitbybit.babylon.gizmo.manager.getPositionGizmo_description": "获取位置 Gizmo",
    "gizmoManager": "Gizmo 管理器",
    "BABYLON.GizmoManager": "Babylon Gizmo 管理器",
    "bitbybit.babylon.gizmo.manager.getRotationGizmo": "获取旋转 Gizmo",
    "getRotationGizmo": "获取旋转 Gizmo",
    "bitbybit.babylon.gizmo.manager.getRotationGizmo_description": "获取旋转 Gizmo",
    "bitbybit.babylon.gizmo.manager.getScaleGizmo": "获取缩放 Gizmo",
    "getScaleGizmo": "获取缩放 Gizmo",
    "bitbybit.babylon.gizmo.manager.getScaleGizmo_description": "获取缩放 Gizmo",
    "bitbybit.babylon.gizmo.manager.getBoundingBoxGizmo": "获取边界框 Gizmo",
    "getBoundingBoxGizmo": "获取边界框 Gizmo",
    "bitbybit.babylon.gizmo.manager.getBoundingBoxGizmo_description": "获取边界框 Gizmo",
    "bitbybit.babylon.gizmo.manager.attachToMesh": "附加到网格",
    "attachToMesh": "附加到网格",
    "bitbybit.babylon.gizmo.manager.attachToMesh_description": "将 Gizmo 管理器附加到网格",
    "update": "更新",
    "bitbybit.babylon.gizmo.manager.detachMesh": "从网格分离",
    "detachMesh": "从网格分离",
    "bitbybit.babylon.gizmo.manager.detachMesh_description": "将 Gizmo 管理器从网格分离",
    "bitbybit.babylon.gizmo.base.scaleRatio": "设置缩放比例",
    "base": "基础",
    "bitbybit.babylon.gizmo.base.scaleRatio_description": "设置 Gizmo 缩放比例",
    "BABYLON.IGizmo": "Babylon IGizmo",
    "bitbybit.babylon.gizmo.base.getScaleRatio": "获取缩放比例",
    "getScaleRatio": "获取缩放比例",
    "bitbybit.babylon.gizmo.base.getScaleRatio_description": "获取 Gizmo 缩放比例",
    "bitbybit.babylon.gizmo.positionGizmo.planarGizmoEnabled": "设置平面 Gizmo 启用",
    "positionGizmo": "位置 Gizmo",
    "planarGizmoEnabled": "平面 Gizmo 已启用",
    "bitbybit.babylon.gizmo.positionGizmo.planarGizmoEnabled_description": "设置平面 Gizmo 启用状态",
    "BABYLON.IPositionGizmo": "Babylon IPositionGizmo",
    "bitbybit.babylon.gizmo.positionGizmo.snapDistance": "设置吸附距离",
    "snapDistance": "吸附距离",
    "bitbybit.babylon.gizmo.positionGizmo.snapDistance_description": "设置位置 Gizmo 吸附距离",
    "bitbybit.babylon.gizmo.positionGizmo.getAttachedMesh": "获取附加的网格",
    "getAttachedMesh": "获取附加的网格",
    "bitbybit.babylon.gizmo.positionGizmo.getAttachedMesh_description": "获取附加的网格",
    "bitbybit.babylon.gizmo.positionGizmo.getAttachedNode": "获取附加的节点",
    "getAttachedNode": "获取附加的节点",
    "bitbybit.babylon.gizmo.positionGizmo.getAttachedNode_description": "获取附加的节点",
    "bitbybit.babylon.gizmo.positionGizmo.getXGizmo": "获取 X Gizmo",
    "getXGizmo": "获取 X Gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getXGizmo_description": "获取 X Gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getYGizmo": "获取 Y Gizmo",
    "getYGizmo": "获取 Y Gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getYGizmo_description": "获取 Y Gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getZGizmo": "获取 Z Gizmo",
    "getZGizmo": "获取 Z Gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getZGizmo_description": "获取 Z Gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getXPlaneGizmo": "获取 X 平面 Gizmo",
    "getXPlaneGizmo": "获取 X 平面 Gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getXPlaneGizmo_description": "获取 X 平面 Gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getYPlaneGizmo": "获取 Y 平面 Gizmo",
    "getYPlaneGizmo": "获取 Y 平面 Gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getYPlaneGizmo_description": "获取 Y 平面 Gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getZPlaneGizmo": "获取 Z 平面 Gizmo",
    "getZPlaneGizmo": "获取 Z 平面 Gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getZPlaneGizmo_description": "获取 Z 平面 Gizmo",
    "bitbybit.babylon.gizmo.positionGizmo.getPlanarGizmoEnabled": "获取平面 Gizmo 启用状态",
    "getPlanarGizmoEnabled": "获取平面 Gizmo 启用状态",
    "bitbybit.babylon.gizmo.positionGizmo.getPlanarGizmoEnabled_description": "获取平面 Gizmo 启用状态",
    "bitbybit.babylon.gizmo.positionGizmo.getSnapDistance": "获取吸附距离",
    "getSnapDistance": "获取吸附距离",
    "bitbybit.babylon.gizmo.positionGizmo.getSnapDistance_description": "获取吸附距离",
    "bitbybit.babylon.gizmo.positionGizmo.getIsDragging": "获取是否拖拽中",
    "getIsDragging": "获取是否拖拽中",
    "bitbybit.babylon.gizmo.positionGizmo.getIsDragging_description": "获取拖拽状态",
    "bitbybit.babylon.gizmo.positionGizmo.createPositionGizmoObservableSelector": "位置 Gizmo 可观察对象选择器",
    "createPositionGizmoObservableSelector": "创建位置 Gizmo 可观察对象选择器",
    "bitbybit.babylon.gizmo.positionGizmo.createPositionGizmoObservableSelector_description": "为位置 Gizmo 创建可观察对象选择器",
    "positionGizmoObservableSelectorEnum": "位置 Gizmo 可观察对象选择器枚举",
    "bitbybit.babylon.gizmo.rotationGizmo.snapDistance": "设置吸附距离",
    "rotationGizmo": "旋转 Gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.snapDistance_description": "设置旋转 Gizmo 吸附距离",
    "BABYLON.IRotationGizmo": "Babylon IRotationGizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.sensitivity": "设置灵敏度",
    "sensitivity": "灵敏度",
    "bitbybit.babylon.gizmo.rotationGizmo.sensitivity_description": "设置旋转 Gizmo 灵敏度",
    "bitbybit.babylon.gizmo.rotationGizmo.getAttachedMesh": "获取附加的网格",
    "bitbybit.babylon.gizmo.rotationGizmo.getAttachedMesh_description": "获取附加的网格",
    "bitbybit.babylon.gizmo.rotationGizmo.getAttachedNode": "获取附加的节点",
    "bitbybit.babylon.gizmo.rotationGizmo.getAttachedNode_description": "获取附加的节点",
    "bitbybit.babylon.gizmo.rotationGizmo.getXGizmo": "获取 X Gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getXGizmo_description": "获取 X Gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getYGizmo": "获取 Y Gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getYGizmo_description": "获取 Y Gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getZGizmo": "获取 Z Gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getZGizmo_description": "获取 Z Gizmo",
    "bitbybit.babylon.gizmo.rotationGizmo.getSnapDistance": "获取吸附距离",
    "bitbybit.babylon.gizmo.rotationGizmo.getSnapDistance_description": "获取吸附距离",
    "bitbybit.babylon.gizmo.rotationGizmo.getSensitivity": "获取灵敏度",
    "getSensitivity": "获取灵敏度",
    "bitbybit.babylon.gizmo.rotationGizmo.getSensitivity_description": "获取灵敏度",
    "bitbybit.babylon.gizmo.rotationGizmo.createRotationGizmoObservableSelector": "旋转 Gizmo 可观察对象选择器",
    "createRotationGizmoObservableSelector": "创建旋转 Gizmo 可观察对象选择器",
    "bitbybit.babylon.gizmo.rotationGizmo.createRotationGizmoObservableSelector_description": "为旋转 Gizmo 创建可观察对象选择器",
    "rotationGizmoObservableSelectorEnum": "旋转 Gizmo 可观察对象选择器枚举",
    "bitbybit.babylon.gizmo.scaleGizmo.getXGizmo": "获取 X Gizmo",
    "scaleGizmo": "缩放 Gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getXGizmo_description": "获取 X Gizmo",
    "BABYLON.IScaleGizmo": "Babylon IScaleGizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getYGizmo": "获取 Y Gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getYGizmo_description": "获取 Y Gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getZGizmo": "获取 Z Gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.getZGizmo_description": "获取 Z Gizmo",
    "bitbybit.babylon.gizmo.scaleGizmo.snapDistance": "设置吸附距离",
    "bitbybit.babylon.gizmo.scaleGizmo.snapDistance_description": "设置缩放 Gizmo 吸附距离",
    "bitbybit.babylon.gizmo.scaleGizmo.setIncrementalSnap": "设置增量吸附",
    "setIncrementalSnap": "设置增量吸附",
    "bitbybit.babylon.gizmo.scaleGizmo.setIncrementalSnap_description": "设置缩放 Gizmo 增量吸附",
    "incrementalSnap": "增量吸附",
    "bitbybit.babylon.gizmo.scaleGizmo.sensitivity": "设置灵敏度",
    "bitbybit.babylon.gizmo.scaleGizmo.sensitivity_description": "设置缩放 Gizmo 灵敏度",
    "bitbybit.babylon.gizmo.scaleGizmo.getIncrementalSnap": "获取增量吸附",
    "getIncrementalSnap": "获取增量吸附",
    "bitbybit.babylon.gizmo.scaleGizmo.getIncrementalSnap_description": "获取增量吸附",
    "bitbybit.babylon.gizmo.scaleGizmo.getSnapDistance": "获取吸附距离",
    "bitbybit.babylon.gizmo.scaleGizmo.getSnapDistance_description": "获取吸附距离",
    "bitbybit.babylon.gizmo.scaleGizmo.getSensitivity": "获取灵敏度",
    "bitbybit.babylon.gizmo.scaleGizmo.getSensitivity_description": "获取灵敏度",
    "bitbybit.babylon.gizmo.scaleGizmo.createScaleGizmoObservableSelector": "缩放 Gizmo 可观察对象选择器",
    "createScaleGizmoObservableSelector": "创建缩放 Gizmo 可观察对象选择器",
    "bitbybit.babylon.gizmo.scaleGizmo.createScaleGizmoObservableSelector_description": "为缩放 Gizmo 创建可观察对象选择器",
    "scaleGizmoObservableSelectorEnum": "缩放 Gizmo 可观察对象选择器枚举",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setRotationSphereSize": "设置旋转球体大小",
    "boundingBoxGizmo": "边界框 Gizmo",
    "setRotationSphereSize": "设置旋转球体大小",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setRotationSphereSize_description": "设置边界框 Gizmo 旋转球体大小",
    "BABYLON.BoundingBoxGizmo": "Babylon 边界框 Gizmo",
    "rotationSphereSize": "旋转球体大小",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshScreenSize": "设置固定拖拽网格屏幕尺寸",
    "setFixedDragMeshScreenSize": "设置固定拖拽网格屏幕尺寸",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshScreenSize_description": "设置固定拖拽网格屏幕尺寸以实现一致缩放",
    "fixedDragMeshScreenSize": "固定拖拽网格屏幕尺寸",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshBoundsSize": "设置固定拖拽网格边界尺寸",
    "setFixedDragMeshBoundsSize": "设置固定拖拽网格边界尺寸",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshBoundsSize_description": "设置固定拖拽网格边界尺寸",
    "fixedDragMeshBoundsSize": "固定拖拽网格边界尺寸",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshScreenSizeDistanceFactor": "设置固定拖拽网格屏幕尺寸距离因子",
    "setFixedDragMeshScreenSizeDistanceFactor": "设置固定拖拽网格屏幕尺寸距离因子",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setFixedDragMeshScreenSizeDistanceFactor_description": "设置固定拖拽网格屏幕尺寸的距离因子",
    "fixedDragMeshScreenSizeDistanceFactor": "固定拖拽网格屏幕尺寸距离因子",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScalingSnapDistance": "设置缩放吸附距离",
    "setScalingSnapDistance": "设置缩放吸附距离",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScalingSnapDistance_description": "设置边界框 Gizmo 缩放吸附距离",
    "scalingSnapDistance": "缩放吸附距离",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setRotationSnapDistance": "设置旋转吸附距离",
    "setRotationSnapDistance": "设置旋转吸附距离",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setRotationSnapDistance_description": "设置边界框 Gizmo 旋转吸附距离",
    "rotationSnapDistance": "旋转吸附距离",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScaleBoxSize": "设置缩放框大小",
    "setScaleBoxSize": "设置缩放框大小",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScaleBoxSize_description": "设置边界框 Gizmo 缩放框大小",
    "scaleBoxSize": "缩放框大小",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setIncrementalSnap": "设置增量吸附",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setIncrementalSnap_description": "设置边界框 Gizmo 增量吸附",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScalePivot": "设置缩放轴心点",
    "setScalePivot": "设置缩放轴心点",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScalePivot_description": "设置边界框 Gizmo 缩放轴心点",
    "scalePivot": "缩放轴心点",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setAxisFactor": "设置轴因子",
    "setAxisFactor": "设置轴因子",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setAxisFactor_description": "设置边界框 Gizmo 轴因子",
    "axisFactor": "轴因子",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScaleDragSpeed": "设置缩放拖拽速度",
    "setScaleDragSpeed": "设置缩放拖拽速度",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.setScaleDragSpeed_description": "设置边界框 Gizmo 缩放拖拽速度",
    "scaleDragSpeed": "缩放拖拽速度",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getRotationSphereSize": "获取旋转球体大小",
    "getRotationSphereSize": "获取旋转球体大小",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getRotationSphereSize_description": "获取旋转球体大小",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScaleBoxSize": "获取缩放框大小",
    "getScaleBoxSize": "获取缩放框大小",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScaleBoxSize_description": "获取缩放框大小",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshScreenSize": "获取固定拖拽网格屏幕尺寸",
    "getFixedDragMeshScreenSize": "获取固定拖拽网格屏幕尺寸",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshScreenSize_description": "获取固定拖拽网格屏幕尺寸",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshBoundsSize": "获取固定拖拽网格边界尺寸",
    "getFixedDragMeshBoundsSize": "获取固定拖拽网格边界尺寸",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshBoundsSize_description": "获取固定拖拽网格边界尺寸",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshScreenSizeDistanceFactor": "获取固定拖拽网格屏幕尺寸距离因子",
    "getFixedDragMeshScreenSizeDistanceFactor": "获取固定拖拽网格屏幕尺寸距离因子",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getFixedDragMeshScreenSizeDistanceFactor_description": "获取固定拖拽网格屏幕尺寸距离因子",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScalingSnapDistance": "获取缩放吸附距离",
    "getScalingSnapDistance": "获取缩放吸附距离",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScalingSnapDistance_description": "获取缩放吸附距离",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getRotationSnapDistance": "获取旋转吸附距离",
    "getRotationSnapDistance": "获取旋转吸附距离",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getRotationSnapDistance_description": "获取旋转吸附距离",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getIncrementalSnap": "获取增量吸附",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getIncrementalSnap_description": "获取增量吸附",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScalePivot": "获取缩放轴心点",
    "getScalePivot": "获取缩放轴心点",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScalePivot_description": "获取缩放轴心点",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getAxisFactor": "获取轴因子",
    "getAxisFactor": "获取轴因子",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getAxisFactor_description": "获取轴因子",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScaleDragSpeed": "获取缩放拖拽速度",
    "getScaleDragSpeed": "获取缩放拖拽速度",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.getScaleDragSpeed_description": "获取缩放拖拽速度",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.createBoundingBoxGizmoObservableSelector": "边界框 Gizmo 可观察对象选择器",
    "createBoundingBoxGizmoObservableSelector": "创建边界框 Gizmo 可观察对象选择器",
    "bitbybit.babylon.gizmo.boundingBoxGizmo.createBoundingBoxGizmoObservableSelector_description": "为边界框 Gizmo 创建可观察对象选择器",
    "boundingBoxGizmoObservableSelectorEnum": "边界框 Gizmo 可观察对象选择器枚举",
    "bitbybit.babylon.gizmo.axisDragGizmo.setIsEnabled": "设置启用",
    "axisDragGizmo": "轴拖拽 Gizmo",
    "bitbybit.babylon.gizmo.axisDragGizmo.setIsEnabled_description": "设置轴启用状态",
    "BABYLON.IAxisDragGizmo": "Babylon IAxisDragGizmo",
    "bitbybit.babylon.gizmo.axisDragGizmo.getIsEnabled": "获取启用状态",
    "bitbybit.babylon.gizmo.axisDragGizmo.getIsEnabled_description": "获取轴启用状态",
    "bitbybit.babylon.gizmo.axisScaleGizmo.setIsEnabled": "设置启用",
    "axisScaleGizmo": "轴缩放 Gizmo",
    "bitbybit.babylon.gizmo.axisScaleGizmo.setIsEnabled_description": "设置轴启用状态",
    "BABYLON.IAxisScaleGizmo": "Babylon IAxisScaleGizmo",
    "bitbybit.babylon.gizmo.axisScaleGizmo.getIsEnabled": "获取启用状态",
    "bitbybit.babylon.gizmo.axisScaleGizmo.getIsEnabled_description": "获取轴启用状态",
    "bitbybit.babylon.gizmo.planeDragGizmo.setIsEnabled": "设置启用",
    "planeDragGizmo": "平面拖拽 Gizmo",
    "bitbybit.babylon.gizmo.planeDragGizmo.setIsEnabled_description": "设置平面启用状态",
    "BABYLON.IPlaneDragGizmo": "Babylon IPlaneDragGizmo",
    "bitbybit.babylon.gizmo.planeDragGizmo.getIsEnabled": "获取启用状态",
    "bitbybit.babylon.gizmo.planeDragGizmo.getIsEnabled_description": "获取平面启用状态",
    "bitbybit.babylon.gizmo.planeRotationGizmo.setIsEnabled": "设置启用",
    "planeRotationGizmo": "平面旋转 Gizmo",
    "bitbybit.babylon.gizmo.planeRotationGizmo.setIsEnabled_description": "设置平面启用状态",
    "BABYLON.IPlaneRotationGizmo": "Babylon IPlaneRotationGizmo",
    "bitbybit.babylon.gizmo.planeRotationGizmo.getIsEnabled": "获取启用状态",
    "bitbybit.babylon.gizmo.planeRotationGizmo.getIsEnabled_description": "获取平面启用状态",
    "bitbybit.vector.removeAllDuplicateVectors": "移除所有重复向量",
    "vector": "向量",
    "removeAllDuplicateVectors": "移除所有重复向量",
    "bitbybit.vector.removeAllDuplicateVectors_description": "从数组中移除所有重复的向量",
    "remove": "移除",
    "vectors": "向量",
    "number[][]": "数字二维数组",
    "tolerance": "容差",
    "bitbybit.vector.removeConsecutiveDuplicateVectors": "移除连续重复向量",
    "removeConsecutiveDuplicateVectors": "移除连续重复向量",
    "bitbybit.vector.removeConsecutiveDuplicateVectors_description": "从数组中移除连续重复的向量",
    "checkFirstAndLast": "检查首尾",
    "bitbybit.vector.angleBetween": "夹角",
    "angleBetween": "夹角",
    "bitbybit.vector.angleBetween_description": "测量两个向量之间的夹角（度）",
    "angles": "角度",
    "first": "第一个",
    "second": "第二个",
    "bitbybit.vector.angleBetweenNormalized2d": "归一化 2D 夹角",
    "angleBetweenNormalized2d": "归一化 2D 夹角",
    "bitbybit.vector.angleBetweenNormalized2d_description": "测量两个归一化 2D 向量之间的夹角（度）",
    "bitbybit.vector.positiveAngleBetween": "正向夹角",
    "positiveAngleBetween": "正向夹角",
    "bitbybit.vector.positiveAngleBetween_description": "测量两个向量之间带参考方向的正向夹角（度）",
    "reference": "参考",
    "bitbybit.vector.addAll": "全部相加",
    "addAll": "全部相加",
    "bitbybit.vector.addAll_description": "将所有向量的 XYZ 值相加到一个新向量中",
    "sum": "和",
    "bitbybit.vector.add": "相加",
    "add": "相加",
    "bitbybit.vector.add_description": "两个向量相加",
    "bitbybit.vector.all": "全部",
    "all": "全部",
    "bitbybit.vector.all_description": "检查布尔数组是否全为真",
    "boolean[]": "布尔数组",
    "bitbybit.vector.cross": "叉乘",
    "cross": "叉乘",
    "bitbybit.vector.cross_description": "两个向量叉乘",
    "bitbybit.vector.distSquared": "距离平方",
    "distSquared": "距离平方",
    "bitbybit.vector.distSquared_description": "两个向量之间的距离平方",
    "bitbybit.vector.dist": "距离",
    "dist": "距离",
    "bitbybit.vector.dist_description": "两个向量之间的距离",
    "bitbybit.vector.div": "除以",
    "div": "除以",
    "bitbybit.vector.div_description": "向量除以标量",
    "scalar": "标量",
    "bitbybit.vector.domain": "域",
    "domain": "域",
    "bitbybit.vector.domain_description": "计算向量最小值和最大值之间的域",
    "bitbybit.vector.dot": "点乘",
    "dot": "点乘",
    "bitbybit.vector.dot_description": "两个向量的点乘积",
    "bitbybit.vector.finite": "有限",
    "finite": "有限",
    "bitbybit.vector.finite_description": "检查向量中的数字是否为有限值",
    "validate": "验证",
    "bitbybit.vector.isZero": "是否为零",
    "isZero": "是否为零",
    "bitbybit.vector.isZero_description": "检查向量长度是否为零",
    "bitbybit.vector.lerp": "线性插值",
    "lerp": "线性插值",
    "bitbybit.vector.lerp_description": "按比例查找两个向量之间的向量",
    "fraction": "比例",
    "bitbybit.vector.max": "最大值",
    "max": "最大值",
    "bitbybit.vector.max_description": "查找向量中的最大值",
    "extract": "提取",
    "bitbybit.vector.min": "最小值",
    "min": "最小值",
    "bitbybit.vector.min_description": "查找向量中的最小值",
    "bitbybit.vector.mul": "乘以",
    "mul": "乘以",
    "bitbybit.vector.mul_description": "向量乘以标量",
    "bitbybit.vector.neg": "取反",
    "neg": "取反",
    "bitbybit.vector.neg_description": "向量取反",
    "bitbybit.vector.normSquared": "模平方",
    "normSquared": "模平方",
    "bitbybit.vector.normSquared_description": "计算模的平方",
    "bitbybit.vector.norm": "模",
    "norm": "模",
    "bitbybit.vector.norm_description": "计算向量的模",
    "bitbybit.vector.normalized": "归一化",
    "normalized": "归一化",
    "bitbybit.vector.normalized_description": "将向量归一化为单位长度",
    "bitbybit.vector.onRay": "射线上",
    "onRay": "射线上",
    "bitbybit.vector.onRay_description": "查找射线上给定距离处的点",
    "bitbybit.vector.vectorXYZ": "XYZ 向量",
    "vectorXYZ": "XYZ 向量",
    "bitbybit.vector.vectorXYZ_description": "创建 XYZ 向量",
    "x": "X",
    "y": "Y",
    "z": "Z",
    "bitbybit.vector.vectorXY": "XY 向量",
    "vectorXY": "XY 向量",
    "bitbybit.vector.vectorXY_description": "创建 2D XY 向量",
    "bitbybit.vector.range": "范围",
    "range": "范围",
    "bitbybit.vector.range_description": "创建从 0 到最大值的整数向量",
    "bitbybit.vector.signedAngleBetween": "有符号夹角",
    "signedAngleBetween": "有符号夹角",
    "bitbybit.vector.signedAngleBetween_description": "计算两个带参考方向的向量之间的有符号夹角",
    "bitbybit.vector.span": "跨度",
    "span": "跨度",
    "bitbybit.vector.span_description": "创建从最小值到最大值，按步长跨越的向量",
    "bitbybit.vector.spanEaseItems": "缓动跨度项",
    "spanEaseItems": "缓动跨度项",
    "bitbybit.vector.spanEaseItems_description": "使用缓动函数创建从最小值到最大值跨越的向量",
    "nrItems": "项数",
    "ease": "缓动",
    "Math.easeEnum": "数学缓动枚举",
    "intervals": "间隔",
    "bitbybit.vector.spanLinearItems": "线性跨度项",
    "spanLinearItems": "线性跨度项",
    "bitbybit.vector.spanLinearItems_description": "创建从最小值到最大值跨越，指定项数的向量",
    "bitbybit.vector.sub": "相减",
    "sub": "相减",
    "bitbybit.vector.sub_description": "两个向量相减",
    "bitbybit.vector.sum": "求和",
    "bitbybit.vector.sum_description": "求向量值的和",
    "bitbybit.point.transformPoint": "变换点",
    "transformPoint": "变换点",
    "bitbybit.point.transformPoint_description": "变换单个点",
    "transformation": "变换",
    "Base.TransformMatrixes": "基础变换矩阵",
    "bitbybit.point.transformPoints": "变换多个点",
    "transformPoints": "变换多个点",
    "bitbybit.point.transformPoints_description": "变换多个点",
    "points": "点",
    "bitbybit.point.transformsForPoints": "对点应用多个变换",
    "transformsForPoints": "对点应用多个变换",
    "bitbybit.point.transformsForPoints_description": "使用多个变换来变换多个点",
    "Base.TransformMatrixes[]": "基础变换矩阵数组",
    "bitbybit.point.translatePoints": "平移多个点",
    "translatePoints": "平移多个点",
    "bitbybit.point.translatePoints_description": "平移多个点",
    "bitbybit.point.translatePointsWithVectors": "用向量平移多个点",
    "translatePointsWithVectors": "用向量平移多个点",
    "bitbybit.point.translatePointsWithVectors_description": "用向量平移多个点",
    "bitbybit.point.translateXYZPoints": "用 XYZ 平移多个点",
    "translateXYZPoints": "用 XYZ 平移多个点",
    "bitbybit.point.translateXYZPoints_description": "按 XYZ 值平移多个点",
    "bitbybit.point.scalePointsCenterXYZ": "围绕中心按 XYZ 缩放多个点",
    "scalePointsCenterXYZ": "围绕中心按 XYZ 缩放多个点",
    "bitbybit.point.scalePointsCenterXYZ_description": "从中心按 XYZ 因子缩放多个点",
    "bitbybit.point.rotatePointsCenterAxis": "围绕中心和轴旋转多个点",
    "rotatePointsCenterAxis": "围绕中心和轴旋转多个点",
    "bitbybit.point.rotatePointsCenterAxis_description": "围绕中心和轴旋转多个点",
    "bitbybit.point.closestPointFromPointsDistance": "到多个点的最近点距离",
    "closestPointFromPointsDistance": "到多个点的最近点距离",
    "bitbybit.point.closestPointFromPointsDistance_description": "测量到多个点的最近距离",
    "bitbybit.point.closestPointFromPointsIndex": "到多个点的最近点索引",
    "closestPointFromPointsIndex": "到多个点的最近点索引",
    "bitbybit.point.closestPointFromPointsIndex_description": "查找最近点的索引（从 1 开始）",
    "bitbybit.point.closestPointFromPoints": "从多个点中找最近点",
    "closestPointFromPoints": "从多个点中找最近点",
    "bitbybit.point.closestPointFromPoints_description": "在集合中查找最近的点",
    "bitbybit.point.distance": "距离",
    "bitbybit.point.distance_description": "测量两点之间的距离",
    "measure": "测量",
    "startPoint": "起点",
    "endPoint": "终点",
    "bitbybit.point.distancesToPoints": "到多个点的距离",
    "distancesToPoints": "到多个点的距离",
    "bitbybit.point.distancesToPoints_description": "测量从起点到多个终点的距离",
    "endPoints": "终点",
    "bitbybit.point.multiplyPoint": "复制点",
    "multiplyPoint": "复制点",
    "bitbybit.point.multiplyPoint_description": "按数量复制点",
    "amountOfPoints": "点数量",
    "bitbybit.point.getX": "获取 X",
    "getX": "获取 X",
    "bitbybit.point.getX_description": "获取点的 X 坐标",
    "bitbybit.point.getY": "获取 Y",
    "getY": "获取 Y",
    "bitbybit.point.getY_description": "获取点的 Y 坐标",
    "bitbybit.point.getZ": "获取 Z",
    "getZ": "获取 Z",
    "bitbybit.point.getZ_description": "获取点的 Z 坐标",
    "bitbybit.point.averagePoint": "平均点",
    "averagePoint": "平均点",
    "bitbybit.point.averagePoint_description": "获取多个点的平均点",
    "bitbybit.point.pointXYZ": "XYZ 点",
    "pointXYZ": "XYZ 点",
    "bitbybit.point.pointXYZ_description": "创建 XYZ 点",
    "bitbybit.point.pointXY": "XY 点",
    "pointXY": "XY 点",
    "bitbybit.point.pointXY_description": "创建 XY 点",
    "bitbybit.point.spiral": "螺旋线",
    "spiral": "螺旋线",
    "bitbybit.point.spiral_description": "从多个点创建螺旋线",
    "phi": "Phi 角",
    "numberPoints": "点数",
    "widening": "加宽",
    "factor": "因子",
    "bitbybit.point.hexGrid": "六边形网格",
    "hexGrid": "六边形网格",
    "bitbybit.point.hexGrid_description": "在 XY 平面上创建扁平的六边形网格",
    "nrHexagonsY": "Y 方向六边形数量",
    "nrHexagonsX": "X 方向六边形数量",
    "radiusHexagon": "六边形半径",
    "orientOnCenter": "在中心定位",
    "pointsOnGround": "地面上的点",
    "bitbybit.point.removeConsecutiveDuplicates": "移除连续重复点",
    "removeConsecutiveDuplicates": "移除连续重复点",
    "bitbybit.point.removeConsecutiveDuplicates_description": "从点数组中移除连续的重复点",
    "clean": "清理",
    "bitbybit.line.convertToNurbsCurve": "转换为 NURBS 曲线",
    "line": "线",
    "convertToNurbsCurve": "转换为 NURBS 曲线",
    "bitbybit.line.convertToNurbsCurve_description": "将线段转换为 NURBS 曲线",
    "LinePointsDto": "线点数据传输对象",
    "bitbybit.line.convertLinesToNurbsCurves": "将多条线转换为 NURBS 曲线",
    "convertLinesToNurbsCurves": "将多条线转换为 NURBS 曲线",
    "bitbybit.line.convertLinesToNurbsCurves_description": "将多条线段转换为 NURBS 曲线数组",
    "lines": "线",
    "LinePointsDto[]": "线点数据传输对象数组",
    "bitbybit.line.getStartPoint": "获取起点",
    "getStartPoint": "获取起点",
    "bitbybit.line.getStartPoint_description": "获取线的起点",
    "bitbybit.line.getEndPoint": "获取终点",
    "getEndPoint": "获取终点",
    "bitbybit.line.getEndPoint_description": "获取线的终点",
    "bitbybit.line.length": "长度",
    "bitbybit.line.length_description": "获取线的长度",
    "bitbybit.line.reverse": "反转",
    "reverse": "反转",
    "bitbybit.line.reverse_description": "反转线的端点",
    "bitbybit.line.transformLine": "变换线",
    "transformLine": "变换线",
    "bitbybit.line.transformLine_description": "变换线",
    "bitbybit.line.transformsForLines": "对线应用多个变换",
    "transformsForLines": "对线应用多个变换",
    "bitbybit.line.transformsForLines_description": "变换多条线",
    "bitbybit.line.create": "创建",
    "bitbybit.line.create_description": "创建线",
    "bitbybit.line.createAsync": "异步创建",
    "createAsync": "异步创建",
    "bitbybit.line.createAsync_description": "从异步点创建线",
    "bitbybit.line.getPointOnLine": "获取线上点",
    "getPointOnLine": "获取线上点",
    "bitbybit.line.getPointOnLine_description": "获取线上参数位置的点",
    "param": "参数",
    "bitbybit.line.linesBetweenPoints": "点之间的线段",
    "linesBetweenPoints": "点之间的线段",
    "bitbybit.line.linesBetweenPoints_description": "在点之间创建线段",
    "bitbybit.line.linesBetweenStartAndEndPoints": "起点和终点之间的线",
    "linesBetweenStartAndEndPoints": "起点和终点之间的线",
    "bitbybit.line.linesBetweenStartAndEndPoints_description": "在起点和终点列表之间创建线",
    "startPoints": "起点",
    "bitbybit.line.linesBetweenStartAndEndPointsAsync": "起点和终点之间的线（异步）",
    "linesBetweenStartAndEndPointsAsync": "起点和终点之间的线（异步）",
    "bitbybit.line.linesBetweenStartAndEndPointsAsync_description": "使用异步输入在起点和终点之间创建线",
    "bitbybit.polyline.convertToNurbsCurve": "转换为 NURBS 曲线",
    "polyline": "折线",
    "bitbybit.polyline.convertToNurbsCurve_description": "将折线转换为 NURBS 曲线",
    "PolylinePropertiesDto": "折线属性数据传输对象",
    "bitbybit.polyline.length": "长度",
    "bitbybit.polyline.length_description": "获取折线长度",
    "bitbybit.polyline.countPoints": "计算点数",
    "countPoints": "计算点数",
    "bitbybit.polyline.countPoints_description": "获取折线点数",
    "bitbybit.polyline.getPoints": "获取点",
    "getPoints": "获取点",
    "bitbybit.polyline.getPoints_description": "获取折线点",
    "bitbybit.polyline.reverse": "反转",
    "bitbybit.polyline.reverse_description": "反转折线点",
    "bitbybit.polyline.transformPolyline": "变换折线",
    "transformPolyline": "变换折线",
    "bitbybit.polyline.transformPolyline_description": "变换折线",
    "bitbybit.polyline.create": "创建",
    "bitbybit.polyline.create_description": "创建折线",
    "isClosed": "闭合",
    "string | number[]": "字符串或数字数组",
    "bitbybit.occt.deleteShape": "删除形状",
    "occt": "OCCT",
    "deleteShape": "删除形状",
    "bitbybit.occt.deleteShape_description": "从缓存中删除形状",
    "bitbybit.occt.deleteShapes": "删除多个形状",
    "deleteShapes": "删除多个形状",
    "bitbybit.occt.deleteShapes_description": "从缓存中删除多个形状",
    "shapes": "形状",
    "T[]": "T 数组",
    "bitbybit.occt.cleanAllCache": "清理所有缓存",
    "cleanAllCache": "清理所有缓存",
    "bitbybit.occt.cleanAllCache_description": "清理所有缓存和内存中的形状",
    "bitbybit.occt.shapes.vertex.vertexFromXYZ": "从 XYZ 创建顶点",
    "vertex": "顶点",
    "vertexFromXYZ": "从 XYZ 创建顶点",
    "bitbybit.occt.shapes.vertex.vertexFromXYZ_description": "从 XYZ 坐标创建顶点",
    "bitbybit.occt.shapes.vertex.vertexFromPoint": "从点创建顶点",
    "vertexFromPoint": "从点创建顶点",
    "bitbybit.occt.shapes.vertex.vertexFromPoint_description": "从点创建顶点",
    "bitbybit.occt.shapes.vertex.verticesFromPoints": "从点创建顶点",
    "verticesFromPoints": "从点创建顶点",
    "bitbybit.occt.shapes.vertex.verticesFromPoints_description": "从点创建多个顶点",
    "bitbybit.occt.shapes.vertex.verticesCompoundFromPoints": "从点创建顶点复合体",
    "verticesCompoundFromPoints": "从点创建顶点复合体",
    "bitbybit.occt.shapes.vertex.verticesCompoundFromPoints_description": "创建顶点的复合形状",
    "bitbybit.occt.shapes.vertex.getVertices": "获取顶点",
    "getVertices": "获取顶点",
    "bitbybit.occt.shapes.vertex.getVertices_description": "从形状获取所有顶点",
    "bitbybit.occt.shapes.vertex.getVerticesAsPoints": "获取顶点作为点",
    "getVerticesAsPoints": "获取顶点作为点",
    "bitbybit.occt.shapes.vertex.getVerticesAsPoints_description": "获取所有顶点作为点",
    "bitbybit.occt.shapes.vertex.verticesToPoints": "顶点到点",
    "verticesToPoints": "顶点到点",
    "bitbybit.occt.shapes.vertex.verticesToPoints_description": "将顶点转换为点",
    "transform": "变换",
    "bitbybit.occt.shapes.vertex.vertexToPoint": "顶点到点",
    "vertexToPoint": "顶点到点",
    "bitbybit.occt.shapes.vertex.vertexToPoint_description": "将顶点转换为点",
    "bitbybit.occt.shapes.vertex.projectPoints": "投影点",
    "projectPoints": "投影点",
    "bitbybit.occt.shapes.vertex.projectPoints_description": "将点投影到形状上",
    "place": "放置",
    "projectionType": "投影类型",
    "pointProjectionTypeEnum": "点投影类型枚举",
    "bitbybit.occt.shapes.edge.line": "直线",
    "edge": "边",
    "bitbybit.occt.shapes.edge.line_description": "在两点之间创建线性边",
    "primitives": "基本体",
    "bitbybit.occt.shapes.edge.arcThroughThreePoints": "通过三点的圆弧",
    "arcThroughThreePoints": "通过三点的圆弧",
    "bitbybit.occt.shapes.edge.arcThroughThreePoints_description": "通过三点创建圆弧边",
    "middle": "中间点",
    "bitbybit.occt.shapes.edge.arcThroughTwoPointsAndTangent": "通过两点和切线的圆弧",
    "arcThroughTwoPointsAndTangent": "通过两点和切线的圆弧",
    "bitbybit.occt.shapes.edge.arcThroughTwoPointsAndTangent_description": "在第一点创建具有切线的圆弧边",
    "tangentVec": "切线向量",
    "bitbybit.occt.shapes.edge.arcFromCircleAndTwoPoints": "从圆和两点创建圆弧",
    "arcFromCircleAndTwoPoints": "从圆和两点创建圆弧",
    "bitbybit.occt.shapes.edge.arcFromCircleAndTwoPoints_description": "在圆上两点之间创建圆弧边",
    "circle": "圆",
    "sense": "方向",
    "bitbybit.occt.shapes.edge.arcFromCircleAndTwoAngles": "从圆和两个角度创建圆弧",
    "arcFromCircleAndTwoAngles": "从圆和两个角度创建圆弧",
    "bitbybit.occt.shapes.edge.arcFromCircleAndTwoAngles_description": "在圆上两个角度之间创建圆弧边",
    "alphaAngle1": "Alpha 角 1",
    "alphaAngle2": "Alpha 角 2",
    "bitbybit.occt.shapes.edge.arcFromCirclePointAndAngle": "从圆、点和角度创建圆弧",
    "arcFromCirclePointAndAngle": "从圆、点和角度创建圆弧",
    "bitbybit.occt.shapes.edge.arcFromCirclePointAndAngle_description": "在圆上从点到角度创建圆弧边",
    "alphaAngle": "Alpha 角",
    "bitbybit.occt.shapes.edge.createCircleEdge": "创建圆形边",
    "createCircleEdge": "创建圆形边",
    "bitbybit.occt.shapes.edge.createCircleEdge_description": "创建 OpenCASCADE 圆形边",
    "bitbybit.occt.shapes.edge.createEllipseEdge": "创建椭圆边",
    "createEllipseEdge": "创建椭圆边",
    "bitbybit.occt.shapes.edge.createEllipseEdge_description": "创建 OpenCASCADE 椭圆边",
    "radiusMinor": "短半轴半径",
    "radiusMajor": "长半轴半径",
    "bitbybit.occt.shapes.edge.removeInternalEdges": "移除内部边",
    "removeInternalEdges": "移除内部边",
    "bitbybit.occt.shapes.edge.removeInternalEdges_description": "从形状中移除内部边",
    "bitbybit.occt.shapes.edge.makeEdgeFromGeom2dCurveAndSurface": "从 2D 几何曲线和曲面创建边",
    "makeEdgeFromGeom2dCurveAndSurface": "从 2D 几何曲线和曲面创建边",
    "bitbybit.occt.shapes.edge.makeEdgeFromGeom2dCurveAndSurface_description": "从几何曲线和曲面创建边",
    "curve": "曲线",
    "surface": "曲面",
    "U": "U",
    "bitbybit.occt.shapes.edge.getEdge": "获取边",
    "getEdge": "获取边",
    "bitbybit.occt.shapes.edge.getEdge_description": "按索引从形状获取边",
    "index": "索引",
    "bitbybit.occt.shapes.edge.getEdges": "获取边",
    "getEdges": "获取边",
    "bitbybit.occt.shapes.edge.getEdges_description": "从形状获取边",
    "bitbybit.occt.shapes.edge.getEdgesAlongWire": "获取线框上的边",
    "getEdgesAlongWire": "获取线框上的边",
    "bitbybit.occt.shapes.edge.getEdgesAlongWire_description": "沿线框方向获取边",
    "bitbybit.occt.shapes.edge.getCircularEdgesAlongWire": "获取线框上的圆形边",
    "getCircularEdgesAlongWire": "获取线框上的圆形边",
    "bitbybit.occt.shapes.edge.getCircularEdgesAlongWire_description": "沿线框方向获取圆形边",
    "bitbybit.occt.shapes.edge.getLinearEdgesAlongWire": "获取线框上的线性边",
    "getLinearEdgesAlongWire": "获取线框上的线性边",
    "bitbybit.occt.shapes.edge.getLinearEdgesAlongWire_description": "沿线框方向获取线性边",
    "bitbybit.occt.shapes.edge.getCornerPointsOfEdgesForShape": "获取形状边的角点",
    "getCornerPointsOfEdgesForShape": "获取形状边的角点",
    "bitbybit.occt.shapes.edge.getCornerPointsOfEdgesForShape_description": "获取唯一的边角点",
    "bitbybit.occt.shapes.edge.getEdgeLength": "获取边长",
    "getEdgeLength": "获取边长",
    "bitbybit.occt.shapes.edge.getEdgeLength_description": "获取边长",
    "bitbybit.occt.shapes.edge.getEdgeLengthsOfShape": "获取形状的边长",
    "getEdgeLengthsOfShape": "获取形状的边长",
    "bitbybit.occt.shapes.edge.getEdgeLengthsOfShape_description": "从形状获取边长",
    "bitbybit.occt.shapes.edge.getEdgesLengths": "获取多条边长",
    "getEdgesLengths": "获取多条边长",
    "bitbybit.occt.shapes.edge.getEdgesLengths_description": "获取多条边的长度",
    "bitbybit.occt.shapes.edge.getEdgeCenterOfMass": "获取边质心",
    "getEdgeCenterOfMass": "获取边质心",
    "bitbybit.occt.shapes.edge.getEdgeCenterOfMass_description": "获取边的质心",
    "bitbybit.occt.shapes.edge.getEdgesCentersOfMass": "获取多条边质心",
    "getEdgesCentersOfMass": "获取多条边质心",
    "bitbybit.occt.shapes.edge.getEdgesCentersOfMass_description": "获取多条边的质心",
    "bitbybit.occt.shapes.edge.getCircularEdgeCenterPoint": "获取圆形边中心点",
    "getCircularEdgeCenterPoint": "获取圆形边中心点",
    "bitbybit.occt.shapes.edge.getCircularEdgeCenterPoint_description": "获取圆形边的中心点",
    "get circular edge": "获取圆形边",
    "bitbybit.occt.shapes.edge.getCircularEdgeRadius": "获取圆形边半径",
    "getCircularEdgeRadius": "获取圆形边半径",
    "bitbybit.occt.shapes.edge.getCircularEdgeRadius_description": "获取圆形边的半径",
    "bitbybit.occt.shapes.edge.getCircularEdgePlaneDirection": "获取圆形边平面方向",
    "getCircularEdgePlaneDirection": "获取圆形边平面方向",
    "bitbybit.occt.shapes.edge.getCircularEdgePlaneDirection_description": "获取圆形边的平面方向",
    "bitbybit.occt.shapes.edge.pointOnEdgeAtParam": "边上参数点",
    "pointOnEdgeAtParam": "边上参数点",
    "bitbybit.occt.shapes.edge.pointOnEdgeAtParam_description": "获取边上参数位置的点",
    "bitbybit.occt.shapes.edge.pointsOnEdgesAtParam": "多条边上参数点",
    "pointsOnEdgesAtParam": "多条边上参数点",
    "bitbybit.occt.shapes.edge.pointsOnEdgesAtParam_description": "获取多条边上参数位置的点",
    "bitbybit.occt.shapes.edge.edgesToPoints": "边到点",
    "edgesToPoints": "边到点",
    "bitbybit.occt.shapes.edge.edgesToPoints_description": "将多条边的点分别存入列表",
    "angularDeflection": "角度偏差",
    "curvatureDeflection": "曲率偏差",
    "minimumOfPoints": "最小点数",
    "uTolerance": "U 容差",
    "minimumLength": "最小长度",
    "bitbybit.occt.shapes.edge.reversedEdge": "反转边",
    "reversedEdge": "反转边",
    "bitbybit.occt.shapes.edge.reversedEdge_description": "计算反转的边",
    "bitbybit.occt.shapes.edge.tangentOnEdgeAtParam": "边上参数切线",
    "tangentOnEdgeAtParam": "边上参数切线",
    "bitbybit.occt.shapes.edge.tangentOnEdgeAtParam_description": "获取边上参数位置的切线向量",
    "bitbybit.occt.shapes.edge.tangentsOnEdgesAtParam": "多条边上参数切线",
    "tangentsOnEdgesAtParam": "多条边上参数切线",
    "bitbybit.occt.shapes.edge.tangentsOnEdgesAtParam_description": "获取多条边上参数位置的切线向量",
    "bitbybit.occt.shapes.edge.pointOnEdgeAtLength": "边上长度点",
    "pointOnEdgeAtLength": "边上长度点",
    "bitbybit.occt.shapes.edge.pointOnEdgeAtLength_description": "获取边上长度位置的点",
    "bitbybit.occt.shapes.edge.pointsOnEdgesAtLength": "多条边上长度点",
    "pointsOnEdgesAtLength": "多条边上长度点",
    "bitbybit.occt.shapes.edge.pointsOnEdgesAtLength_description": "获取多条边上长度位置的点",
    "bitbybit.occt.shapes.edge.tangentOnEdgeAtLength": "边上长度切线",
    "tangentOnEdgeAtLength": "边上长度切线",
    "bitbybit.occt.shapes.edge.tangentOnEdgeAtLength_description": "获取边上长度位置的切线向量",
    "bitbybit.occt.shapes.edge.tangentsOnEdgesAtLength": "多条边上长度切线",
    "tangentsOnEdgesAtLength": "多条边上长度切线",
    "bitbybit.occt.shapes.edge.tangentsOnEdgesAtLength_description": "获取多条边上长度位置的切线向量",
    "bitbybit.occt.shapes.edge.startPointOnEdge": "边上起点",
    "startPointOnEdge": "边上起点",
    "bitbybit.occt.shapes.edge.startPointOnEdge_description": "获取边上的起点",
    "bitbybit.occt.shapes.edge.startPointsOnEdges": "多条边上起点",
    "startPointsOnEdges": "多条边上起点",
    "bitbybit.occt.shapes.edge.startPointsOnEdges_description": "获取多条边上的起点",
    "bitbybit.occt.shapes.edge.endPointOnEdge": "边上终点",
    "endPointOnEdge": "边上终点",
    "bitbybit.occt.shapes.edge.endPointOnEdge_description": "获取边上的终点",
    "bitbybit.occt.shapes.edge.endPointsOnEdges": "多条边上终点",
    "endPointsOnEdges": "多条边上终点",
    "bitbybit.occt.shapes.edge.endPointsOnEdges_description": "获取多条边上的终点",
    "bitbybit.occt.shapes.edge.divideEdgeByParamsToPoints": "按参数分割边到点",
    "divideEdgeByParamsToPoints": "按参数分割边到点",
    "bitbybit.occt.shapes.edge.divideEdgeByParamsToPoints_description": "按参数将边分割为点",
    "nrOfDivisions": "分割数",
    "removeStartPoint": "移除起点",
    "removeEndPoint": "移除终点",
    "bitbybit.occt.shapes.edge.divideEdgesByParamsToPoints": "按参数分割多条边到点",
    "divideEdgesByParamsToPoints": "按参数分割多条边到点",
    "bitbybit.occt.shapes.edge.divideEdgesByParamsToPoints_description": "按参数将多条边分割为点",
    "bitbybit.occt.shapes.edge.divideEdgeByEqualDistanceToPoints": "按等距分割边到点",
    "divideEdgeByEqualDistanceToPoints": "按等距分割边到点",
    "bitbybit.occt.shapes.edge.divideEdgeByEqualDistanceToPoints_description": "按长度将边分割为点",
    "bitbybit.occt.shapes.edge.divideEdgesByEqualDistanceToPoints": "按等距分割多条边到点",
    "divideEdgesByEqualDistanceToPoints": "按等距分割多条边到点",
    "bitbybit.occt.shapes.edge.divideEdgesByEqualDistanceToPoints_description": "按长度将多条边分割为点",
    "bitbybit.occt.shapes.edge.constraintTanLinesFromTwoPtsToCircle": "约束两点到圆的切线",
    "constraintTanLinesFromTwoPtsToCircle": "约束两点到圆的切线",
    "bitbybit.occt.shapes.edge.constraintTanLinesFromTwoPtsToCircle_description": "创建从两点到圆切线的直线",
    "constraint": "约束",
    "point1": "点 1",
    "point2": "点 2",
    "positionResult": "位置结果",
    "positionResultEnum": "位置结果枚举",
    "circleRemainder": "圆剩余部分",
    "circleInclusionEnum": "圆包含枚举",
    "bitbybit.occt.shapes.edge.constraintTanLinesFromPtToCircle": "约束点到圆的切线",
    "constraintTanLinesFromPtToCircle": "约束点到圆的切线",
    "bitbybit.occt.shapes.edge.constraintTanLinesFromPtToCircle_description": "创建从点到圆切线的直线",
    "bitbybit.occt.shapes.edge.constraintTanLinesOnTwoCircles": "约束两个圆上的切线",
    "constraintTanLinesOnTwoCircles": "约束两个圆上的切线",
    "bitbybit.occt.shapes.edge.constraintTanLinesOnTwoCircles_description": "创建两个圆之间的切线",
    "circle1": "圆 1",
    "circle2": "圆 2",
    "circleRemainders": "圆剩余部分",
    "twoCircleInclusionEnum": "双圆包含枚举",
    "bitbybit.occt.shapes.edge.constraintTanCirclesOnTwoCircles": "约束两个圆上的相切圆",
    "constraintTanCirclesOnTwoCircles": "约束两个圆上的相切圆",
    "bitbybit.occt.shapes.edge.constraintTanCirclesOnTwoCircles_description": "创建两个圆之间的相切圆",
    "bitbybit.occt.shapes.edge.constraintTanCirclesOnCircleAndPnt": "约束圆和点上的相切圆",
    "constraintTanCirclesOnCircleAndPnt": "约束圆和点上的相切圆",
    "bitbybit.occt.shapes.edge.constraintTanCirclesOnCircleAndPnt_description": "创建点和圆之间的相切圆",
    "bitbybit.occt.shapes.edge.isEdgeLinear": "边是否线性",
    "isEdgeLinear": "边是否线性",
    "bitbybit.occt.shapes.edge.isEdgeLinear_description": "检查边是否为线性",
    "is": "是",
    "bitbybit.occt.shapes.edge.isEdgeCircular": "边是否圆形",
    "isEdgeCircular": "边是否圆形",
    "bitbybit.occt.shapes.edge.isEdgeCircular_description": "检查边是否为圆形",
    "bitbybit.occt.shapes.wire.createPolygonWire": "创建多边形线框",
    "wire": "线框",
    "createPolygonWire": "创建多边形线框",
    "bitbybit.occt.shapes.wire.createPolygonWire_description": "创建 OpenCASCADE 多边形线框",
    "via points": "通过点",
    "bitbybit.occt.shapes.wire.createPolygons": "创建多个多边形",
    "createPolygons": "创建多个多边形",
    "bitbybit.occt.shapes.wire.createPolygons_description": "创建 OpenCASCADE 多个多边形",
    "multiple": "多个",
    "polygons": "多边形",
    "PolygonDto[]": "多边形数据传输对象数组",
    "returnCompound": "返回复合体",
    "bitbybit.occt.shapes.wire.createLineWire": "创建直线线框",
    "createLineWire": "创建直线线框",
    "bitbybit.occt.shapes.wire.createLineWire_description": "创建 OpenCASCADE 直线线框",
    "bitbybit.occt.shapes.wire.createLines": "创建多条直线",
    "createLines": "创建多条直线",
    "bitbybit.occt.shapes.wire.createLines_description": "创建 OpenCASCADE 多条直线",
    "LineDto[]": "直线数据传输对象数组",
    "bitbybit.occt.shapes.wire.splitOnPoints": "在点处分割",
    "splitOnPoints": "在点处分割",
    "bitbybit.occt.shapes.wire.splitOnPoints_description": "在给定点处分割线框",
    "bitbybit.occt.shapes.wire.wiresToPoints": "线框到点",
    "wiresToPoints": "线框到点",
    "bitbybit.occt.shapes.wire.wiresToPoints_description": "将线框转换为有序的点列表",
    "bitbybit.occt.shapes.wire.createPolylineWire": "创建折线线框",
    "createPolylineWire": "创建折线线框",
    "bitbybit.occt.shapes.wire.createPolylineWire_description": "创建 OpenCASCADE 折线线框",
    "bitbybit.occt.shapes.wire.createZigZagBetweenTwoWires": "在两个线框间创建锯齿线",
    "createZigZagBetweenTwoWires": "在两个线框间创建锯齿线",
    "bitbybit.occt.shapes.wire.createZigZagBetweenTwoWires_description": "在两个线框之间创建锯齿线",
    "via wires": "通过线框",
    "wire1": "线框 1",
    "wire2": "线框 2",
    "nrZigZags": "锯齿数量",
    "inverse": "反向",
    "divideByEqualDistance": "按等距分割",
    "zigZagsPerEdge": "每条边的锯齿数",
    "bitbybit.occt.shapes.wire.createWireFromTwoCirclesTan": "从两个相切圆创建线框",
    "createWireFromTwoCirclesTan": "从两个相切圆创建线框",
    "bitbybit.occt.shapes.wire.createWireFromTwoCirclesTan_description": "创建 OpenCASCADE 线框",
    "keepLines": "保留直线",
    "twoSidesStrictEnum": "严格两侧枚举",
    "fourSidesStrictEnum": "严格四侧枚举",
    "bitbybit.occt.shapes.wire.createPolylines": "创建多条折线",
    "createPolylines": "创建多条折线",
    "bitbybit.occt.shapes.wire.createPolylines_description": "创建 OpenCASCADE 折线线框",
    "polylines": "折线",
    "PolylineDto[]": "折线数据传输对象数组",
    "bitbybit.occt.shapes.wire.createBezier": "创建贝塞尔曲线",
    "createBezier": "创建贝塞尔曲线",
    "bitbybit.occt.shapes.wire.createBezier_description": "创建 OpenCASCADE 贝塞尔线框",
    "bitbybit.occt.shapes.wire.createBezierWeights": "创建带权重的贝塞尔曲线",
    "createBezierWeights": "创建带权重的贝塞尔曲线",
    "bitbybit.occt.shapes.wire.createBezierWeights_description": "创建带权重的 OpenCASCADE 贝塞尔线框",
    "weights": "权重",
    "bitbybit.occt.shapes.wire.createBezierWires": "创建多条贝塞尔线框",
    "createBezierWires": "创建多条贝塞尔线框",
    "bitbybit.occt.shapes.wire.createBezierWires_description": "创建 OpenCASCADE 贝塞尔线框",
    "bezierWires": "贝塞尔线框",
    "BezierDto[]": "贝塞尔数据传输对象数组",
    "bitbybit.occt.shapes.wire.interpolatePoints": "通过点插值",
    "interpolatePoints": "通过点插值",
    "bitbybit.occt.shapes.wire.interpolatePoints_description": "从点创建 OpenCASCADE B样条线框",
    "periodic": "周期性",
    "bitbybit.occt.shapes.wire.interpolateWires": "创建插值线框",
    "interpolateWires": "创建插值线框",
    "bitbybit.occt.shapes.wire.interpolateWires_description": "创建多个 OpenCASCADE 插值线框",
    "interpolations": "插值数据",
    "InterpolationDto[]": "插值数据传输对象数组",
    "bitbybit.occt.shapes.wire.createBSpline": "创建B样条曲线",
    "createBSpline": "创建B样条曲线",
    "bitbybit.occt.shapes.wire.createBSpline_description": "创建 OpenCASCADE B样条线框",
    "bitbybit.occt.shapes.wire.createBSplines": "创建多条B样条线框",
    "createBSplines": "创建多条B样条线框",
    "bitbybit.occt.shapes.wire.createBSplines_description": "创建 OpenCASCADE B样条线框",
    "bSplines": "B样条曲线",
    "BSplineDto[]": "B样条数据传输对象数组",
    "bitbybit.occt.shapes.wire.combineEdgesAndWiresIntoAWire": "组合边和线框成线框",
    "combineEdgesAndWiresIntoAWire": "组合边和线框成线框",
    "bitbybit.occt.shapes.wire.combineEdgesAndWiresIntoAWire_description": "将边和线框组合成单个线框",
    "build": "构建",
    "bitbybit.occt.shapes.wire.createWireFromEdge": "从边创建线框",
    "createWireFromEdge": "从边创建线框",
    "bitbybit.occt.shapes.wire.createWireFromEdge_description": "从边创建线框",
    "bitbybit.occt.shapes.wire.addEdgesAndWiresToWire": "添加边和线框到线框",
    "addEdgesAndWiresToWire": "添加边和线框到线框",
    "bitbybit.occt.shapes.wire.addEdgesAndWiresToWire_description": "将边和线框添加到线框",
    "U[]": "U参数数组",
    "bitbybit.occt.shapes.wire.divideWireByParamsToPoints": "按参数分割线框为点",
    "divideWireByParamsToPoints": "按参数分割线框为点",
    "bitbybit.occt.shapes.wire.divideWireByParamsToPoints_description": "按参数将线框分割为点",
    "bitbybit.occt.shapes.wire.divideWiresByParamsToPoints": "按参数分割多个线框为点",
    "divideWiresByParamsToPoints": "按参数分割多个线框为点",
    "bitbybit.occt.shapes.wire.divideWiresByParamsToPoints_description": "按参数将多个线框分割为点",
    "extract from wires": "从线框提取",
    "bitbybit.occt.shapes.wire.divideWireByEqualDistanceToPoints": "按等距分割线框为点",
    "divideWireByEqualDistanceToPoints": "按等距分割线框为点",
    "bitbybit.occt.shapes.wire.divideWireByEqualDistanceToPoints_description": "将线框分割为等距点",
    "bitbybit.occt.shapes.wire.divideWiresByEqualDistanceToPoints": "按等距分割多个线框为点",
    "divideWiresByEqualDistanceToPoints": "按等距分割多个线框为点",
    "bitbybit.occt.shapes.wire.divideWiresByEqualDistanceToPoints_description": "将多个线框分割为等距点",
    "bitbybit.occt.shapes.wire.pointOnWireAtParam": "获取线框上参数处的点",
    "pointOnWireAtParam": "获取线框上参数处的点",
    "bitbybit.occt.shapes.wire.pointOnWireAtParam_description": "获取线框上指定参数处的点",
    "bitbybit.occt.shapes.wire.pointOnWireAtLength": "获取线框上长度处的点",
    "pointOnWireAtLength": "获取线框上长度处的点",
    "bitbybit.occt.shapes.wire.pointOnWireAtLength_description": "获取线框上指定长度处的点",
    "bitbybit.occt.shapes.wire.pointsOnWireAtLengths": "获取线框上指定长度处的点集",
    "pointsOnWireAtLengths": "获取线框上指定长度处的点集",
    "bitbybit.occt.shapes.wire.pointsOnWireAtLengths_description": "获取线框上指定多个长度处的点",
    "lengths": "长度数组",
    "bitbybit.occt.shapes.wire.pointsOnWireAtEqualLength": "获取线框上等长分割的点",
    "pointsOnWireAtEqualLength": "获取线框上等长分割的点",
    "bitbybit.occt.shapes.wire.pointsOnWireAtEqualLength_description": "获取线框上等长分割的点",
    "tryNext": "尝试下一个",
    "includeFirst": "包含起点",
    "includeLast": "包含终点",
    "bitbybit.occt.shapes.wire.pointsOnWireAtPatternOfLengths": "获取线框上按长度模式取的点",
    "pointsOnWireAtPatternOfLengths": "获取线框上按长度模式取的点",
    "bitbybit.occt.shapes.wire.pointsOnWireAtPatternOfLengths_description": "获取线框上按指定长度模式分布的点",
    "bitbybit.occt.shapes.wire.tangentOnWireAtParam": "获取线框上参数处的切线",
    "tangentOnWireAtParam": "获取线框上参数处的切线",
    "bitbybit.occt.shapes.wire.tangentOnWireAtParam_description": "获取线框上指定参数处的切向量",
    "bitbybit.occt.shapes.wire.tangentOnWireAtLength": "获取线框上长度处的切线",
    "tangentOnWireAtLength": "获取线框上长度处的切线",
    "bitbybit.occt.shapes.wire.tangentOnWireAtLength_description": "获取线框上指定长度处的切向量",
    "bitbybit.occt.shapes.wire.derivativesOnWireAtLength": "计算线框上长度处的导数",
    "derivativesOnWireAtLength": "计算线框上长度处的导数",
    "bitbybit.occt.shapes.wire.derivativesOnWireAtLength_description": "计算线框上指定长度处的 3 阶导数",
    "bitbybit.occt.shapes.wire.derivativesOnWireAtParam": "计算线框上参数处的导数",
    "derivativesOnWireAtParam": "计算线框上参数处的导数",
    "bitbybit.occt.shapes.wire.derivativesOnWireAtParam_description": "计算线框上指定参数处的 3 阶导数",
    "bitbybit.occt.shapes.wire.startPointOnWire": "获取线框起点",
    "startPointOnWire": "获取线框起点",
    "bitbybit.occt.shapes.wire.startPointOnWire_description": "获取线框的起点",
    "bitbybit.occt.shapes.wire.endPointOnWire": "获取线框终点",
    "endPointOnWire": "获取线框终点",
    "bitbybit.occt.shapes.wire.endPointOnWire_description": "获取线框的终点",
    "bitbybit.occt.shapes.wire.createCircleWire": "创建圆形线框",
    "createCircleWire": "创建圆形线框",
    "bitbybit.occt.shapes.wire.createCircleWire_description": "创建 OpenCASCADE 圆形线框",
    "bitbybit.occt.shapes.wire.createSquareWire": "创建方形线框",
    "createSquareWire": "创建方形线框",
    "bitbybit.occt.shapes.wire.createSquareWire_description": "创建 OpenCASCADE 方形线框",
    "bitbybit.occt.shapes.wire.createStarWire": "创建星形线框",
    "createStarWire": "创建星形线框",
    "bitbybit.occt.shapes.wire.createStarWire_description": "创建 OpenCASCADE 星形线框",
    "numRays": "射线数量",
    "outerRadius": "外半径",
    "innerRadius": "内半径",
    "offsetOuterEdges": "偏移外边",
    "half": "一半",
    "bitbybit.occt.shapes.wire.createChristmasTreeWire": "创建圣诞树线框",
    "createChristmasTreeWire": "创建圣诞树线框",
    "bitbybit.occt.shapes.wire.createChristmasTreeWire_description": "创建圣诞树线框",
    "innerDist": "内距离",
    "outerDist": "外距离",
    "nrSkirts": "裙边数量",
    "trunkHeight": "树干高度",
    "trunkWidth": "树干宽度",
    "bitbybit.occt.shapes.wire.createNGonWire": "创建N边形线框",
    "createNGonWire": "创建N边形线框",
    "bitbybit.occt.shapes.wire.createNGonWire_description": "创建 OpenCASCADE N边形线框",
    "nrCorners": "角点数量",
    "bitbybit.occt.shapes.wire.createParallelogramWire": "创建平行四边形线框",
    "createParallelogramWire": "创建平行四边形线框",
    "bitbybit.occt.shapes.wire.createParallelogramWire_description": "创建平行四边形线框",
    "aroundCenter": "围绕中心",
    "bitbybit.occt.shapes.wire.createHeartWire": "创建心形线框",
    "createHeartWire": "创建心形线框",
    "bitbybit.occt.shapes.wire.createHeartWire_description": "创建心形线框",
    "sizeApprox": "大约尺寸",
    "bitbybit.occt.shapes.wire.createRectangleWire": "创建矩形线框",
    "createRectangleWire": "创建矩形线框",
    "bitbybit.occt.shapes.wire.createRectangleWire_description": "创建 OpenCASCADE 矩形线框",
    "bitbybit.occt.shapes.wire.createLPolygonWire": "创建L形多边形线框",
    "createLPolygonWire": "创建L形多边形线框",
    "bitbybit.occt.shapes.wire.createLPolygonWire_description": "创建 OpenCASCADE L形多边形线框",
    "widthFirst": "第一宽度",
    "lengthFirst": "第一长度",
    "widthSecond": "第二宽度",
    "lengthSecond": "第二长度",
    "align": "对齐方式",
    "directionEnum": "方向枚举",
    "bitbybit.occt.shapes.wire.createEllipseWire": "创建椭圆线框",
    "createEllipseWire": "创建椭圆线框",
    "bitbybit.occt.shapes.wire.createEllipseWire_description": "创建 OpenCASCADE 椭圆线框",
    "bitbybit.occt.shapes.wire.textWires": "文本轮廓线",
    "textWires": "文本轮廓线",
    "bitbybit.occt.shapes.wire.textWires_description": "基于 A. V. Hershey 博士创建的 Simplex 字体，创建 OpenCascade 文本轮廓线。",
    "xOffset": "x 偏移",
    "yOffset": "y 偏移",
    "letterSpacing": "字符间距",
    "Base.horizontalAlignEnum": "Base.horizontalAlignEnum",
    "extrudeOffset": "拉伸偏移",
    "bitbybit.occt.shapes.wire.getWire": "获取线框",
    "getWire": "获取线框",
    "bitbybit.occt.shapes.wire.getWire_description": "从形状中按索引获取线框",
    "bitbybit.occt.shapes.wire.getWires": "获取所有线框",
    "getWires": "获取所有线框",
    "bitbybit.occt.shapes.wire.getWires_description": "从形状中获取所有线框",
    "bitbybit.occt.shapes.wire.getWireCenterOfMass": "获取线框质心",
    "getWireCenterOfMass": "获取线框质心",
    "bitbybit.occt.shapes.wire.getWireCenterOfMass_description": "获取线框的质心点",
    "bitbybit.occt.shapes.wire.getWiresCentersOfMass": "获取多个线框质心",
    "getWiresCentersOfMass": "获取多个线框质心",
    "bitbybit.occt.shapes.wire.getWiresCentersOfMass_description": "获取多个线框的质心点",
    "bitbybit.occt.shapes.wire.reversedWire": "反转线框",
    "reversedWire": "反转线框",
    "bitbybit.occt.shapes.wire.reversedWire_description": "计算反转后的线框",
    "bitbybit.occt.shapes.wire.reversedWireFromReversedEdges": "从反转边创建反转线框",
    "reversedWireFromReversedEdges": "从反转边创建反转线框",
    "bitbybit.occt.shapes.wire.reversedWireFromReversedEdges_description": "从反转的边计算反转后的线框",
    "bitbybit.occt.shapes.wire.isWireClosed": "检查线框是否闭合",
    "isWireClosed": "检查线框是否闭合",
    "bitbybit.occt.shapes.wire.isWireClosed_description": "检查线框是否闭合",
    "bitbybit.occt.shapes.wire.getWireLength": "获取线框长度",
    "getWireLength": "获取线框长度",
    "bitbybit.occt.shapes.wire.getWireLength_description": "获取线框的长度",
    "bitbybit.occt.shapes.wire.getWiresLengths": "获取多个线框长度",
    "getWiresLengths": "获取多个线框长度",
    "bitbybit.occt.shapes.wire.getWiresLengths_description": "获取多个线框的长度",
    "bitbybit.occt.shapes.wire.placeWireOnFace": "放置线框于面上",
    "placeWireOnFace": "放置线框于面上",
    "bitbybit.occt.shapes.wire.placeWireOnFace_description": "使用 UV 空间将线框放置在面上",
    "face": "面",
    "bitbybit.occt.shapes.wire.placeWiresOnFace": "放置多个线框于面上",
    "placeWiresOnFace": "放置多个线框于面上",
    "bitbybit.occt.shapes.wire.placeWiresOnFace_description": "使用 UV 空间将多个线框放置在面上",
    "wires": "线框",
    "bitbybit.occt.shapes.wire.closeOpenWire": "闭合开放线框",
    "closeOpenWire": "闭合开放线框",
    "bitbybit.occt.shapes.wire.closeOpenWire_description": "用直边闭合开放的线框",
    "bitbybit.occt.shapes.wire.project": "投影",
    "project": "投影",
    "bitbybit.occt.shapes.wire.project_description": "将线框投影到形状上",
    "bitbybit.occt.shapes.wire.projectWires": "投影多个线框",
    "projectWires": "投影多个线框",
    "bitbybit.occt.shapes.wire.projectWires_description": "将多个线框投影到形状上",
    "bitbybit.occt.shapes.face.createFacesFromWiresOnFace": "从面上的线框创建面",
    "createFacesFromWiresOnFace": "从面上的线框创建面",
    "bitbybit.occt.shapes.face.createFacesFromWiresOnFace_description": "从放置在面上的线框创建多个面",
    "inside": "内部",
    "bitbybit.occt.shapes.face.createFaceFromWireOnFace": "从面上的线框创建面",
    "createFaceFromWireOnFace": "从面上的线框创建面",
    "bitbybit.occt.shapes.face.createFaceFromWireOnFace_description": "从放置在面上的线框创建面",
    "bitbybit.occt.shapes.face.createFaceFromWire": "从线框创建面",
    "createFaceFromWire": "从线框创建面",
    "bitbybit.occt.shapes.face.createFaceFromWire_description": "从线框创建面",
    "planar": "平面性",
    "bitbybit.occt.shapes.face.createFaceFromWires": "从多个线框创建面",
    "createFaceFromWires": "从多个线框创建面",
    "bitbybit.occt.shapes.face.createFaceFromWires_description": "从多个线框创建面",
    "bitbybit.occt.shapes.face.createFaceFromWiresOnFace": "从面上的多个线框创建面",
    "createFaceFromWiresOnFace": "从面上的多个线框创建面",
    "bitbybit.occt.shapes.face.createFaceFromWiresOnFace_description": "在引导面上从多个线框创建面",
    "bitbybit.occt.shapes.face.createFacesFromWires": "从多个线框创建多个面",
    "createFacesFromWires": "从多个线框创建多个面",
    "bitbybit.occt.shapes.face.createFacesFromWires_description": "从多个线框创建多个面",
    "bitbybit.occt.shapes.face.createFaceFromMultipleCircleTanWires": "从多个相切圆线框创建面",
    "createFaceFromMultipleCircleTanWires": "从多个相切圆线框创建面",
    "bitbybit.occt.shapes.face.createFaceFromMultipleCircleTanWires_description": "从多个相切圆线框创建面",
    "circles": "圆",
    "combination": "组合方式",
    "combinationCirclesForFaceEnum": "面组合圆枚举",
    "unify": "合并",
    "bitbybit.occt.shapes.face.createFaceFromMultipleCircleTanWireCollections": "从多个相切圆线框集合创建面",
    "createFaceFromMultipleCircleTanWireCollections": "从多个相切圆线框集合创建面",
    "bitbybit.occt.shapes.face.createFaceFromMultipleCircleTanWireCollections_description": "从多个相切圆线框集合创建面",
    "listsOfCircles": "圆列表的列表",
    "T[][]": "T类型二维数组",
    "bitbybit.occt.shapes.face.faceFromSurface": "从曲面创建面",
    "faceFromSurface": "从曲面创建面",
    "bitbybit.occt.shapes.face.faceFromSurface_description": "从曲面创建面",
    "bitbybit.occt.shapes.face.faceFromSurfaceAndWire": "从曲面和线框创建面",
    "faceFromSurfaceAndWire": "从曲面和线框创建面",
    "bitbybit.occt.shapes.face.faceFromSurfaceAndWire_description": "从曲面和线框创建面",
    "bitbybit.occt.shapes.face.createPolygonFace": "创建多边形面",
    "createPolygonFace": "创建多边形面",
    "bitbybit.occt.shapes.face.createPolygonFace_description": "创建 OpenCASCADE 多边形面",
    "bitbybit.occt.shapes.face.createCircleFace": "创建圆形面",
    "createCircleFace": "创建圆形面",
    "bitbybit.occt.shapes.face.createCircleFace_description": "创建 OpenCASCADE 圆形面",
    "bitbybit.occt.shapes.face.createEllipseFace": "创建椭圆面",
    "createEllipseFace": "创建椭圆面",
    "bitbybit.occt.shapes.face.createEllipseFace_description": "创建 OpenCASCADE 椭圆面",
    "bitbybit.occt.shapes.face.createSquareFace": "创建方形面",
    "createSquareFace": "创建方形面",
    "bitbybit.occt.shapes.face.createSquareFace_description": "创建 OpenCASCADE 方形面",
    "bitbybit.occt.shapes.face.createRectangleFace": "创建矩形面",
    "createRectangleFace": "创建矩形面",
    "bitbybit.occt.shapes.face.createRectangleFace_description": "创建 OpenCASCADE 矩形面",
    "bitbybit.occt.shapes.face.getFace": "获取面",
    "getFace": "获取面",
    "bitbybit.occt.shapes.face.getFace_description": "从形状中按索引获取面",
    "bitbybit.occt.shapes.face.getFaces": "获取所有面",
    "getFaces": "获取所有面",
    "bitbybit.occt.shapes.face.getFaces_description": "从形状中获取所有面",
    "bitbybit.occt.shapes.face.reversedFace": "反转面",
    "reversedFace": "反转面",
    "bitbybit.occt.shapes.face.reversedFace_description": "计算反转后的面",
    "bitbybit.occt.shapes.face.subdivideToPoints": "细分为点",
    "subdivideToPoints": "细分为点",
    "bitbybit.occt.shapes.face.subdivideToPoints_description": "将面细分为点网格",
    "nrDivisionsU": "U方向细分数",
    "nrDivisionsV": "V方向细分数",
    "shiftHalfStepU": "U方向半步移位",
    "removeStartEdgeU": "U方向移除起始边",
    "removeEndEdgeU": "U方向移除结束边",
    "shiftHalfStepV": "V方向半步移位",
    "removeStartEdgeV": "V方向移除起始边",
    "removeEndEdgeV": "V方向移除结束边",
    "bitbybit.occt.shapes.face.subdivideToWires": "细分为线框",
    "subdivideToWires": "细分为线框",
    "bitbybit.occt.shapes.face.subdivideToWires_description": "将面细分为线框",
    "nrDivisions": "细分数",
    "isU": "是否U方向",
    "shiftHalfStep": "半步移位",
    "removeStart": "移除起点",
    "removeEnd": "移除终点",
    "bitbybit.occt.shapes.face.subdivideToRectangleWires": "细分为矩形线框",
    "subdivideToRectangleWires": "细分为矩形线框",
    "bitbybit.occt.shapes.face.subdivideToRectangleWires_description": "将面细分为矩形线框",
    "patterns": "模式",
    "nrRectanglesU": "U方向矩形数量",
    "nrRectanglesV": "V方向矩形数量",
    "scalePatternU": "U方向缩放模式",
    "scalePatternV": "V方向缩放模式",
    "filletPattern": "圆角模式",
    "inclusionPattern": "包含模式",
    "offsetFromBorderU": "U方向边界偏移",
    "offsetFromBorderV": "V方向边界偏移",
    "bitbybit.occt.shapes.face.subdivideToRectangleHoles": "细分为矩形孔",
    "subdivideToRectangleHoles": "细分为矩形孔",
    "bitbybit.occt.shapes.face.subdivideToRectangleHoles_description": "将面细分为矩形孔",
    "holesToFaces": "孔转为面",
    "bitbybit.occt.shapes.face.subdivideToPointsControlled": "受控细分为点",
    "subdivideToPointsControlled": "受控细分为点",
    "bitbybit.occt.shapes.face.subdivideToPointsControlled_description": "通过受控移位将面细分为点网格",
    "shiftHalfStepNthU": "U方向每N步半步移位",
    "shiftHalfStepUOffsetN": "U方向半步移位偏移N",
    "removeStartEdgeNthU": "U方向每N步移除起始边",
    "removeStartEdgeUOffsetN": "U方向移除起始边偏移N",
    "removeEndEdgeNthU": "U方向每N步移除结束边",
    "removeEndEdgeUOffsetN": "U方向移除结束边偏移N",
    "shiftHalfStepNthV": "V方向每N步半步移位",
    "shiftHalfStepVOffsetN": "V方向半步移位偏移N",
    "removeStartEdgeNthV": "V方向每N步移除起始边",
    "removeStartEdgeVOffsetN": "V方向移除起始边偏移N",
    "removeEndEdgeNthV": "V方向每N步移除结束边",
    "removeEndEdgeVOffsetN": "V方向移除结束边偏移N",
    "bitbybit.occt.shapes.face.subdivideToNormals": "细分为法线",
    "subdivideToNormals": "细分为法线",
    "bitbybit.occt.shapes.face.subdivideToNormals_description": "将面细分为法线网格",
    "bitbybit.occt.shapes.face.subdivideToUV": "细分为UV坐标",
    "subdivideToUV": "细分为UV坐标",
    "bitbybit.occt.shapes.face.subdivideToUV_description": "将面细分为UV网格",
    "bitbybit.occt.shapes.face.pointOnUV": "获取UV点",
    "pointOnUV": "获取UV点",
    "bitbybit.occt.shapes.face.pointOnUV_description": "获取映射到边界的UV点",
    "paramU": "U参数",
    "paramV": "V参数",
    "bitbybit.occt.shapes.face.normalOnUV": "获取UV法线",
    "normalOnUV": "获取UV法线",
    "bitbybit.occt.shapes.face.normalOnUV_description": "获取映射到边界的UV法线",
    "bitbybit.occt.shapes.face.pointsOnUVs": "获取UV点集",
    "pointsOnUVs": "获取UV点集",
    "bitbybit.occt.shapes.face.pointsOnUVs_description": "获取映射到边界的UV点集",
    "paramsUV": "UV参数对",
    "[number, number][]": "数字对数组",
    "bitbybit.occt.shapes.face.normalsOnUVs": "获取UV法线集",
    "normalsOnUVs": "获取UV法线集",
    "bitbybit.occt.shapes.face.normalsOnUVs_description": "获取映射到边界的UV法线集",
    "bitbybit.occt.shapes.face.subdivideToPointsOnParam": "按参数细分为点",
    "subdivideToPointsOnParam": "按参数细分为点",
    "bitbybit.occt.shapes.face.subdivideToPointsOnParam_description": "在指定参数处将面细分为点",
    "nrPoints": "点数量",
    "bitbybit.occt.shapes.face.wireAlongParam": "获取沿参数的线框",
    "wireAlongParam": "获取沿参数的线框",
    "bitbybit.occt.shapes.face.wireAlongParam_description": "获取面上沿指定参数的线框",
    "bitbybit.occt.shapes.face.wiresAlongParams": "获取沿参数的多个线框",
    "wiresAlongParams": "获取沿参数的多个线框",
    "bitbybit.occt.shapes.face.wiresAlongParams_description": "获取面上沿指定参数的多个线框",
    "params": "参数",
    "bitbybit.occt.shapes.face.getUMinBound": "获取U最小边界",
    "getUMinBound": "获取U最小边界",
    "bitbybit.occt.shapes.face.getUMinBound_description": "获取面的U最小边界",
    "bitbybit.occt.shapes.face.getUMaxBound": "获取U最大边界",
    "getUMaxBound": "获取U最大边界",
    "bitbybit.occt.shapes.face.getUMaxBound_description": "获取面的U最大边界",
    "bitbybit.occt.shapes.face.getVMinBound": "获取V最小边界",
    "getVMinBound": "获取V最小边界",
    "bitbybit.occt.shapes.face.getVMinBound_description": "获取面的V最小边界",
    "bitbybit.occt.shapes.face.getVMaxBound": "获取V最大边界",
    "getVMaxBound": "获取V最大边界",
    "bitbybit.occt.shapes.face.getVMaxBound_description": "获取面的V最大边界",
    "bitbybit.occt.shapes.face.getFaceArea": "获取面面积",
    "getFaceArea": "获取面面积",
    "bitbybit.occt.shapes.face.getFaceArea_description": "获取面的面积",
    "bitbybit.occt.shapes.face.getFacesAreas": "获取多个面面积",
    "getFacesAreas": "获取多个面面积",
    "bitbybit.occt.shapes.face.getFacesAreas_description": "获取多个面的面积",
    "bitbybit.occt.shapes.face.getFaceCenterOfMass": "获取面质心",
    "getFaceCenterOfMass": "获取面质心",
    "bitbybit.occt.shapes.face.getFaceCenterOfMass_description": "获取面的质心点",
    "bitbybit.occt.shapes.face.getFacesCentersOfMass": "获取多个面质心",
    "getFacesCentersOfMass": "获取多个面质心",
    "bitbybit.occt.shapes.face.getFacesCentersOfMass_description": "获取多个面的质心",
    "bitbybit.occt.shapes.face.filterFacePoints": "过滤面上的点",
    "filterFacePoints": "过滤面上的点",
    "bitbybit.occt.shapes.face.filterFacePoints_description": "过滤面上的点",
    "filter": "过滤器",
    "useBndBox": "使用边界框",
    "gapTolerance": "间隙容差",
    "keepIn": "保留内部",
    "keepOn": "保留边界上",
    "keepOut": "保留外部",
    "keepUnknown": "保留未知",
    "bitbybit.occt.shapes.face.filterFacesPoints": "过滤多个面上的点",
    "filterFacesPoints": "过滤多个面上的点",
    "bitbybit.occt.shapes.face.filterFacesPoints_description": "过滤多个面上的点",
    "flatPointsArray": "扁平点数组",
    "bitbybit.occt.shapes.shell.sewFaces": "缝合面",
    "shell": "壳体",
    "sewFaces": "缝合面",
    "bitbybit.occt.shapes.shell.sewFaces_description": "从面创建壳体",
    "bitbybit.occt.shapes.shell.getShellSurfaceArea": "获取壳体表面积",
    "getShellSurfaceArea": "获取壳体表面积",
    "bitbybit.occt.shapes.shell.getShellSurfaceArea_description": "获取壳体的表面积",
    "bitbybit.occt.shapes.solid.fromClosedShell": "从闭合壳体创建实体",
    "solid": "实体",
    "fromClosedShell": "从闭合壳体创建",
    "bitbybit.occt.shapes.solid.fromClosedShell_description": "从闭合的壳体创建实体",
    "bitbybit.occt.shapes.solid.createBox": "长方体",
    "bitbybit.occt.shapes.solid.createBox_description": "创建 OpenCASCADE 长方体",
    "originOnCenter": "原点在中心",
    "bitbybit.occt.shapes.solid.createCube": "立方体",
    "bitbybit.occt.shapes.solid.createCube_description": "创建 OpenCASCADE 立方体",
    "bitbybit.occt.shapes.solid.createBoxFromCorner": "从角点创建长方体",
    "createBoxFromCorner": "从角点创建长方体",
    "bitbybit.occt.shapes.solid.createBoxFromCorner_description": "从角点创建 OpenCASCADE 长方体",
    "corner": "角点",
    "bitbybit.occt.shapes.solid.createCylinder": "圆柱体",
    "bitbybit.occt.shapes.solid.createCylinder_description": "创建 OpenCASCADE 圆柱体",
    "bitbybit.occt.shapes.solid.createCylindersOnLines": "沿直线创建圆柱体",
    "createCylindersOnLines": "沿直线创建圆柱体",
    "bitbybit.occt.shapes.solid.createCylindersOnLines_description": "沿直线创建 OpenCASCADE 圆柱体",
    "Base.Line3[]": "基础三维直线数组",
    "bitbybit.occt.shapes.solid.createSphere": "球体",
    "bitbybit.occt.shapes.solid.createSphere_description": "创建 OpenCASCADE 球体",
    "bitbybit.occt.shapes.solid.createCone": "圆锥体",
    "createCone": "创建圆锥体",
    "bitbybit.occt.shapes.solid.createCone_description": "创建 OpenCASCADE 圆锥体",
    "radius1": "半径1",
    "radius2": "半径2",
    "bitbybit.occt.shapes.solid.getSolidSurfaceArea": "获取实体表面积",
    "getSolidSurfaceArea": "获取实体表面积",
    "bitbybit.occt.shapes.solid.getSolidSurfaceArea_description": "获取实体的表面积",
    "bitbybit.occt.shapes.solid.getSolidVolume": "获取实体体积",
    "getSolidVolume": "获取实体体积",
    "bitbybit.occt.shapes.solid.getSolidVolume_description": "获取实体的体积",
    "bitbybit.occt.shapes.solid.getSolidsVolumes": "获取多个实体体积",
    "getSolidsVolumes": "获取多个实体体积",
    "bitbybit.occt.shapes.solid.getSolidsVolumes_description": "获取多个实体的体积",
    "bitbybit.occt.shapes.solid.getSolidCenterOfMass": "获取实体质心",
    "getSolidCenterOfMass": "获取实体质心",
    "bitbybit.occt.shapes.solid.getSolidCenterOfMass_description": "获取实体的质心",
    "bitbybit.occt.shapes.solid.getSolidsCentersOfMass": "获取多个实体质心",
    "getSolidsCentersOfMass": "获取多个实体质心",
    "bitbybit.occt.shapes.solid.getSolidsCentersOfMass_description": "获取多个实体的质心",
    "bitbybit.occt.shapes.solid.getSolids": "获取所有实体",
    "getSolids": "获取所有实体",
    "bitbybit.occt.shapes.solid.getSolids_description": "从形状中获取所有实体",
    "bitbybit.occt.shapes.solid.filterSolidPoints": "过滤实体内的点",
    "filterSolidPoints": "过滤实体内的点",
    "bitbybit.occt.shapes.solid.filterSolidPoints_description": "根据与实体的关系过滤点",
    "bitbybit.occt.shapes.compound.makeCompound": "创建复合体",
    "compound": "复合体",
    "makeCompound": "创建复合体",
    "bitbybit.occt.shapes.compound.makeCompound_description": "从多个形状创建复合体形状",
    "bitbybit.occt.shapes.compound.getShapesOfCompound": "获取复合体中的形状",
    "getShapesOfCompound": "获取复合体中的形状",
    "bitbybit.occt.shapes.compound.getShapesOfCompound_description": "从复合体中获取形状",
    "bitbybit.occt.shapes.shape.purgeInternalEdges": "清除内部边",
    "purgeInternalEdges": "清除内部边",
    "bitbybit.occt.shapes.shape.purgeInternalEdges_description": "从形状中移除内部边",
    "bitbybit.occt.shapes.shape.unifySameDomain": "合并同域元素",
    "unifySameDomain": "合并同域元素",
    "bitbybit.occt.shapes.shape.unifySameDomain_description": "合并同一域中的面和边",
    "unifyEdges": "合并边",
    "unifyFaces": "合并面",
    "concatBSplines": "连接B样条",
    "bitbybit.occt.shapes.shape.isClosed": "检查是否闭合",
    "bitbybit.occt.shapes.shape.isClosed_description": "检查形状是否闭合",
    "analysis": "分析",
    "bitbybit.occt.shapes.shape.isConvex": "检查是否凸",
    "isConvex": "检查是否凸",
    "bitbybit.occt.shapes.shape.isConvex_description": "检查形状是否为凸形",
    "bitbybit.occt.shapes.shape.isChecked": "检查是否已检查",
    "bitbybit.occt.shapes.shape.isChecked_description": "检查形状是否已检查",
    "bitbybit.occt.shapes.shape.isFree": "检查是否自由",
    "isFree": "检查是否自由",
    "bitbybit.occt.shapes.shape.isFree_description": "检查形状是否自由",
    "bitbybit.occt.shapes.shape.isInfinite": "检查是否无限",
    "isInfinite": "检查是否无限",
    "bitbybit.occt.shapes.shape.isInfinite_description": "检查形状是否无限",
    "bitbybit.occt.shapes.shape.isModified": "检查是否已修改",
    "isModified": "检查是否已修改",
    "bitbybit.occt.shapes.shape.isModified_description": "检查形状是否已修改",
    "bitbybit.occt.shapes.shape.isLocked": "检查是否锁定",
    "isLocked": "检查是否锁定",
    "bitbybit.occt.shapes.shape.isLocked_description": "检查形状是否锁定",
    "bitbybit.occt.shapes.shape.isNull": "检查是否为空",
    "isNull": "检查是否为空",
    "bitbybit.occt.shapes.shape.isNull_description": "检查形状是否为空",
    "bitbybit.occt.shapes.shape.isEqual": "检查是否相等",
    "isEqual": "检查是否相等",
    "bitbybit.occt.shapes.shape.isEqual_description": "检查形状是否与另一个形状相等",
    "otherShape": "另一个形状",
    "bitbybit.occt.shapes.shape.isNotEqual": "检查是否不相等",
    "isNotEqual": "检查是否不相等",
    "bitbybit.occt.shapes.shape.isNotEqual_description": "检查形状是否与另一个形状不同",
    "bitbybit.occt.shapes.shape.isPartner": "检查是否伙伴",
    "isPartner": "检查是否伙伴",
    "bitbybit.occt.shapes.shape.isPartner_description": "检查形状是否是另一个形状的伙伴",
    "bitbybit.occt.shapes.shape.isSame": "检查是否相同",
    "isSame": "检查是否相同",
    "bitbybit.occt.shapes.shape.isSame_description": "检查形状是否与另一个形状相同",
    "bitbybit.occt.shapes.shape.getOrientation": "获取方向",
    "getOrientation": "获取方向",
    "bitbybit.occt.shapes.shape.getOrientation_description": "获取形状的方向",
    "bitbybit.occt.shapes.shape.getShapeType": "获取形状类型",
    "getShapeType": "获取形状类型",
    "bitbybit.occt.shapes.shape.getShapeType_description": "获取形状的类型",
    "bitbybit.occt.geom.curves.geom2dEllipse": "二维椭圆几何",
    "geom": "几何",
    "curves": "曲线",
    "geom2dEllipse": "二维椭圆几何",
    "bitbybit.occt.geom.curves.geom2dEllipse_description": "创建用于建模的二维椭圆",
    "Base.Point2": "基础二维点",
    "Base.Vector2": "基础二维向量",
    "bitbybit.occt.geom.curves.geom2dTrimmedCurve": "二维修剪曲线几何",
    "geom2dTrimmedCurve": "二维修剪曲线几何",
    "bitbybit.occt.geom.curves.geom2dTrimmedCurve_description": "创建介于 u1 和 u2 之间的修剪曲线",
    "u1": "u1",
    "u2": "u2",
    "adjustPeriodic": "调整周期性",
    "bitbybit.occt.geom.curves.geom2dSegment": "二维线段几何",
    "geom2dSegment": "二维线段几何",
    "bitbybit.occt.geom.curves.geom2dSegment_description": "创建两点之间的二维曲线段",
    "bitbybit.occt.geom.curves.get2dPointFrom2dCurveOnParam": "从二维曲线上参数处获取二维点",
    "get2dPointFrom2dCurveOnParam": "从二维曲线上参数处获取二维点",
    "bitbybit.occt.geom.curves.get2dPointFrom2dCurveOnParam_description": "获取曲线上指定参数处的二维点",
    "bitbybit.occt.geom.curves.geomCircleCurve": "圆曲线几何",
    "geomCircleCurve": "圆曲线几何",
    "bitbybit.occt.geom.curves.geomCircleCurve_description": "创建圆几何曲线",
    "bitbybit.occt.geom.curves.geomEllipseCurve": "椭圆曲线几何",
    "geomEllipseCurve": "椭圆曲线几何",
    "bitbybit.occt.geom.curves.geomEllipseCurve_description": "创建椭圆几何曲线",
    "bitbybit.occt.geom.surfaces.cylindricalSurface": "圆柱面",
    "surfaces": "曲面",
    "cylindricalSurface": "圆柱面",
    "bitbybit.occt.geom.surfaces.cylindricalSurface_description": "创建用于建模的无限圆柱面",
    "bitbybit.occt.geom.surfaces.surfaceFromFace": "从面创建曲面",
    "surfaceFromFace": "从面创建曲面",
    "bitbybit.occt.geom.surfaces.surfaceFromFace_description": "从面创建曲面",
    "bitbybit.occt.fillets.filletEdges": "边圆角",
    "fillets": "圆角",
    "filletEdges": "边圆角",
    "bitbybit.occt.fillets.filletEdges_description": "对 OpenCASCADE 形状进行圆角处理",
    "3d fillets": "三维圆角",
    "radiusList": "半径列表",
    "indexes": "索引",
    "bitbybit.occt.fillets.filletEdgesList": "列表边圆角",
    "filletEdgesList": "列表边圆角",
    "bitbybit.occt.fillets.filletEdgesList_description": "使用不同半径对边进行圆角处理",
    "edges": "边",
    "bitbybit.occt.fillets.filletEdgesListOneRadius": "列表边单半径圆角",
    "filletEdgesListOneRadius": "列表边单半径圆角",
    "bitbybit.occt.fillets.filletEdgesListOneRadius_description": "使用单一半径对边进行圆角处理",
    "bitbybit.occt.fillets.filletEdgeVariableRadius": "边变半径圆角",
    "filletEdgeVariableRadius": "边变半径圆角",
    "bitbybit.occt.fillets.filletEdgeVariableRadius_description": "在 U 参数上使用可变半径对边进行圆角处理",
    "paramsU": "U参数列表",
    "bitbybit.occt.fillets.filletEdgesSameVariableRadius": "多边同变半径圆角",
    "filletEdgesSameVariableRadius": "多边同变半径圆角",
    "bitbybit.occt.fillets.filletEdgesSameVariableRadius_description": "使用相同的可变半径对多条边进行圆角处理",
    "bitbybit.occt.fillets.filletEdgesVariableRadius": "多边变半径圆角",
    "filletEdgesVariableRadius": "多边变半径圆角",
    "bitbybit.occt.fillets.filletEdgesVariableRadius_description": "在参数上使用可变半径对多条边进行圆角处理",
    "radiusLists": "半径列表的列表",
    "paramsULists": "U参数列表的列表",
    "bitbybit.occt.fillets.fillet3DWire": "三维线框圆角",
    "fillet3DWire": "三维线框圆角",
    "bitbybit.occt.fillets.fillet3DWire_description": "沿引导方向对三维线框进行圆角处理",
    "bitbybit.occt.fillets.fillet3DWires": "三维多线框圆角",
    "fillet3DWires": "三维多线框圆角",
    "bitbybit.occt.fillets.fillet3DWires_description": "沿引导方向对多个三维线框进行圆角处理",
    "bitbybit.occt.fillets.chamferEdges": "边倒角",
    "chamferEdges": "边倒角",
    "bitbybit.occt.fillets.chamferEdges_description": "对 OpenCASCADE 形状的边进行倒角处理",
    "3d chamfers": "三维倒角",
    "distanceList": "距离列表",
    "bitbybit.occt.fillets.chamferEdgesList": "列表边倒角",
    "chamferEdgesList": "列表边倒角",
    "bitbybit.occt.fillets.chamferEdgesList_description": "使用不同距离对边进行倒角处理",
    "bitbybit.occt.fillets.chamferEdgeTwoDistances": "边双距离倒角",
    "chamferEdgeTwoDistances": "边双距离倒角",
    "bitbybit.occt.fillets.chamferEdgeTwoDistances_description": "使用两个距离对边进行倒角处理",
    "F": "面",
    "distance1": "距离1",
    "distance2": "距离2",
    "bitbybit.occt.fillets.chamferEdgesTwoDistances": "多边双距离倒角",
    "chamferEdgesTwoDistances": "多边双距离倒角",
    "bitbybit.occt.fillets.chamferEdgesTwoDistances_description": "使用两个距离对多条边进行倒角处理",
    "faces": "面",
    "F[]": "面数组",
    "bitbybit.occt.fillets.chamferEdgesTwoDistancesLists": "多边双距离列表倒角",
    "chamferEdgesTwoDistancesLists": "多边双距离列表倒角",
    "bitbybit.occt.fillets.chamferEdgesTwoDistancesLists_description": "使用两个距离列表对多条边进行倒角处理",
    "distances1": "距离列表1",
    "distances2": "距离列表2",
    "bitbybit.occt.fillets.chamferEdgeDistAngle": "边距离角度倒角",
    "chamferEdgeDistAngle": "边距离角度倒角",
    "bitbybit.occt.fillets.chamferEdgeDistAngle_description": "使用距离和角度对边进行倒角处理",
    "bitbybit.occt.fillets.chamferEdgesDistAngle": "多边距离角度倒角",
    "chamferEdgesDistAngle": "多边距离角度倒角",
    "bitbybit.occt.fillets.chamferEdgesDistAngle_description": "使用距离和角度对多条边进行倒角处理",
    "bitbybit.occt.fillets.chamferEdgesDistsAngles": "多边距离角度列表倒角",
    "chamferEdgesDistsAngles": "多边距离角度列表倒角",
    "bitbybit.occt.fillets.chamferEdgesDistsAngles_description": "使用距离列表和角度列表对多条边进行倒角处理",
    "distances": "距离",
    "bitbybit.occt.fillets.fillet2d": "二维圆角",
    "fillet2d": "二维圆角",
    "bitbybit.occt.fillets.fillet2d_description": "对二维线框或面进行圆角处理",
    "2d fillets": "二维圆角",
    "bitbybit.occt.fillets.fillet2dShapes": "二维形状圆角",
    "fillet2dShapes": "二维形状圆角",
    "bitbybit.occt.fillets.fillet2dShapes_description": "对二维线框或面进行圆角处理",
    "bitbybit.occt.fillets.filletTwoEdgesInPlaneIntoAWire": "平面内两边圆角成线框",
    "filletTwoEdgesInPlaneIntoAWire": "平面内两边圆角成线框",
    "bitbybit.occt.fillets.filletTwoEdgesInPlaneIntoAWire_description": "将两个平面边圆角处理成线框",
    "edge1": "边1",
    "edge2": "边2",
    "planeOrigin": "平面原点",
    "planeDirection": "平面方向",
    "solution": "解",
    "bitbybit.occt.transforms.transform": "变换",
    "bitbybit.occt.transforms.transform_description": "变换形状",
    "on single shape": "对单个形状",
    "rotationAxis": "旋转轴",
    "rotationAngle": "旋转角度",
    "scaleFactor": "缩放因子",
    "bitbybit.occt.transforms.rotate": "旋转",
    "bitbybit.occt.transforms.rotate_description": "旋转形状",
    "bitbybit.occt.transforms.rotateAroundCenter": "绕中心旋转",
    "rotateAroundCenter": "绕中心旋转",
    "bitbybit.occt.transforms.rotateAroundCenter_description": "绕中心旋转形状",
    "bitbybit.occt.transforms.align": "对齐",
    "bitbybit.occt.transforms.align_description": "对齐形状",
    "fromOrigin": "源原点",
    "fromDirection": "源方向",
    "toOrigin": "目标原点",
    "toDirection": "目标方向",
    "bitbybit.occt.transforms.alignAndTranslate": "对齐并平移",
    "alignAndTranslate": "对齐并平移",
    "bitbybit.occt.transforms.alignAndTranslate_description": "对齐并平移形状",
    "bitbybit.occt.transforms.translate": "平移",
    "bitbybit.occt.transforms.translate_description": "平移形状",
    "bitbybit.occt.transforms.scale": "缩放",
    "bitbybit.occt.transforms.scale_description": "缩放形状",
    "bitbybit.occt.transforms.scale3d": "三维缩放",
    "scale3d": "三维缩放",
    "bitbybit.occt.transforms.scale3d_description": "在三维空间中缩放形状",
    "bitbybit.occt.transforms.mirror": "镜像",
    "mirror": "镜像",
    "bitbybit.occt.transforms.mirror_description": "镜像形状",
    "bitbybit.occt.transforms.mirrorAlongNormal": "沿法线镜像",
    "mirrorAlongNormal": "沿法线镜像",
    "bitbybit.occt.transforms.mirrorAlongNormal_description": "沿法线和原点镜像形状",
    "normal": "法线",
    "bitbybit.occt.transforms.transformShapes": "变换多个形状",
    "transformShapes": "变换多个形状",
    "bitbybit.occt.transforms.transformShapes_description": "变换形状数组",
    "on shapes": "对多个形状",
    "rotationAxes": "旋转轴列表",
    "rotationAngles": "旋转角度列表",
    "scaleFactors": "缩放因子列表",
    "bitbybit.occt.transforms.rotateShapes": "旋转多个形状",
    "rotateShapes": "旋转多个形状",
    "bitbybit.occt.transforms.rotateShapes_description": "旋转多个形状",
    "axes": "轴",
    "bitbybit.occt.transforms.rotateAroundCenterShapes": "绕中心旋转多个形状",
    "rotateAroundCenterShapes": "绕中心旋转多个形状",
    "bitbybit.occt.transforms.rotateAroundCenterShapes_description": "绕中心和轴旋转多个形状",
    "centers": "中心点列表",
    "bitbybit.occt.transforms.alignShapes": "对齐多个形状",
    "alignShapes": "对齐多个形状",
    "bitbybit.occt.transforms.alignShapes_description": "对齐多个形状",
    "fromOrigins": "源原点列表",
    "fromDirections": "源方向列表",
    "toOrigins": "目标原点列表",
    "toDirections": "目标方向列表",
    "bitbybit.occt.transforms.alignAndTranslateShapes": "对齐并平移多个形状",
    "alignAndTranslateShapes": "对齐并平移多个形状",
    "bitbybit.occt.transforms.alignAndTranslateShapes_description": "对齐并平移多个形状",
    "directions": "方向列表",
    "bitbybit.occt.transforms.translateShapes": "平移多个形状",
    "translateShapes": "平移多个形状",
    "bitbybit.occt.transforms.translateShapes_description": "平移多个形状",
    "bitbybit.occt.transforms.scaleShapes": "缩放多个形状",
    "scaleShapes": "缩放多个形状",
    "bitbybit.occt.transforms.scaleShapes_description": "缩放多个形状",
    "factors": "因子列表",
    "bitbybit.occt.transforms.scale3dShapes": "三维缩放多个形状",
    "scale3dShapes": "三维缩放多个形状",
    "bitbybit.occt.transforms.scale3dShapes_description": "在三维空间中缩放多个形状",
    "scales": "缩放比例",
    "bitbybit.occt.transforms.mirrorShapes": "镜像多个形状",
    "mirrorShapes": "镜像多个形状",
    "bitbybit.occt.transforms.mirrorShapes_description": "镜像多个形状",
    "origins": "原点列表",
    "bitbybit.occt.transforms.mirrorAlongNormalShapes": "沿法线镜像多个形状",
    "mirrorAlongNormalShapes": "沿法线镜像多个形状",
    "bitbybit.occt.transforms.mirrorAlongNormalShapes_description": "沿法线和原点镜像多个形状",
    "normals": "法线列表",
    "bitbybit.occt.operations.loft": "放样",
    "operations": "操作",
    "loft": "放样",
    "bitbybit.occt.operations.loft_description": "将线框放样成壳体",
    "lofts": "放样操作",
    "makeSolid": "生成实体",
    "bitbybit.occt.operations.loftAdvanced": "高级放样",
    "loftAdvanced": "高级放样",
    "bitbybit.occt.operations.loftAdvanced_description": "带选项将线框放样成壳体",
    "straight": "直线型",
    "nrPeriodicSections": "周期截面数",
    "useSmoothing": "使用平滑",
    "maxUDegree": "最大U次数",
    "parType": "参数化类型",
    "approxParametrizationTypeEnum": "近似参数化类型枚举",
    "startVertex": "起始顶点",
    "endVertex": "结束顶点",
    "bitbybit.occt.operations.closestPointsBetweenTwoShapes": "两形状间最近点",
    "closestPointsBetweenTwoShapes": "两形状间最近点",
    "bitbybit.occt.operations.closestPointsBetweenTwoShapes_description": "计算两个形状之间的最近点",
    "closest pts": "最近点",
    "shape1": "形状1",
    "shape2": "形状2",
    "bitbybit.occt.operations.closestPointsOnShapeFromPoints": "点到形状的最近点",
    "closestPointsOnShapeFromPoints": "点到形状的最近点",
    "bitbybit.occt.operations.closestPointsOnShapeFromPoints_description": "计算从点到形状的最近点",
    "bitbybit.occt.operations.closestPointsOnShapesFromPoints": "点到多个形状的最近点",
    "closestPointsOnShapesFromPoints": "点到多个形状的最近点",
    "bitbybit.occt.operations.closestPointsOnShapesFromPoints_description": "计算从点到多个形状的最近点",
    "bitbybit.occt.operations.distancesToShapeFromPoints": "点到形状的距离",
    "distancesToShapeFromPoints": "点到形状的距离",
    "bitbybit.occt.operations.distancesToShapeFromPoints_description": "计算从点到形状的距离",
    "bitbybit.occt.operations.boundingBoxOfShape": "形状的边界框",
    "boundingBoxOfShape": "形状的边界框",
    "bitbybit.occt.operations.boundingBoxOfShape_description": "计算形状的边界框参数",
    "bitbybit.occt.operations.boundingBoxMinOfShape": "形状的边界框最小值",
    "boundingBoxMinOfShape": "形状的边界框最小值",
    "bitbybit.occt.operations.boundingBoxMinOfShape_description": "获取形状边界框的最小点",
    "bitbybit.occt.operations.boundingBoxMaxOfShape": "形状的边界框最大值",
    "boundingBoxMaxOfShape": "形状的边界框最大值",
    "bitbybit.occt.operations.boundingBoxMaxOfShape_description": "获取形状边界框的最大点",
    "bitbybit.occt.operations.boundingBoxCenterOfShape": "形状的边界框中心",
    "boundingBoxCenterOfShape": "形状的边界框中心",
    "bitbybit.occt.operations.boundingBoxCenterOfShape_description": "获取形状边界框的中心点",
    "bitbybit.occt.operations.boundingBoxSizeOfShape": "形状的边界框尺寸",
    "boundingBoxSizeOfShape": "形状的边界框尺寸",
    "bitbybit.occt.operations.boundingBoxSizeOfShape_description": "获取形状边界框的尺寸点",
    "bitbybit.occt.operations.boundingBoxShapeOfShape": "形状的边界框形状",
    "boundingBoxShapeOfShape": "形状的边界框形状",
    "bitbybit.occt.operations.boundingBoxShapeOfShape_description": "获取形状的边界框形状",
    "bitbybit.occt.operations.boundingSphereOfShape": "形状的边界球",
    "boundingSphereOfShape": "形状的边界球",
    "bitbybit.occt.operations.boundingSphereOfShape_description": "计算形状的边界球参数",
    "bitbybit.occt.operations.boundingSphereCenterOfShape": "形状的边界球中心",
    "boundingSphereCenterOfShape": "形状的边界球中心",
    "bitbybit.occt.operations.boundingSphereCenterOfShape_description": "获取形状边界球的中心点",
    "bitbybit.occt.operations.boundingSphereRadiusOfShape": "形状的边界球半径",
    "boundingSphereRadiusOfShape": "形状的边界球半径",
    "bitbybit.occt.operations.boundingSphereRadiusOfShape_description": "获取形状边界球的半径",
    "bitbybit.occt.operations.boundingSphereShapeOfShape": "形状的边界球形状",
    "boundingSphereShapeOfShape": "形状的边界球形状",
    "bitbybit.occt.operations.boundingSphereShapeOfShape_description": "获取形状的边界球形状",
    "bitbybit.occt.operations.extrude": "拉伸",
    "extrude": "拉伸",
    "bitbybit.occt.operations.extrude_description": "沿方向拉伸形状",
    "extrusions": "拉伸操作",
    "bitbybit.occt.operations.extrudeShapes": "拉伸多个形状",
    "extrudeShapes": "拉伸多个形状",
    "bitbybit.occt.operations.extrudeShapes_description": "沿方向拉伸多个形状",
    "bitbybit.occt.operations.splitShapeWithShapes": "用形状分割形状",
    "splitShapeWithShapes": "用形状分割形状",
    "bitbybit.occt.operations.splitShapeWithShapes_description": "用多个形状分割一个形状",
    "divisions": "分割结果",
    "localFuzzyTolerance": "局部模糊容差",
    "nonDestructive": "非破坏性",
    "bitbybit.occt.operations.revolve": "旋转成形",
    "revolve": "旋转成形",
    "bitbybit.occt.operations.revolve_description": "绕方向旋转形状成形",
    "revolutions": "旋转成形操作",
    "copy": "复制",
    "bitbybit.occt.operations.rotatedExtrude": "旋转拉伸",
    "rotatedExtrude": "旋转拉伸",
    "bitbybit.occt.operations.rotatedExtrude_description": "对形状执行旋转拉伸",
    "bitbybit.occt.operations.pipe": "管道",
    "pipe": "管道",
    "bitbybit.occt.operations.pipe_description": "沿线框生成管道形状",
    "pipeing": "管道生成",
    "bitbybit.occt.operations.pipePolylineWireNGon": "N边形截面沿折线管道",
    "pipePolylineWireNGon": "N边形截面沿折线管道",
    "bitbybit.occt.operations.pipePolylineWireNGon_description": "使用 N 边形轮廓沿折线线框生成管道",
    "trihedronEnum": "三面角枚举",
    "geomFillTrihedronEnum": "几何填充三面角枚举",
    "forceApproxC1": "强制近似C1连续",
    "bitbybit.occt.operations.pipeWiresCylindrical": "圆柱形沿多线框管道",
    "pipeWiresCylindrical": "圆柱形沿多线框管道",
    "bitbybit.occt.operations.pipeWiresCylindrical_description": "使用圆柱形状沿多个线框生成管道",
    "bitbybit.occt.operations.pipeWireCylindrical": "圆柱形沿线框管道",
    "pipeWireCylindrical": "圆柱形沿线框管道",
    "bitbybit.occt.operations.pipeWireCylindrical_description": "使用圆柱形状沿线框生成管道",
    "bitbybit.occt.operations.offset": "偏移",
    "bitbybit.occt.operations.offset_description": "偏移形状",
    "offsets": "偏移操作",
    "bitbybit.occt.operations.offsetAdv": "高级偏移",
    "offsetAdv": "高级偏移",
    "bitbybit.occt.operations.offsetAdv_description": "带高级选项的偏移",
    "joinType": "连接类型",
    "joinTypeEnum": "连接类型枚举",
    "removeIntEdges": "移除内部边",
    "bitbybit.occt.operations.makeThickSolidSimple": "简单加厚实体",
    "makeThickSolidSimple": "简单加厚实体",
    "bitbybit.occt.operations.makeThickSolidSimple_description": "将形状加厚成实体",
    "bitbybit.occt.operations.makeThickSolidByJoin": "通过连接加厚实体",
    "makeThickSolidByJoin": "通过连接加厚实体",
    "bitbybit.occt.operations.makeThickSolidByJoin_description": "通过连接将形状加厚成实体",
    "intersection": "交集",
    "selfIntersection": "自相交",
    "bitbybit.occt.operations.slice": "切片",
    "slice": "切片",
    "bitbybit.occt.operations.slice_description": "切割形状",
    "bitbybit.occt.operations.sliceInStepPattern": "按步进模式切片",
    "sliceInStepPattern": "按步进模式切片",
    "bitbybit.occt.operations.sliceInStepPattern_description": "按步进模式切割形状",
    "steps": "步数",
    "bitbybit.occt.operations.offset3DWire": "偏移三维线框",
    "offset3DWire": "偏移三维线框",
    "bitbybit.occt.operations.offset3DWire_description": "偏移三维线框",
    "bitbybit.occt.booleans.union": "并集",
    "booleans": "布尔运算",
    "union": "并集",
    "bitbybit.occt.booleans.union_description": "合并对象",
    "keepEdges": "保留边",
    "bitbybit.occt.booleans.difference": "差集",
    "difference": "差集",
    "bitbybit.occt.booleans.difference_description": "执行布尔差集运算",
    "bitbybit.occt.booleans.intersection": "交集",
    "bitbybit.occt.booleans.intersection_description": "执行布尔交集运算",
    "bitbybit.occt.shapeFix.basicShapeRepair": "基础形状修复",
    "shapeFix": "形状修复",
    "basicShapeRepair": "基础形状修复",
    "bitbybit.occt.shapeFix.basicShapeRepair_description": "修复形状",
    "maxTolerance": "最大容差",
    "minTolerance": "最小容差",
    "bitbybit.occt.shapeFix.fixSmallEdgeOnWire": "修复线框上的小边",
    "fixSmallEdgeOnWire": "修复线框上的小边",
    "bitbybit.occt.shapeFix.fixSmallEdgeOnWire_description": "修复线框上的小边",
    "lockvtx": "锁定顶点",
    "precsmall": "小精度",
    "bitbybit.occt.shapeFix.fixEdgeOrientationsAlongWire": "修复沿线框的边方向",
    "fixEdgeOrientationsAlongWire": "修复沿线框的边方向",
    "bitbybit.occt.shapeFix.fixEdgeOrientationsAlongWire_description": "修复沿线框的边方向",
    "bitbybit.occt.io.saveShapeSTEP": "保存形状为STEP",
    "saveShapeSTEP": "保存形状为STEP",
    "bitbybit.occt.io.saveShapeSTEP_description": "保存STEP文件",
    "adjustYtoZ": "调整Y到Z",
    "tryDownload": "尝试下载",
    "bitbybit.occt.io.saveShapeSTEPAndReturn": "保存形状为STEP并返回",
    "saveShapeSTEPAndReturn": "保存形状为STEP并返回",
    "bitbybit.occt.io.saveShapeSTEPAndReturn_description": "保存STEP文件并返回文本内容",
    "bitbybit.occt.io.saveShapeStl": "保存形状为STL",
    "saveShapeStl": "保存形状为STL",
    "bitbybit.occt.io.saveShapeStl_description": "保存STL文件",
    "binary": "二进制",
    "bitbybit.occt.io.saveShapeStlAndReturn": "保存形状为STL并返回",
    "saveShapeStlAndReturn": "保存形状为STL并返回",
    "bitbybit.occt.io.saveShapeStlAndReturn_description": "保存STL文件并返回内容",
    "bitbybit.occt.io.loadSTEPorIGES": "加载STEP或IGES",
    "loadSTEPorIGES": "加载STEP或IGES",
    "bitbybit.occt.io.loadSTEPorIGES_description": "导入STEP或IGES文件",
    "adjustZtoY": "调整Z到Y",
    "bitbybit.occt.io.loadSTEPorIGESFromText": "从文本加载STEP或IGES",
    "loadSTEPorIGESFromText": "从文本加载STEP或IGES",
    "bitbybit.occt.io.loadSTEPorIGESFromText_description": "从文本导入STEP或IGES",
    "fileType": "文件类型",
    "fileTypeEnum": "文件类型枚举",
    "bitbybit.advanced.text3d.create": "三维文本",
    "advanced": "高级",
    "text3d": "三维文本",
    "bitbybit.advanced.text3d.create_description": "创建三维文本",
    "fontType": "字体类型",
    "fontsEnum": "字体枚举",
    "fontVariant": "字体变体",
    "fontVariantsEnum": "字体变体枚举",
    "Inputs.Base.Vector3": "输入基础三维向量",
    "originAlignment": "原点对齐",
    "recAlignmentEnum": "矩形对齐枚举",
    "bitbybit.advanced.text3d.createTextOnFace": "在面上创建文本",
    "createTextOnFace": "在面上创建文本",
    "bitbybit.advanced.text3d.createTextOnFace_description": "在面上创建三维文本",
    "facePlanar": "平面",
    "faceTextVar": "面文本变量",
    "faceTextVarEnum": "面文本变量枚举",
    "originParamU": "原点U参数",
    "originParamV": "原点V参数",
    "bitbybit.advanced.text3d.createTextsOnFace": "在面上创建多个文本",
    "createTextsOnFace": "在面上创建多个文本",
    "bitbybit.advanced.text3d.createTextsOnFace_description": "在面上创建多个三维文本",
    "definitions": "定义",
    "Text3DFaceDefinitionDto[]": "三维文本面定义数据传输对象数组",
    "bitbybit.advanced.text3d.definition3dTextOnFace": "面上的三维文本定义",
    "definition3dTextOnFace": "面上的三维文本定义",
    "bitbybit.advanced.text3d.definition3dTextOnFace_description": "为面定义创建三维文本",
    "bitbybit.advanced.text3d.getCompoundShape": "获取复合体形状",
    "getCompoundShape": "获取复合体形状",
    "bitbybit.advanced.text3d.getCompoundShape_description": "获取三维文本的复合体形状",
    "model": "模型",
    "Text3DData<T>": "三维文本数据 T",
    "bitbybit.advanced.text3d.getCharacterShape": "获取字符形状",
    "getCharacterShape": "获取字符形状",
    "bitbybit.advanced.text3d.getCharacterShape_description": "按索引获取字符形状",
    "bitbybit.advanced.text3d.getCharacterShapes": "获取字符形状列表",
    "getCharacterShapes": "获取字符形状列表",
    "bitbybit.advanced.text3d.getCharacterShapes_description": "获取三维文本的字符形状",
    "bitbybit.advanced.text3d.getCharacterCenterCoordinates": "获取字符中心坐标",
    "getCharacterCenterCoordinates": "获取字符中心坐标",
    "bitbybit.advanced.text3d.getCharacterCenterCoordinates_description": "获取字符的中心坐标",
    "bitbybit.advanced.text3d.getFaceCutout": "获取面切口",
    "getFaceCutout": "获取面切口",
    "bitbybit.advanced.text3d.getFaceCutout_description": "从面上的三维文本获取面切口",
    "get from face": "从面获取",
    "bitbybit.advanced.text3d.getAllFacesOfCutout": "获取切口的所有面",
    "getAllFacesOfCutout": "获取切口的所有面",
    "bitbybit.advanced.text3d.getAllFacesOfCutout_description": "从三维文本获取所有面切口",
    "bitbybit.advanced.text3d.getCutoutsInsideCharacters": "获取字符内部切口",
    "getCutoutsInsideCharacters": "获取字符内部切口",
    "bitbybit.advanced.text3d.getCutoutsInsideCharacters_description": "从三维文本获取字符面切口",
    "bitbybit.advanced.text3d.getAdvanceWidth": "获取进距宽度",
    "getAdvanceWidth": "获取进距宽度",
    "bitbybit.advanced.text3d.getAdvanceWidth_description": "获取进距宽度",
    "dimensions": "尺寸",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.createPyramidSimple": "简单金字塔",
    "facePatterns": "面图案",
    "pyramidSimple": "简单金字塔",
    "createPyramidSimple": "创建简单金字塔",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.createPyramidSimple_description": "在面上创建简单金字塔图案",
    "uNumber": "U方向数量",
    "vNumber": "V方向数量",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.createPyramidSimpleAffectors": "带影响器的简单金字塔",
    "createPyramidSimpleAffectors": "创建带影响器的简单金字塔",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.createPyramidSimpleAffectors_description": "创建带影响器的金字塔图案",
    "affectorPoints": "影响点",
    "Inputs.Base.Point3[]": "输入基础三维点数组",
    "affectorRadiusList": "影响半径列表",
    "affectorFactors": "影响因子",
    "defaultHeight": "默认高度",
    "affectMinHeight": "影响最小高度",
    "affectMaxHeight": "影响最大高度",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShape": "获取复合体形状",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShape_description": "获取金字塔的复合体形状",
    "get shapes": "获取形状",
    "PyramidSimpleData<T>": "简单金字塔数据 T",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapeOnFace": "获取面上的复合体形状",
    "getCompoundShapeOnFace": "获取面上的复合体形状",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapeOnFace_description": "获取指定面上的复合体形状",
    "faceIndex": "面索引",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapeCellOnFace": "获取面上单元格的复合体形状",
    "getCompoundShapeCellOnFace": "获取面上单元格的复合体形状",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapeCellOnFace_description": "按索引获取面上金字塔形状",
    "uIndex": "U索引",
    "vIndex": "V索引",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidCells": "获取所有金字塔单元格",
    "getAllPyramidCells": "获取所有金字塔单元格",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidCells_description": "获取所有金字塔单元格",
    "get cells": "获取单元格",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidCellsOnFace": "获取面上的所有金字塔单元格",
    "getAllPyramidCellsOnFace": "获取面上的所有金字塔单元格",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidCellsOnFace_description": "获取指定面上的金字塔单元格",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFace": "获取面上所有U方向金字塔单元格",
    "getAllPyramidUCellsOnFace": "获取面上所有U方向金字塔单元格",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFace_description": "获取指定面上的U方向金字塔单元格",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFaceAtU": "获取面上U处所有金字塔单元格",
    "getAllPyramidUCellsOnFaceAtU": "获取面上U处所有金字塔单元格",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFaceAtU_description": "获取指定面上U参数处的金字塔单元格",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFaceAtV": "获取面上V处所有金字塔单元格",
    "getAllPyramidUCellsOnFaceAtV": "获取面上V处所有金字塔单元格",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getAllPyramidUCellsOnFaceAtV_description": "获取指定面上V参数处的金字塔单元格",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCellOnIndex": "按索引获取单元格",
    "getCellOnIndex": "按索引获取单元格",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCellOnIndex_description": "在指定面的U和V索引处获取金字塔单元格",
    "get cell": "获取单元格",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getTopPointsOfCells": "获取单元格顶点",
    "getTopPointsOfCells": "获取单元格顶点",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getTopPointsOfCells_description": "获取单元格的顶点",
    "get from cells": "从单元格获取",
    "cells": "单元格",
    "PyramidSimpleCellPart<T>[]": "简单金字塔单元格部分 T 数组",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCenterPointsOfCells": "获取单元格中心点",
    "getCenterPointsOfCells": "获取单元格中心点",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCenterPointsOfCells_description": "获取单元格的中心点",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerPointsOfCells": "获取单元格角点",
    "getCornerPointsOfCells": "获取单元格角点",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerPointsOfCells_description": "获取单元格的角点",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerPointOfCells": "获取单元格角点",
    "getCornerPointOfCells": "获取单元格角点",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerPointOfCells_description": "获取单元格的角点",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerNormalOfCells": "获取单元格角法线",
    "getCornerNormalOfCells": "获取单元格角法线",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerNormalOfCells_description": "获取单元格的角法线",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerNormalsOfCells": "获取单元格角法线列表",
    "getCornerNormalsOfCells": "获取单元格角法线列表",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCornerNormalsOfCells_description": "获取单元格的角法线列表",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapesOfCells": "获取单元格复合体形状",
    "getCompoundShapesOfCells": "获取单元格复合体形状",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getCompoundShapesOfCells_description": "获取金字塔单元格的复合体形状",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getFaceShapesOfCells": "获取单元格面形状",
    "getFaceShapesOfCells": "获取单元格面形状",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getFaceShapesOfCells_description": "获取金字塔单元格的面形状",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getWireShapesOfCells": "获取单元格线框形状",
    "getWireShapesOfCells": "获取单元格线框形状",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getWireShapesOfCells_description": "获取金字塔单元格的线框形状",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getStartPolylineWireU": "获取起始U折线线框",
    "getStartPolylineWireU": "获取起始U折线线框",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getStartPolylineWireU_description": "获取沿起始U边的折线线框",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getEndPolylineWireU": "获取结束U折线线框",
    "getEndPolylineWireU": "获取结束U折线线框",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getEndPolylineWireU_description": "获取沿结束U边的折线线框",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getStartPolylineWireV": "获取起始V折线线框",
    "getStartPolylineWireV": "获取起始V折线线框",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getStartPolylineWireV_description": "获取沿起始V边的折线线框",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getEndPolylineWireV": "获取结束V折线线框",
    "getEndPolylineWireV": "获取结束V折线线框",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getEndPolylineWireV_description": "获取沿结束V边的折线线框",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getPolylineWiresUCompound": "获取U方向折线线框复合体",
    "getPolylineWiresUCompound": "获取U方向折线线框复合体",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getPolylineWiresUCompound_description": "获取沿U方向的折线线框",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getPolylineWiresVCompound": "获取V方向折线线框复合体",
    "getPolylineWiresVCompound": "获取V方向折线线框复合体",
    "bitbybit.advanced.patterns.facePatterns.pyramidSimple.getPolylineWiresVCompound_description": "获取沿V方向的折线线框",
    "bitbybit.things.kidsCorner.birdhouses.wingtipVilla.create": "翼尖别墅",
    "things": "物品",
    "kidsCorner": "儿童角",
    "birdhouses": "鸟舍",
    "wingtipVilla": "翼尖别墅",
    "bitbybit.things.kidsCorner.birdhouses.wingtipVilla.create_description": "创建翼尖别墅鸟舍",
    "birdhouse": "鸟舍",
    "interiorWidth": "内部宽度",
    "interiorLength": "内部长度",
    "interiorHeight": "内部高度",
    "holeDiameter": "孔直径",
    "holeDistToBottom": "孔到底部距离",
    "stickLength": "栖木长度",
    "stickDiameter": "栖木直径",
    "baseAttachmentHeight": "底部连接高度",
    "roofOverhang": "屋顶悬挑",
    "chimneyHeight": "烟囱高度",
    "Inputs.Base.Point3": "输入基础三维点",
    "bitbybit.things.kidsCorner.birdhouses.chirpyChalet.create": "欢快木屋",
    "chirpyChalet": "欢快木屋",
    "bitbybit.things.kidsCorner.birdhouses.chirpyChalet.create_description": "创建欢快木屋鸟舍",
    "roofAngle": "屋顶角度",
    "bitbybit.things.threeDPrinting.vases.serenitySwirl.create": "宁静漩涡",
    "threeDPrinting": "三维打印",
    "vases": "花瓶",
    "serenitySwirl": "宁静漩涡",
    "bitbybit.things.threeDPrinting.vases.serenitySwirl.create_description": "创建宁静漩涡花瓶",
    "swirl": "漩涡",
    "addRadiusNarrow": "添加窄半径",
    "addRadiusWide": "添加宽半径",
    "addMiddleHeight": "添加中部高度",
    "addTopHeight": "添加顶部高度",
    "bitbybit.things.threeDPrinting.vases.arabicArchway.create": "阿拉伯拱门",
    "arabicArchway": "阿拉伯拱门",
    "bitbybit.things.threeDPrinting.vases.arabicArchway.create_description": "创建阿拉伯拱门花瓶",
    "profilePoints": "轮廓点",
    "nrOfSides": "边数",
    "nrOfVerticalArches": "垂直拱门数",
    "archCenterThickness": "拱门中心厚度",
    "edgesThickness": "边缘厚度",
    "baseHeight": "基座高度",
    "patchHoles": "修补孔洞",
    "lod": "细节层次",
    "Things.Enums.lodEnum": "物品枚举细节层次枚举",
    "bitbybit.things.threeDPrinting.medals.eternalLove.create": "永恒之爱",
    "medals": "奖章",
    "eternalLove": "永恒之爱",
    "bitbybit.things.threeDPrinting.medals.eternalLove.create_description": "创建永恒之爱奖章",
    "textHeading": "标题文本",
    "textName": "名称文本",
    "fullModel": "完整模型",
    "decorationThickness": "装饰厚度",
    "bitbybit.things.threeDPrinting.cups.calmCup.create": "宁静杯",
    "cups": "杯子",
    "calmCup": "宁静杯",
    "bitbybit.things.threeDPrinting.cups.calmCup.create_description": "创建宁静杯模型",
    "radiusTopOffset": "顶部半径偏移",
    "fillet": "圆角",
    "nrOfHandles": "把手数量",
    "handleDist": "把手距离",
    "bitbybit.things.threeDPrinting.cups.dragonCup.create": "龙杯",
    "dragonCup": "龙杯",
    "bitbybit.things.threeDPrinting.cups.dragonCup.create_description": "创建龙杯模型",
    "radiusMidOffset": "中部半径偏移",
    "rotationTopAngle": "顶部旋转角度",
    "rotationMidAngle": "中部旋转角度",
    "nrSkinCellsVertical": "垂直表皮单元格数",
    "nrSkinCellsHorizontal": "水平表皮单元格数",
    "nrSkinCellDivisionsTop": "顶部表皮单元格分割数",
    "nrSkinCellDivisionsBottom": "底部表皮单元格分割数",
    "skinCellOuterHeight": "表皮单元格外高",
    "skinCellInnerHeight": "表皮单元格内高",
    "skinCellBottomHeight": "表皮单元格底高",
    "skinCellTopHeight": "表皮单元格顶高",
    "bottomThickness": "底部厚度",
    "bitbybit.things.threeDPrinting.cups.dragonCup.getCompoundShape": "获取复合体形状",
    "bitbybit.things.threeDPrinting.cups.dragonCup.getCompoundShape_description": "获取龙杯的复合体形状",
    "DragonCupData<T>": "龙杯数据 T",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.create": "手机巢",
    "desktop": "桌面用品",
    "phoneNest": "手机巢",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.create_description": "创建手机巢模型",
    "heightBottom": "底部高度",
    "heightTop": "顶部高度",
    "widthBack": "背部宽度",
    "widthFront": "前部宽度",
    "backOffset": "背部偏移",
    "applyOrnaments": "应用装饰",
    "filletRadius": "圆角半径",
    "phoneHeight": "手机高度",
    "phoneWidth": "手机宽度",
    "phoneThickness": "手机厚度",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.getCompoundShape": "获取复合体形状",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.getCompoundShape_description": "获取手机巢的复合体形状",
    "PhoneNestData<T>": "手机巢数据 T",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.drawOptions": "绘制选项",
    "drawOptions": "绘制选项",
    "bitbybit.things.threeDPrinting.desktop.phoneNest.drawOptions_description": "创建模型的绘制选项",
    "mainMaterial": "主材质",
    "phoneMaterial": "手机材质",
    "Inputs.Base.Color": "输入基础颜色",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.create": "水滴手机支架",
    "laserCutting": "激光切割",
    "gadgets": "小工具",
    "dropletsPhoneHolder": "水滴手机支架",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.create_description": "创建水滴手机支架",
    "title": "标题",
    "subtitle": "副标题",
    "includeLogo": "包含Logo",
    "kerf": "切缝补偿",
    "backLength": "背板长度",
    "offsetAroundPhone": "手机周围偏移",
    "penShelf": "笔架",
    "phoneLockHeight": "手机锁定高度",
    "includePattern": "包含图案",
    "densityPattern": "图案密度",
    "holesForWire": "充电线孔",
    "wireInputThickness": "电线输入厚度",
    "includeModel": "包含模型",
    "includeDrawings": "包含图纸",
    "spacingDrawings": "图纸间距",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getCompoundShape": "获取复合体形状",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getCompoundShape_description": "获取水滴手机支架的复合体形状",
    "DropletsPhoneHolderData<T>": "水滴手机支架数据 T",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getCutWiresCompound": "获取切割线框复合体",
    "getCutWiresCompound": "获取切割线框复合体",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getCutWiresCompound_description": "获取切割线框复合体",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getEngravingWiresCompound": "获取雕刻线框复合体",
    "getEngravingWiresCompound": "获取雕刻线框复合体",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.getEngravingWiresCompound_description": "获取雕刻线框复合体",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.downloadDXFDrawings": "下载DXF图纸",
    "downloadDXFDrawings": "下载DXF图纸",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.downloadDXFDrawings_description": "下载DXF图纸",
    "download": "下载",
    "cutWiresColor": "切割线框颜色",
    "engravingWiresColor": "雕刻线框颜色",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.downloadSTEPDrawings": "下载STEP图纸",
    "downloadSTEPDrawings": "下载STEP图纸",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.downloadSTEPDrawings_description": "下载STEP图纸",
    "adjustYZ": "调整YZ",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.download3dSTEPModel": "下载三维STEP模型",
    "download3dSTEPModel": "下载三维STEP模型",
    "bitbybit.things.laserCutting.gadgets.dropletsPhoneHolder.download3dSTEPModel_description": "下载STEP三维模型",
    "bitbybit.things.architecture.houses.zenHideout.create": "禅意小屋",
    "architecture": "建筑",
    "houses": "房屋",
    "zenHideout": "禅意小屋",
    "bitbybit.things.architecture.houses.zenHideout.create_description": "创建禅意小屋",
    "widthFirstWing": "第一翼宽度",
    "lengthFirstWing": "第一翼长度",
    "terraceWidth": "露台宽度",
    "widthSecondWing": "第二翼宽度",
    "lengthSecondWing": "第二翼长度",
    "heightWalls": "墙高",
    "roofAngleFirstWing": "第一翼屋顶角度",
    "roofAngleSecondWing": "第二翼屋顶角度",
    "roofOffset": "屋顶偏移",
    "roofInsideOverhang": "屋顶内部悬挑",
    "roofMaxDistAttachmentBeams": "屋顶连接梁最大距离",
    "roofAttachmentBeamWidth": "屋顶连接梁宽度",
    "roofAttachmentBeamHeight": "屋顶连接梁高度",
    "roofOutsideOverhang": "屋顶外部悬挑",
    "columnSize": "柱子尺寸",
    "ceilingBeamHeight": "天花板梁高度",
    "ceilingBeamWidth": "天花板梁宽度",
    "nrCeilingBeamsBetweenColumns": "柱间天花板梁数量",
    "distBetweenColumns": "柱间距",
    "floorHeight": "楼层高度",
    "groundLevel": "地面标高",
    "facadePanelThickness": "立面面板厚度",
    "windowWidthOffset": "窗户宽度偏移",
    "windowHeightOffset": "窗户高度偏移",
    "windowFrameThickness": "窗框厚度",
    "windowGlassFrameThickness": "窗玻璃框厚度",
    "skinOpacity": "表皮不透明度",
    "bitbybit.things.furniture.chairs.snakeChair.create": "蛇形椅",
    "furniture": "家具",
    "chairs": "椅子",
    "snakeChair": "蛇形椅",
    "bitbybit.things.furniture.chairs.snakeChair.create_description": "创建蛇形椅模型",
    "sittingHeight": "座高",
    "backRestOffset": "靠背偏移",
    "backRestHeight": "靠背高度",
    "nrOrnamentPlanks": "装饰板数量",
    "ornamentDepth": "装饰深度",
    "bitbybit.things.furniture.chairs.snakeChair.getCompoundShape": "获取复合体形状",
    "bitbybit.things.furniture.chairs.snakeChair.getCompoundShape_description": "获取椅子的复合体形状",
    "SnakeChairData<T>": "蛇形椅数据 T",
    "bitbybit.things.furniture.chairs.snakeChair.getSittingWireShape": "获取坐面线框形状",
    "getSittingWireShape": "获取坐面线框形状",
    "bitbybit.things.furniture.chairs.snakeChair.getSittingWireShape_description": "获取坐面区域的线框形状",
    "bitbybit.things.furniture.chairs.snakeChair.getSittingAreaCenterPoint": "获取坐面中心点",
    "getSittingAreaCenterPoint": "获取坐面中心点",
    "bitbybit.things.furniture.chairs.snakeChair.getSittingAreaCenterPoint_description": "获取坐面区域的中心点",
    "get points": "获取点",
    "bitbybit.things.furniture.chairs.snakeChair.drawOptions": "绘制选项",
    "bitbybit.things.furniture.chairs.snakeChair.drawOptions_description": "创建蛇形椅的绘制选项",
    "bitbybit.things.furniture.tables.elegantTable.create": "优雅桌",
    "tables": "桌子",
    "elegantTable": "优雅桌",
    "bitbybit.things.furniture.tables.elegantTable.create_description": "创建优雅桌模型",
    "topThickness": "桌面厚度",
    "topOffset": "桌面偏移",
    "minFillet": "最小圆角",
    "radiusLegTop": "桌腿顶部半径",
    "radiusLegBottom": "桌腿底部半径",
    "nrLegPairs": "桌腿对数",
    "bitbybit.things.furniture.tables.elegantTable.getCompoundShape": "获取复合体形状",
    "bitbybit.things.furniture.tables.elegantTable.getCompoundShape_description": "获取桌子的复合体形状",
    "ElegantTableData<T>": "优雅桌数据 T",
    "bitbybit.things.furniture.tables.elegantTable.getLegShapes": "获取桌腿形状",
    "getLegShapes": "获取桌腿形状",
    "bitbybit.things.furniture.tables.elegantTable.getLegShapes_description": "以列表形式获取桌腿形状",
    "bitbybit.things.furniture.tables.elegantTable.getLegShapeByIndex": "按索引获取桌腿形状",
    "getLegShapeByIndex": "按索引获取桌腿形状",
    "bitbybit.things.furniture.tables.elegantTable.getLegShapeByIndex_description": "按索引获取桌腿形状",
    "bitbybit.things.furniture.tables.elegantTable.getTopPanelShape": "获取顶板形状",
    "getTopPanelShape": "获取顶板形状",
    "bitbybit.things.furniture.tables.elegantTable.getTopPanelShape_description": "获取桌子顶板形状",
    "bitbybit.things.furniture.tables.elegantTable.getTopPanelWireShape": "获取顶板线框形状",
    "getTopPanelWireShape": "获取顶板线框形状",
    "bitbybit.things.furniture.tables.elegantTable.getTopPanelWireShape_description": "获取桌子顶板线框形状",
    "bitbybit.things.furniture.tables.elegantTable.getBottomPanelWireShape": "获取底板线框形状",
    "getBottomPanelWireShape": "获取底板线框形状",
    "bitbybit.things.furniture.tables.elegantTable.getBottomPanelWireShape_description": "获取桌子底板线框形状",
    "bitbybit.things.furniture.tables.elegantTable.getBottomPanelShape": "获取底板形状",
    "getBottomPanelShape": "获取底板形状",
    "bitbybit.things.furniture.tables.elegantTable.getBottomPanelShape_description": "获取桌子底板形状",
    "bitbybit.things.furniture.tables.elegantTable.getLegsCompoundShape": "获取桌腿复合体形状",
    "getLegsCompoundShape": "获取桌腿复合体形状",
    "bitbybit.things.furniture.tables.elegantTable.getLegsCompoundShape_description": "获取桌腿形状作为复合体形状",
    "bitbybit.things.furniture.tables.elegantTable.getTableTopCenterPoint": "获取桌面中心点",
    "getTableTopCenterPoint": "获取桌面中心点",
    "bitbybit.things.furniture.tables.elegantTable.getTableTopCenterPoint_description": "获取顶部中心点",
    "bitbybit.things.furniture.tables.elegantTable.getTableBottomCenterPoint": "获取桌底中心点",
    "getTableBottomCenterPoint": "获取桌底中心点",
    "bitbybit.things.furniture.tables.elegantTable.getTableBottomCenterPoint_description": "获取底部中心点",
    "bitbybit.things.furniture.tables.elegantTable.getLegBottomPoints": "获取桌腿底部点",
    "getLegBottomPoints": "获取桌腿底部点",
    "bitbybit.things.furniture.tables.elegantTable.getLegBottomPoints_description": "获取桌腿底部点",
    "bitbybit.things.furniture.tables.elegantTable.getLegTopPoints": "获取桌腿顶部点",
    "getLegTopPoints": "获取桌腿顶部点",
    "bitbybit.things.furniture.tables.elegantTable.getLegTopPoints_description": "获取桌腿顶部点",
    "bitbybit.things.furniture.tables.elegantTable.drawOptions": "绘制选项",
    "bitbybit.things.furniture.tables.elegantTable.drawOptions_description": "创建优雅桌的绘制选项",
    "topMaterial": "顶部材质",
    "topBaseMaterial": "顶部基座材质",
    "legsMaterial": "桌腿材质",
    "bitbybit.things.furniture.tables.goodCoffeeTable.create": "优质咖啡桌",
    "goodCoffeeTable": "优质咖啡桌",
    "bitbybit.things.furniture.tables.goodCoffeeTable.create_description": "创建优质咖啡桌模型",
    "chamfer": "倒角",
    "topGlassOffset": "顶部玻璃偏移",
    "glassThickness": "玻璃厚度",
    "glassHolderLength": "玻璃支架长度",
    "shelfTopOffset": "搁板顶部偏移",
    "shelfThickness": "搁板厚度",
    "legWidth": "桌腿宽度",
    "legDepth": "桌腿深度",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getCompoundShape": "获取复合体形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getCompoundShape_description": "获取桌子的复合体形状",
    "GoodCoffeeTableData<T>": "优质咖啡桌数据 T",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegShapes": "获取桌腿形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegShapes_description": "以列表形式获取桌腿形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegShapeByIndex": "按索引获取桌腿形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegShapeByIndex_description": "按索引获取桌腿形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTopPanelShape": "获取顶板形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTopPanelShape_description": "获取桌子顶板形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTopPanelWireShape": "获取顶板线框形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTopPanelWireShape_description": "获取桌子顶板线框形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getGlassPanelShape": "获取玻璃面板形状",
    "getGlassPanelShape": "获取玻璃面板形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getGlassPanelShape_description": "获取桌子玻璃面板形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getGlassPanelWireShape": "获取玻璃面板线框形状",
    "getGlassPanelWireShape": "获取玻璃面板线框形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getGlassPanelWireShape_description": "获取桌子玻璃面板线框形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getShelfShape": "获取搁板形状",
    "getShelfShape": "获取搁板形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getShelfShape_description": "获取桌子搁板形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getShelfTopWireShape": "获取搁板顶部线框形状",
    "getShelfTopWireShape": "获取搁板顶部线框形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getShelfTopWireShape_description": "获取桌子搁板顶部线框形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegsCompoundShape": "获取桌腿复合体形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegsCompoundShape_description": "获取桌腿形状作为复合体形状",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTableTopCenterPoint": "获取桌面中心点",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTableTopCenterPoint_description": "获取顶部中心点",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTableShelfTopCenterPoint": "获取搁板顶部中心点",
    "getTableShelfTopCenterPoint": "获取搁板顶部中心点",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getTableShelfTopCenterPoint_description": "获取搁板顶部中心点",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegBottomPoints": "获取桌腿底部点",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegBottomPoints_description": "获取桌腿底部点",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegTopPoints": "获取桌腿顶部点",
    "bitbybit.things.furniture.tables.goodCoffeeTable.getLegTopPoints_description": "获取桌腿顶部点",
    "bitbybit.things.furniture.tables.goodCoffeeTable.drawOptions": "绘制选项",
    "bitbybit.things.furniture.tables.goodCoffeeTable.drawOptions_description": "创建优质咖啡桌的绘制选项",
    "topGlassMaterial": "顶部玻璃材质",
    "shelfMaterial": "搁板材质",
    "bitbybit.things.furniture.tables.snakeTable.create": "蛇形桌",
    "snakeTable": "蛇形桌",
    "bitbybit.things.furniture.tables.snakeTable.create_description": "创建蛇形桌模型",
    "supportLength": "支撑长度",
    "shelfHeight": "搁板高度",
    "glassOffset": "玻璃偏移",
    "bitbybit.things.furniture.tables.snakeTable.getCompoundShape": "获取复合体形状",
    "bitbybit.things.furniture.tables.snakeTable.getCompoundShape_description": "获取桌子的复合体形状",
    "SnakeTableData<T>": "蛇形桌数据 T",
    "bitbybit.things.furniture.tables.snakeTable.getGlassShape": "获取玻璃形状",
    "getGlassShape": "获取玻璃形状",
    "bitbybit.things.furniture.tables.snakeTable.getGlassShape_description": "获取桌子的玻璃形状",
    "bitbybit.things.furniture.tables.snakeTable.getMainShape": "获取主体形状",
    "getMainShape": "获取主体形状",
    "bitbybit.things.furniture.tables.snakeTable.getMainShape_description": "获取桌子的主体实体形状",
    "bitbybit.things.furniture.tables.snakeTable.getTopCenterPoint": "获取顶部中心点",
    "getTopCenterPoint": "获取顶部中心点",
    "bitbybit.things.furniture.tables.snakeTable.getTopCenterPoint_description": "获取桌子顶部的中心点",
    "bitbybit.things.furniture.tables.snakeTable.drawOptions": "绘制选项",
    "bitbybit.things.furniture.tables.snakeTable.drawOptions_description": "创建蛇形桌的绘制选项",
    "glassMaterial": "玻璃材质",
    "bitbybit.things.enums.lodEnum": "细节层次枚举",
    "enums": "枚举",
    "lodEnum": "细节层次枚举",
    "bitbybit.things.enums.lodEnum_description": "创建细节层次枚举值",
    "bitbybit.jscad.transformSolids": "变换实体",
    "jscad": "JSCAD",
    "transformSolids": "变换实体",
    "bitbybit.jscad.transformSolids_description": "使用变换矩阵变换JSCAD实体网格",
    "JSCADEntity[]": "JSCAD实体数组",
    "bitbybit.jscad.transformSolid": "变换实体",
    "transformSolid": "变换实体",
    "bitbybit.jscad.transformSolid_description": "使用变换矩阵变换JSCAD实体网格",
    "JSCADEntity": "JSCAD实体",
    "bitbybit.jscad.downloadSolidSTL": "下载实体STL",
    "downloadSolidSTL": "下载实体STL",
    "bitbybit.jscad.downloadSolidSTL_description": "从三维实体下载二进制STL文件",
    "bitbybit.jscad.downloadSolidsSTL": "下载多个实体STL",
    "downloadSolidsSTL": "下载多个实体STL",
    "bitbybit.jscad.downloadSolidsSTL_description": "从三维实体下载二进制STL文件",
    "bitbybit.jscad.downloadGeometryDxf": "下载几何体DXF",
    "downloadGeometryDxf": "下载几何体DXF",
    "bitbybit.jscad.downloadGeometryDxf_description": "从JSCAD几何体下载DXF文件",
    "geometry": "几何体",
    "JSCADEntity | JSCADEntity[]": "JSCAD实体或数组",
    "bitbybit.jscad.downloadGeometry3MF": "下载几何体3MF",
    "downloadGeometry3MF": "下载几何体3MF",
    "bitbybit.jscad.downloadGeometry3MF_description": "从JSCAD几何体下载3MF文件",
    "bitbybit.jscad.booleans.intersect": "交集",
    "intersect": "交集",
    "bitbybit.jscad.booleans.intersect_description": "计算多个实体网格对象的交集",
    "bitbybit.jscad.booleans.subtract": "差集",
    "subtract": "差集",
    "bitbybit.jscad.booleans.subtract_description": "计算多个实体网格对象的差集",
    "bitbybit.jscad.booleans.union": "并集",
    "bitbybit.jscad.booleans.union_description": "计算多个实体网格对象的并集",
    "bitbybit.jscad.booleans.intersectTwo": "两对象交集",
    "intersectTwo": "两对象交集",
    "bitbybit.jscad.booleans.intersectTwo_description": "计算两个实体网格对象的交集",
    "bitbybit.jscad.booleans.subtractTwo": "两对象差集",
    "subtractTwo": "两对象差集",
    "bitbybit.jscad.booleans.subtractTwo_description": "计算两个实体网格对象的差集",
    "bitbybit.jscad.booleans.unionTwo": "两对象并集",
    "unionTwo": "两对象并集",
    "bitbybit.jscad.booleans.unionTwo_description": "计算两个实体网格对象的并集",
    "bitbybit.jscad.booleans.subtractFrom": "从...减去",
    "subtractFrom": "从...减去",
    "bitbybit.jscad.booleans.subtractFrom_description": "从一个网格中减去多个网格",
    "bitbybit.jscad.expansions.expand": "扩展",
    "expansions": "扩展",
    "expand": "扩展",
    "bitbybit.jscad.expansions.expand_description": "扩展实体几何体",
    "expansion": "扩展操作",
    "delta": "增量",
    "corners": "角点处理",
    "solidCornerTypeEnum": "实体角点类型枚举",
    "bitbybit.jscad.expansions.offset": "偏移",
    "bitbybit.jscad.expansions.offset_description": "偏移二维几何体",
    "bitbybit.jscad.extrusions.extrudeLinear": "线性拉伸",
    "extrudeLinear": "线性拉伸",
    "bitbybit.jscad.extrusions.extrudeLinear_description": "线性拉伸二维几何体",
    "twistAngle": "扭转角度",
    "twistSteps": "扭转步数",
    "bitbybit.jscad.extrusions.extrudeRectangular": "矩形拉伸",
    "extrudeRectangular": "矩形拉伸",
    "bitbybit.jscad.extrusions.extrudeRectangular_description": "矩形拉伸二维几何体",
    "bitbybit.jscad.extrusions.extrudeRectangularPoints": "矩形拉伸点",
    "extrudeRectangularPoints": "矩形拉伸点",
    "bitbybit.jscad.extrusions.extrudeRectangularPoints_description": "矩形拉伸二维点",
    "bitbybit.jscad.extrusions.extrudeRotate": "旋转拉伸",
    "extrudeRotate": "旋转拉伸",
    "bitbybit.jscad.extrusions.extrudeRotate_description": "旋转并拉伸二维点",
    "polygon": "多边形",
    "startAngle": "起始角度",
    "bitbybit.jscad.hulls.hullChain": "链式凸包",
    "hulls": "凸包",
    "hullChain": "链式凸包",
    "bitbybit.jscad.hulls.hullChain_description": "按顺序连接实体或二维几何体",
    "bitbybit.jscad.hulls.hull": "凸包",
    "hull": "凸包",
    "bitbybit.jscad.hulls.hull_description": "凸包连接实体或二维几何体",
    "bitbybit.jscad.path.createFromPoints": "从点创建",
    "createFromPoints": "从点创建",
    "bitbybit.jscad.path.createFromPoints_description": "从点创建二维路径",
    "Base.Point2[]": "基础二维点数组",
    "bitbybit.jscad.path.createPathsFromPoints": "从点列表创建路径",
    "createPathsFromPoints": "从点列表创建路径",
    "bitbybit.jscad.path.createPathsFromPoints_description": "从点列表创建二维路径",
    "pointsLists": "点列表的列表",
    "Base.Point3[][] | Base.Point2[][]": "基础三维或二维点二维数组",
    "bitbybit.jscad.path.createFromPolyline": "从折线创建",
    "createFromPolyline": "从折线创建",
    "bitbybit.jscad.path.createFromPolyline_description": "从折线创建二维路径",
    "bitbybit.jscad.path.createEmpty": "空路径",
    "createEmpty": "空路径",
    "bitbybit.jscad.path.createEmpty_description": "创建空的二维路径",
    "bitbybit.jscad.path.close": "闭合",
    "close": "闭合",
    "bitbybit.jscad.path.close_description": "闭合开放的二维路径",
    "bitbybit.jscad.path.appendPoints": "追加点",
    "appendPoints": "追加点",
    "bitbybit.jscad.path.appendPoints_description": "用二维点追加路径",
    "append": "追加",
    "bitbybit.jscad.path.appendPolyline": "追加折线",
    "appendPolyline": "追加折线",
    "bitbybit.jscad.path.appendPolyline_description": "用折线追加路径",
    "bitbybit.jscad.path.appendArc": "追加圆弧",
    "appendArc": "追加圆弧",
    "bitbybit.jscad.path.appendArc_description": "向路径追加圆弧",
    "xAxisRotation": "X轴旋转",
    "clockwise": "顺时针",
    "large": "大弧",
    "bitbybit.jscad.polygon.createFromPoints": "从点创建",
    "bitbybit.jscad.polygon.createFromPoints_description": "从点创建二维多边形",
    "bitbybit.jscad.polygon.createFromPolyline": "从折线创建",
    "bitbybit.jscad.polygon.createFromPolyline_description": "从折线创建二维多边形",
    "bitbybit.jscad.polygon.createFromCurve": "从曲线创建",
    "createFromCurve": "从曲线创建",
    "bitbybit.jscad.polygon.createFromCurve_description": "从曲线创建二维多边形",
    "bitbybit.jscad.polygon.createFromPath": "从路径创建",
    "createFromPath": "从路径创建",
    "bitbybit.jscad.polygon.createFromPath_description": "从路径创建二维多边形",
    "bitbybit.jscad.polygon.circle": "圆",
    "bitbybit.jscad.polygon.circle_description": "创建二维多边形圆",
    "bitbybit.jscad.polygon.ellipse": "椭圆",
    "ellipse": "椭圆",
    "bitbybit.jscad.polygon.ellipse_description": "创建二维多边形椭圆",
    "bitbybit.jscad.polygon.rectangle": "矩形",
    "rectangle": "矩形",
    "bitbybit.jscad.polygon.rectangle_description": "创建二维多边形矩形",
    "bitbybit.jscad.polygon.roundedRectangle": "圆角矩形",
    "roundedRectangle": "圆角矩形",
    "bitbybit.jscad.polygon.roundedRectangle_description": "创建二维圆角矩形",
    "roundRadius": "圆角半径",
    "bitbybit.jscad.polygon.square": "正方形",
    "square": "正方形",
    "bitbybit.jscad.polygon.square_description": "创建二维多边形正方形",
    "bitbybit.jscad.polygon.star": "星形",
    "star": "星形",
    "bitbybit.jscad.polygon.star_description": "创建二维多边形星形",
    "vertices": "顶点",
    "bitbybit.jscad.shapes.cube": "立方体",
    "cube": "立方体",
    "bitbybit.jscad.shapes.cube_description": "创建三维立方体形状",
    "bitbybit.jscad.shapes.cubesOnCenterPoints": "在中心点创建立方体",
    "cubesOnCenterPoints": "在中心点创建立方体",
    "bitbybit.jscad.shapes.cubesOnCenterPoints_description": "在中心点创建三维立方体",
    "primitives on centers": "在中心点创建基本体",
    "bitbybit.jscad.shapes.cuboid": "长方体",
    "cuboid": "长方体",
    "bitbybit.jscad.shapes.cuboid_description": "创建三维长方体形状",
    "bitbybit.jscad.shapes.cuboidsOnCenterPoints": "在中心点创建长方体",
    "cuboidsOnCenterPoints": "在中心点创建长方体",
    "bitbybit.jscad.shapes.cuboidsOnCenterPoints_description": "在中心点创建三维长方体",
    "bitbybit.jscad.shapes.cylinderElliptic": "椭圆柱体",
    "cylinderElliptic": "椭圆柱体",
    "bitbybit.jscad.shapes.cylinderElliptic_description": "创建三维椭圆柱体实体",
    "startRadius": "起始半径",
    "endRadius": "结束半径",
    "bitbybit.jscad.shapes.cylinderEllipticOnCenterPoints": "在中心点创建椭圆柱体",
    "cylinderEllipticOnCenterPoints": "在中心点创建椭圆柱体",
    "bitbybit.jscad.shapes.cylinderEllipticOnCenterPoints_description": "在中心点创建三维椭圆柱体",
    "bitbybit.jscad.shapes.cylinder": "圆柱体",
    "cylinder": "圆柱体",
    "bitbybit.jscad.shapes.cylinder_description": "创建三维圆柱体实体",
    "bitbybit.jscad.shapes.cylindersOnCenterPoints": "在中心点创建圆柱体",
    "cylindersOnCenterPoints": "在中心点创建圆柱体",
    "bitbybit.jscad.shapes.cylindersOnCenterPoints_description": "在中心点创建三维圆柱体",
    "bitbybit.jscad.shapes.ellipsoid": "椭球体",
    "ellipsoid": "椭球体",
    "bitbybit.jscad.shapes.ellipsoid_description": "创建三维椭球体实体",
    "bitbybit.jscad.shapes.ellipsoidsOnCenterPoints": "在中心点创建椭球体",
    "ellipsoidsOnCenterPoints": "在中心点创建椭球体",
    "bitbybit.jscad.shapes.ellipsoidsOnCenterPoints_description": "在中心点创建三维椭球体",
    "bitbybit.jscad.shapes.geodesicSphere": "测地线球体",
    "geodesicSphere": "测地线球体",
    "bitbybit.jscad.shapes.geodesicSphere_description": "创建三维测地线球体实体",
    "frequency": "频率",
    "bitbybit.jscad.shapes.geodesicSpheresOnCenterPoints": "在中心点创建测地线球体",
    "geodesicSpheresOnCenterPoints": "在中心点创建测地线球体",
    "bitbybit.jscad.shapes.geodesicSpheresOnCenterPoints_description": "在中心点创建三维测地线球体",
    "bitbybit.jscad.shapes.roundedCuboid": "圆角长方体",
    "roundedCuboid": "圆角长方体",
    "bitbybit.jscad.shapes.roundedCuboid_description": "创建三维圆角长方体实体",
    "bitbybit.jscad.shapes.roundedCuboidsOnCenterPoints": "在中心点创建圆角长方体",
    "roundedCuboidsOnCenterPoints": "在中心点创建圆角长方体",
    "bitbybit.jscad.shapes.roundedCuboidsOnCenterPoints_description": "在中心点创建三维圆角长方体",
    "bitbybit.jscad.shapes.roundedCylinder": "圆角圆柱体",
    "roundedCylinder": "圆角圆柱体",
    "bitbybit.jscad.shapes.roundedCylinder_description": "创建三维圆角圆柱体实体",
    "bitbybit.jscad.shapes.roundedCylindersOnCenterPoints": "在中心点创建圆角圆柱体",
    "roundedCylindersOnCenterPoints": "在中心点创建圆角圆柱体",
    "bitbybit.jscad.shapes.roundedCylindersOnCenterPoints_description": "在中心点创建三维圆角圆柱体",
    "bitbybit.jscad.shapes.sphere": "球体",
    "sphere": "球体",
    "bitbybit.jscad.shapes.sphere_description": "创建三维球体实体",
    "bitbybit.jscad.shapes.spheresOnCenterPoints": "在中心点创建球体",
    "spheresOnCenterPoints": "在中心点创建球体",
    "bitbybit.jscad.shapes.spheresOnCenterPoints_description": "在中心点创建三维球体",
    "bitbybit.jscad.shapes.torus": "圆环体",
    "torus": "圆环体",
    "bitbybit.jscad.shapes.torus_description": "创建三维圆环体实体",
    "innerSegments": "内部分段",
    "outerSegments": "外部分段",
    "innerRotation": "内部旋转",
    "outerRotation": "外部旋转",
    "bitbybit.jscad.shapes.fromPolygonPoints": "从多边形点创建",
    "fromPolygonPoints": "从多边形点创建",
    "bitbybit.jscad.shapes.fromPolygonPoints_description": "从嵌套的多边形点创建三维形状",
    "polygonPoints": "多边形点",
    "Base.Point3[][]": "基础三维点二维数组",
    "bitbybit.jscad.text.cylindricalText": "圆柱形文本",
    "cylindricalText": "圆柱形文本",
    "bitbybit.jscad.text.cylindricalText_description": "使用链式凸包圆柱体创建文本",
    "extrusionHeight": "拉伸高度",
    "extrusionSize": "拉伸尺寸",
    "jscadTextAlignEnum": "JSCAD文本对齐枚举",
    "bitbybit.jscad.text.sphericalText": "球形文本",
    "sphericalText": "球形文本",
    "bitbybit.jscad.text.sphericalText_description": "使用链式凸包球体创建文本",
    "bitbybit.jscad.text.createVectorText": "矢量文本",
    "createVectorText": "矢量文本",
    "bitbybit.jscad.text.createVectorText_description": "创建矢量文本",
    "bitbybit.jscad.colors.colorize": "着色",
    "colors": "颜色",
    "colorize": "着色",
    "bitbybit.jscad.colors.colorize_description": "为JSCAD几何体着色",
    "bitbybit.manifold.manifoldToMeshPointer": "流形转网格指针",
    "manifold": "流形",
    "manifoldToMeshPointer": "流形转网格指针",
    "bitbybit.manifold.manifoldToMeshPointer_description": "将流形形状转换为网格指针",
    "meshing": "网格化",
    "normalIdx": "法线索引",
    "bitbybit.manifold.decomposeManifoldOrCrossSection": "分解流形或横截面",
    "decomposeManifoldOrCrossSection": "分解流形或横截面",
    "bitbybit.manifold.decomposeManifoldOrCrossSection_description": "将流形或横截面分解为网格或多边形",
    "decompose": "分解",
    "manifoldOrCrossSection": "流形或横截面",
    "bitbybit.manifold.decomposeManifoldsOrCrossSections": "分解多个流形或横截面",
    "decomposeManifoldsOrCrossSections": "分解多个流形或横截面",
    "bitbybit.manifold.decomposeManifoldsOrCrossSections_description": "将多个流形或横截面分解为网格或多边形",
    "manifoldsOrCrossSections": "多个流形或横截面",
    "bitbybit.manifold.deleteManifoldOrCrossSection": "删除流形或横截面",
    "deleteManifoldOrCrossSection": "删除流形或横截面",
    "bitbybit.manifold.deleteManifoldOrCrossSection_description": "从内存中删除流形或横截面",
    "cleanup": "清理",
    "bitbybit.manifold.deleteManifoldsOrCrossSections": "删除多个流形或横截面",
    "deleteManifoldsOrCrossSections": "删除多个流形或横截面",
    "bitbybit.manifold.deleteManifoldsOrCrossSections_description": "从内存中删除多个流形或横截面",
    "bitbybit.manifold.manifold.manifoldToMesh": "流形转网格",
    "manifoldToMesh": "流形转网格",
    "bitbybit.manifold.manifold.manifoldToMesh_description": "将流形形状转换为网格",
    "bitbybit.manifold.manifold.manifoldsToMeshes": "多个流形转网格",
    "manifoldsToMeshes": "多个流形转网格",
    "bitbybit.manifold.manifold.manifoldsToMeshes_description": "将多个流形形状转换为网格",
    "manifolds": "多个流形",
    "bitbybit.manifold.manifold.shapes.manifoldFromMesh": "从网格创建流形",
    "manifoldFromMesh": "从网格创建流形",
    "bitbybit.manifold.manifold.shapes.manifoldFromMesh_description": "将网格转换为流形",
    "DecomposedManifoldMeshDto": "分解的流形网格数据传输对象",
    "bitbybit.manifold.manifold.shapes.cube": "立方体",
    "bitbybit.manifold.manifold.shapes.cube_description": "创建三维立方体形状",
    "bitbybit.manifold.manifold.shapes.sphere": "球体",
    "bitbybit.manifold.manifold.shapes.sphere_description": "创建三维球体形状",
    "circularSegments": "圆形分段",
    "bitbybit.manifold.manifold.shapes.tetrahedron": "四面体",
    "tetrahedron": "四面体",
    "bitbybit.manifold.manifold.shapes.tetrahedron_description": "创建三维四面体形状",
    "bitbybit.manifold.manifold.shapes.cylinder": "圆柱体",
    "bitbybit.manifold.manifold.shapes.cylinder_description": "创建三维圆柱体形状",
    "radiusLow": "底部半径",
    "radiusHigh": "顶部半径",
    "bitbybit.manifold.manifold.booleans.subtract": "差集",
    "bitbybit.manifold.manifold.booleans.subtract_description": "计算两个流形形状的差集",
    "a to b": "A到B",
    "manifold1": "流形1",
    "manifold2": "流形2",
    "bitbybit.manifold.manifold.booleans.add": "并集",
    "bitbybit.manifold.manifold.booleans.add_description": "计算两个流形形状的并集",
    "bitbybit.manifold.manifold.booleans.intersect": "交集",
    "bitbybit.manifold.manifold.booleans.intersect_description": "计算两个流形形状的交集",
    "bitbybit.manifold.manifold.booleans.differenceTwo": "两流形差集",
    "differenceTwo": "两流形差集",
    "bitbybit.manifold.manifold.booleans.differenceTwo_description": "两个流形形状的差集",
    "2 manifolds": "2个流形",
    "bitbybit.manifold.manifold.booleans.unionTwo": "两流形并集",
    "bitbybit.manifold.manifold.booleans.unionTwo_description": "两个流形形状的并集",
    "bitbybit.manifold.manifold.booleans.intersectionTwo": "两流形交集",
    "intersectionTwo": "两流形交集",
    "bitbybit.manifold.manifold.booleans.intersectionTwo_description": "两个流形形状的交集",
    "bitbybit.manifold.manifold.booleans.difference": "差集",
    "bitbybit.manifold.manifold.booleans.difference_description": "多个流形形状的差集",
    "bitbybit.manifold.manifold.booleans.union": "并集",
    "bitbybit.manifold.manifold.booleans.union_description": "多个流形形状的并集",
    "bitbybit.manifold.manifold.booleans.intersection": "交集",
    "bitbybit.manifold.manifold.booleans.intersection_description": "多个流形形状的交集",
    "bitbybit.manifold.manifold.booleans.split": "分割",
    "split": "分割",
    "bitbybit.manifold.manifold.booleans.split_description": "用另一个流形分割流形",
    "manifoldToSplit": "待分割流形",
    "manifoldCutter": "切割流形",
    "bitbybit.manifold.manifold.booleans.splitByPlane": "按平面分割",
    "splitByPlane": "按平面分割",
    "bitbybit.manifold.manifold.booleans.splitByPlane_description": "按平面分割流形",
    "originOffset": "原点偏移",
    "bitbybit.manifold.manifold.booleans.splitByPlaneOnOffsets": "按偏移平面分割",
    "splitByPlaneOnOffsets": "按偏移平面分割",
    "bitbybit.manifold.manifold.booleans.splitByPlaneOnOffsets_description": "按偏移平面分割流形",
    "originOffsets": "原点偏移列表",
    "bitbybit.manifold.manifold.booleans.trimByPlane": "按平面修剪",
    "trimByPlane": "按平面修剪",
    "bitbybit.manifold.manifold.booleans.trimByPlane_description": "按平面修剪流形",
    "trim": "修剪",
    "bitbybit.manifold.manifold.operations.hull": "凸包",
    "bitbybit.manifold.manifold.operations.hull_description": "计算流形形状的凸包",
    "bitbybit.manifold.manifold.operations.hullPoints": "点凸包",
    "hullPoints": "点凸包",
    "bitbybit.manifold.manifold.operations.hullPoints_description": "计算点或流形的凸包",
    "bitbybit.manifold.manifold.operations.slice": "切片",
    "bitbybit.manifold.manifold.operations.slice_description": "返回物体在指定高度的横截面",
    "cross sections": "横截面",
    "bitbybit.manifold.manifold.operations.project": "投影",
    "bitbybit.manifold.manifold.operations.project_description": "从形状轮廓创建XY平面上的投影",
    "bitbybit.manifold.manifold.operations.setTolerance": "设置容差",
    "setTolerance": "设置容差",
    "bitbybit.manifold.manifold.operations.setTolerance_description": "设置流形的容差值",
    "basic": "基础",
    "bitbybit.manifold.manifold.operations.reserveIds": "保留ID",
    "reserveIds": "保留ID",
    "bitbybit.manifold.manifold.operations.reserveIds_description": "保留顺序网格ID",
    "count": "数量",
    "bitbybit.manifold.manifold.operations.asOriginal": "恢复原始",
    "asOriginal": "恢复原始",
    "bitbybit.manifold.manifold.operations.asOriginal_description": "将流形ID重置为原始ID",
    "bitbybit.manifold.manifold.operations.compose": "组合",
    "compose": "组合",
    "bitbybit.manifold.manifold.operations.compose_description": "从流形列表构造流形",
    "composition": "组合体",
    "bitbybit.manifold.manifold.operations.decompose": "分解",
    "bitbybit.manifold.manifold.operations.decompose_description": "将流形分解为不相连的部分",
    "bitbybit.manifold.manifold.operations.calculateNormals": "计算法线",
    "calculateNormals": "计算法线",
    "bitbybit.manifold.manifold.operations.calculateNormals_description": "计算顶点法线",
    "adjustments": "调整",
    "minSharpAngle": "最小锐角",
    "bitbybit.manifold.manifold.operations.calculateCurvature": "计算曲率",
    "calculateCurvature": "计算曲率",
    "bitbybit.manifold.manifold.operations.calculateCurvature_description": "计算顶点的曲率",
    "gaussianIdx": "高斯曲率索引",
    "meanIdx": "平均曲率索引",
    "bitbybit.manifold.manifold.operations.refineToTolerance": "细化至容差",
    "refineToTolerance": "细化至容差",
    "bitbybit.manifold.manifold.operations.refineToTolerance_description": "将网格细化至指定容差",
    "bitbybit.manifold.manifold.operations.refineToLength": "细化至长度",
    "refineToLength": "细化至长度",
    "bitbybit.manifold.manifold.operations.refineToLength_description": "将网格细化至指定长度",
    "bitbybit.manifold.manifold.operations.refine": "细化",
    "refine": "细化",
    "bitbybit.manifold.manifold.operations.refine_description": "通过分割边来细化网格",
    "bitbybit.manifold.manifold.operations.smoothOut": "平滑",
    "smoothOut": "平滑",
    "bitbybit.manifold.manifold.operations.smoothOut_description": "使用切向量平滑流形",
    "minSmoothness": "最小平滑度",
    "bitbybit.manifold.manifold.operations.smoothByNormals": "按法线平滑",
    "smoothByNormals": "按法线平滑",
    "bitbybit.manifold.manifold.operations.smoothByNormals_description": "使用顶点法线平滑流形",
    "bitbybit.manifold.manifold.transforms.scale3D": "三维缩放",
    "scale3D": "三维缩放",
    "bitbybit.manifold.manifold.transforms.scale3D_description": "使用三维向量缩放流形",
    "bitbybit.manifold.manifold.transforms.scale": "缩放",
    "bitbybit.manifold.manifold.transforms.scale_description": "使用单一因子缩放流形",
    "bitbybit.manifold.manifold.transforms.mirror": "镜像",
    "bitbybit.manifold.manifold.transforms.mirror_description": "沿平面镜像流形",
    "bitbybit.manifold.manifold.transforms.translate": "平移",
    "bitbybit.manifold.manifold.transforms.translate_description": "沿向量平移流形",
    "bitbybit.manifold.manifold.transforms.translateByVectors": "按向量平移",
    "translateByVectors": "按向量平移",
    "bitbybit.manifold.manifold.transforms.translateByVectors_description": "按多个向量平移流形",
    "bitbybit.manifold.manifold.transforms.translateXYZ": "XYZ平移",
    "translateXYZ": "XYZ平移",
    "bitbybit.manifold.manifold.transforms.translateXYZ_description": "沿X、Y、Z轴平移流形",
    "bitbybit.manifold.manifold.transforms.rotate": "旋转",
    "bitbybit.manifold.manifold.transforms.rotate_description": "使用欧拉角旋转流形",
    "bitbybit.manifold.manifold.transforms.rotateXYZ": "XYZ旋转",
    "rotateXYZ": "XYZ旋转",
    "bitbybit.manifold.manifold.transforms.rotateXYZ_description": "使用X、Y、Z欧拉角旋转流形",
    "bitbybit.manifold.manifold.transforms.transform": "变换",
    "bitbybit.manifold.manifold.transforms.transform_description": "使用4x4矩阵变换流形",
    "matrix": "矩阵",
    "Base.TransformMatrix": "基础变换矩阵",
    "bitbybit.manifold.manifold.transforms.transforms": "多次变换",
    "bitbybit.manifold.manifold.transforms.transforms_description": "使用多个4x4矩阵变换流形",
    "bitbybit.manifold.manifold.evaluate.surfaceArea": "表面积",
    "evaluate": "评估",
    "surfaceArea": "表面积",
    "bitbybit.manifold.manifold.evaluate.surfaceArea_description": "获取流形的表面积",
    "bitbybit.manifold.manifold.evaluate.volume": "体积",
    "volume": "体积",
    "bitbybit.manifold.manifold.evaluate.volume_description": "获取流形的体积",
    "bitbybit.manifold.manifold.evaluate.isEmpty": "是否为空",
    "isEmpty": "是否为空",
    "bitbybit.manifold.manifold.evaluate.isEmpty_description": "检查流形是否有三角形",
    "bitbybit.manifold.manifold.evaluate.numVert": "顶点数",
    "numVert": "顶点数",
    "bitbybit.manifold.manifold.evaluate.numVert_description": "获取流形中的顶点数",
    "bitbybit.manifold.manifold.evaluate.numTri": "三角形数",
    "numTri": "三角形数",
    "bitbybit.manifold.manifold.evaluate.numTri_description": "获取流形中的三角形数",
    "bitbybit.manifold.manifold.evaluate.numEdge": "边数",
    "numEdge": "边数",
    "bitbybit.manifold.manifold.evaluate.numEdge_description": "获取流形中的边数",
    "bitbybit.manifold.manifold.evaluate.numProp": "属性数",
    "numProp": "属性数",
    "bitbybit.manifold.manifold.evaluate.numProp_description": "获取流形中的属性数",
    "bitbybit.manifold.manifold.evaluate.numPropVert": "属性顶点数",
    "numPropVert": "属性顶点数",
    "bitbybit.manifold.manifold.evaluate.numPropVert_description": "获取流形中的属性顶点数",
    "bitbybit.manifold.manifold.evaluate.boundingBox": "边界框",
    "boundingBox": "边界框",
    "bitbybit.manifold.manifold.evaluate.boundingBox_description": "获取流形的轴对齐边界框",
    "bitbybit.manifold.manifold.evaluate.tolerance": "容差",
    "bitbybit.manifold.manifold.evaluate.tolerance_description": "获取流形顶点的容差",
    "bitbybit.manifold.manifold.evaluate.genus": "亏格",
    "genus": "亏格",
    "bitbybit.manifold.manifold.evaluate.genus_description": "获取流形的亏格",
    "bitbybit.manifold.manifold.evaluate.minGap": "最小间隙",
    "minGap": "最小间隙",
    "bitbybit.manifold.manifold.evaluate.minGap_description": "获取两个流形之间的最小间隙",
    "searchLength": "搜索长度",
    "bitbybit.manifold.manifold.evaluate.originalID": "原始ID",
    "originalID": "原始ID",
    "bitbybit.manifold.manifold.evaluate.originalID_description": "获取流形的原始ID",
    "bitbybit.manifold.crossSection.crossSectionToPolygons": "横截面转多边形",
    "crossSection": "横截面",
    "crossSectionToPolygons": "横截面转多边形",
    "bitbybit.manifold.crossSection.crossSectionToPolygons_description": "将横截面转换为多边形",
    "bitbybit.manifold.crossSection.crossSectionsToPolygons": "多个横截面转多边形",
    "crossSectionsToPolygons": "多个横截面转多边形",
    "bitbybit.manifold.crossSection.crossSectionsToPolygons_description": "将多个横截面转换为多边形",
    "crossSections": "多个横截面",
    "bitbybit.manifold.crossSection.shapes.create": "创建",
    "bitbybit.manifold.crossSection.shapes.create_description": "从轮廓创建二维横截面",
    "Base.Vector2[][]": "基础二维向量二维数组",
    "fillRule": "填充规则",
    "fillRuleEnum": "填充规则枚举",
    "bitbybit.manifold.crossSection.shapes.square": "正方形",
    "bitbybit.manifold.crossSection.shapes.square_description": "创建二维正方形横截面",
    "bitbybit.manifold.crossSection.shapes.circle": "圆形",
    "bitbybit.manifold.crossSection.shapes.circle_description": "创建二维圆形横截面",
    "bitbybit.manifold.crossSection.shapes.rectangle": "矩形",
    "bitbybit.manifold.crossSection.shapes.rectangle_description": "创建二维矩形横截面",
    "bitbybit.manifold.crossSection.operations.hull": "凸包",
    "bitbybit.manifold.crossSection.operations.hull_description": "计算横截面的凸包",
    "bitbybit.manifold.crossSection.operations.extrude": "拉伸",
    "bitbybit.manifold.crossSection.operations.extrude_description": "将横截面拉伸为三维形状",
    "nDivisions": "细分数",
    "twistDegrees": "扭转角度",
    "scaleTopX": "顶部X缩放",
    "scaleTopY": "顶部Y缩放",
    "bitbybit.manifold.crossSection.operations.revolve": "旋转成形",
    "bitbybit.manifold.crossSection.operations.revolve_description": "将横截面旋转成三维形状",
    "revolveDegrees": "旋转角度",
    "matchProfile": "匹配轮廓",
    "bitbybit.manifold.crossSection.operations.offset": "偏移",
    "bitbybit.manifold.crossSection.operations.offset_description": "按增量偏移横截面",
    "manifoldJoinTypeEnum": "流形连接类型枚举",
    "miterLimit": "斜接限制",
    "bitbybit.manifold.crossSection.operations.simplify": "简化",
    "simplify": "简化",
    "bitbybit.manifold.crossSection.operations.simplify_description": "简化横截面轮廓",
    "epsilon": "精度",
    "bitbybit.manifold.crossSection.operations.compose": "组合",
    "bitbybit.manifold.crossSection.operations.compose_description": "将多个横截面组合成一个",
    "bitbybit.manifold.crossSection.operations.decompose": "分解",
    "bitbybit.manifold.crossSection.operations.decompose_description": "将横截面分解为部分",
    "bitbybit.manifold.crossSection.booleans.subtract": "差集",
    "bitbybit.manifold.crossSection.booleans.subtract_description": "计算两个横截面的差集",
    "crossSection1": "横截面1",
    "crossSection2": "横截面2",
    "bitbybit.manifold.crossSection.booleans.add": "并集",
    "bitbybit.manifold.crossSection.booleans.add_description": "计算两个横截面的并集",
    "bitbybit.manifold.crossSection.booleans.intersect": "交集",
    "bitbybit.manifold.crossSection.booleans.intersect_description": "计算两个横截面的交集",
    "bitbybit.manifold.crossSection.booleans.differenceTwo": "两横截面差集",
    "bitbybit.manifold.crossSection.booleans.differenceTwo_description": "两个横截面的差集",
    "2 cross sections": "2个横截面",
    "bitbybit.manifold.crossSection.booleans.unionTwo": "两横截面并集",
    "bitbybit.manifold.crossSection.booleans.unionTwo_description": "两个横截面的并集",
    "bitbybit.manifold.crossSection.booleans.intersectionTwo": "两横截面交集",
    "bitbybit.manifold.crossSection.booleans.intersectionTwo_description": "两个横截面的交集",
    "bitbybit.manifold.crossSection.booleans.difference": "差集",
    "bitbybit.manifold.crossSection.booleans.difference_description": "多个横截面的差集",
    "bitbybit.manifold.crossSection.booleans.union": "并集",
    "bitbybit.manifold.crossSection.booleans.union_description": "多个横截面的并集",
    "bitbybit.manifold.crossSection.booleans.intersection": "交集",
    "bitbybit.manifold.crossSection.booleans.intersection_description": "多个横截面的交集",
    "bitbybit.manifold.crossSection.transforms.scale2D": "二维缩放",
    "scale2D": "二维缩放",
    "bitbybit.manifold.crossSection.transforms.scale2D_description": "使用二维向量缩放横截面",
    "bitbybit.manifold.crossSection.transforms.scale": "缩放",
    "bitbybit.manifold.crossSection.transforms.scale_description": "使用单一因子缩放横截面",
    "bitbybit.manifold.crossSection.transforms.mirror": "镜像",
    "bitbybit.manifold.crossSection.transforms.mirror_description": "沿平面镜像横截面",
    "bitbybit.manifold.crossSection.transforms.translate": "平移",
    "bitbybit.manifold.crossSection.transforms.translate_description": "沿向量平移横截面",
    "bitbybit.manifold.crossSection.transforms.translateXY": "XY平移",
    "translateXY": "XY平移",
    "bitbybit.manifold.crossSection.transforms.translateXY_description": "沿X、Y轴平移横截面",
    "bitbybit.manifold.crossSection.transforms.rotate": "旋转",
    "bitbybit.manifold.crossSection.transforms.rotate_description": "按角度旋转横截面",
    "degrees": "角度",
    "bitbybit.manifold.crossSection.transforms.transform": "变换",
    "bitbybit.manifold.crossSection.transforms.transform_description": "使用3x3矩阵变换横截面",
    "Base.TransformMatrix3x3": "基础3x3变换矩阵",
    "bitbybit.manifold.crossSection.evaluate.area": "面积",
    "area": "面积",
    "bitbybit.manifold.crossSection.evaluate.area_description": "获取横截面的面积",
    "bitbybit.manifold.crossSection.evaluate.isEmpty": "是否为空",
    "bitbybit.manifold.crossSection.evaluate.isEmpty_description": "检查横截面是否为空",
    "bitbybit.manifold.crossSection.evaluate.numVert": "顶点数",
    "bitbybit.manifold.crossSection.evaluate.numVert_description": "获取横截面中的顶点数",
    "bitbybit.manifold.crossSection.evaluate.numContour": "轮廓数",
    "numContour": "轮廓数",
    "bitbybit.manifold.crossSection.evaluate.numContour_description": "获取横截面中的轮廓数",
    "bitbybit.manifold.crossSection.evaluate.bounds": "边界",
    "bounds": "边界",
    "bitbybit.manifold.crossSection.evaluate.bounds_description": "获取轮廓的边界矩形",
    "bitbybit.manifold.mesh.operations.merge": "合并",
    "merge": "合并",
    "bitbybit.manifold.mesh.operations.merge_description": "将顶点合并到流形实体",
    "bitbybit.manifold.mesh.evaluate.position": "位置",
    "bitbybit.manifold.mesh.evaluate.position_description": "获取网格顶点索引处的位置",
    "vertexIndex": "顶点索引",
    "bitbybit.manifold.mesh.evaluate.verts": "顶点",
    "verts": "顶点",
    "bitbybit.manifold.mesh.evaluate.verts_description": "获取三角形的三个顶点索引",
    "triangleIndex": "三角形索引",
    "bitbybit.manifold.mesh.evaluate.tangent": "切线",
    "tangent": "切线",
    "bitbybit.manifold.mesh.evaluate.tangent_description": "获取半边的切向量",
    "halfEdgeIndex": "半边索引",
    "bitbybit.manifold.mesh.evaluate.extras": "额外属性",
    "extras": "额外属性",
    "bitbybit.manifold.mesh.evaluate.extras_description": "获取顶点的额外属性",
    "bitbybit.manifold.mesh.evaluate.transform": "变换",
    "bitbybit.manifold.mesh.evaluate.transform_description": "获取网格的4x4变换矩阵",
    "bitbybit.manifold.mesh.evaluate.numProp": "属性数",
    "bitbybit.manifold.mesh.evaluate.numProp_description": "获取每个顶点的属性数",
    "bitbybit.manifold.mesh.evaluate.numVert": "顶点数",
    "bitbybit.manifold.mesh.evaluate.numVert_description": "获取属性顶点数",
    "bitbybit.manifold.mesh.evaluate.numTri": "三角形数",
    "bitbybit.manifold.mesh.evaluate.numTri_description": "获取网格上的三角形数",
    "bitbybit.manifold.mesh.evaluate.numRun": "运行数",
    "numRun": "运行数",
    "bitbybit.manifold.mesh.evaluate.numRun_description": "获取三角形运行数",
    "bitbybit.logic.boolean": "布尔值",
    "logic": "逻辑",
    "bitbybit.logic.boolean_description": "创建布尔值",
    "bitbybit.logic.randomBooleans": "随机布尔列表",
    "randomBooleans": "随机布尔列表",
    "bitbybit.logic.randomBooleans_description": "创建随机布尔值列表",
    "trueThreshold": "真值阈值",
    "bitbybit.logic.twoThresholdRandomGradient": "双阈值随机梯度",
    "twoThresholdRandomGradient": "双阈值随机梯度",
    "bitbybit.logic.twoThresholdRandomGradient_description": "创建带阈值的随机布尔值列表",
    "numbers": "数字列表",
    "thresholdTotalTrue": "总真值阈值",
    "thresholdTotalFalse": "总假值阈值",
    "nrLevels": "层级数",
    "bitbybit.logic.thresholdBooleanList": "阈值布尔列表",
    "thresholdBooleanList": "阈值布尔列表",
    "bitbybit.logic.thresholdBooleanList_description": "创建带阈值的布尔值列表",
    "threshold": "阈值",
    "bitbybit.logic.thresholdGapsBooleanList": "阈值间隔布尔列表",
    "thresholdGapsBooleanList": "阈值间隔布尔列表",
    "bitbybit.logic.thresholdGapsBooleanList_description": "创建带间隔阈值的布尔值列表",
    "gapThresholds": "间隔阈值",
    "Base.Vector2[]": "基础二维向量数组",
    "bitbybit.logic.not": "非",
    "not": "非",
    "bitbybit.logic.not_description": "对布尔值应用非运算符",
    "bitbybit.logic.notList": "列表非",
    "notList": "列表非",
    "bitbybit.logic.notList_description": "对布尔值列表应用非运算符",
    "bitbybit.logic.compare": "比较",
    "compare": "比较",
    "bitbybit.logic.compare_description": "比较两个值",
    "operator": "运算符",
    "BooleanOperatorsEnum": "布尔运算符枚举",
    "bitbybit.logic.valueGate": "值门",
    "valueGate": "值门",
    "bitbybit.logic.valueGate_description": "如果布尔值为真，则传递值",
    "bitbybit.logic.firstDefinedValueGate": "首个定义值门",
    "firstDefinedValueGate": "首个定义值门",
    "bitbybit.logic.firstDefinedValueGate_description": "返回第一个已定义的值",
    "value1": "值1",
    "value2": "值2",
    "bitbybit.math.number": "数字",
    "math": "数学",
    "bitbybit.math.number_description": "创建一个数字",
    "bitbybit.math.twoNrOperation": "双数运算",
    "twoNrOperation": "双数运算",
    "bitbybit.math.twoNrOperation_description": "执行基本的数学运算",
    "operation": "运算",
    "mathTwoNrOperatorEnum": "数学双数运算符枚举",
    "bitbybit.math.modulus": "模数",
    "modulus": "模数",
    "bitbybit.math.modulus_description": "执行模数运算",
    "bitbybit.math.roundToDecimals": "四舍五入到小数位",
    "roundToDecimals": "四舍五入到小数位",
    "bitbybit.math.roundToDecimals_description": "四舍五入到指定小数位",
    "decimalPlaces": "小数位数",
    "bitbybit.math.oneNrOperation": "单数运算",
    "oneNrOperation": "单数运算",
    "bitbybit.math.oneNrOperation_description": "对一个数字执行数学运算",
    "mathOneNrOperatorEnum": "数学单数运算符枚举",
    "bitbybit.math.remap": "重映射",
    "remap": "重映射",
    "bitbybit.math.remap_description": "在范围之间重映射数字",
    "fromLow": "源范围下限",
    "fromHigh": "源范围上限",
    "toLow": "目标范围下限",
    "toHigh": "目标范围上限",
    "bitbybit.math.random": "随机数",
    "random": "随机数",
    "bitbybit.math.random_description": "创建0到1之间的随机数",
    "generate": "生成",
    "bitbybit.math.randomNumber": "随机数",
    "randomNumber": "随机数",
    "bitbybit.math.randomNumber_description": "在指定范围内创建随机数",
    "low": "下限",
    "high": "上限",
    "bitbybit.math.randomNumbers": "随机数列表",
    "randomNumbers": "随机数列表",
    "bitbybit.math.randomNumbers_description": "在指定范围内创建随机数列表",
    "bitbybit.math.pi": "圆周率",
    "pi": "圆周率",
    "bitbybit.math.pi_description": "创建圆周率π",
    "bitbybit.math.toFixed": "固定小数位",
    "toFixed": "固定小数位",
    "bitbybit.math.toFixed_description": "将数字四舍五入到指定小数位",
    "bitbybit.math.add": "加",
    "bitbybit.math.add_description": "两个数字相加",
    "basics": "基础运算",
    "bitbybit.math.subtract": "减",
    "bitbybit.math.subtract_description": "两个数字相减",
    "bitbybit.math.multiply": "乘",
    "bitbybit.math.multiply_description": "两个数字相乘",
    "bitbybit.math.divide": "除",
    "divide": "除",
    "bitbybit.math.divide_description": "两个数字相除",
    "bitbybit.math.power": "幂",
    "power": "幂",
    "bitbybit.math.power_description": "计算一个数的幂",
    "bitbybit.math.sqrt": "平方根",
    "sqrt": "平方根",
    "bitbybit.math.sqrt_description": "获取平方根",
    "bitbybit.math.abs": "绝对值",
    "abs": "绝对值",
    "bitbybit.math.abs_description": "获取绝对值",
    "bitbybit.math.round": "四舍五入",
    "round": "四舍五入",
    "bitbybit.math.round_description": "对数字进行四舍五入",
    "bitbybit.math.floor": "向下取整",
    "floor": "向下取整",
    "bitbybit.math.floor_description": "对数字向下取整",
    "bitbybit.math.ceil": "向上取整",
    "ceil": "向上取整",
    "bitbybit.math.ceil_description": "对数字向上取整",
    "bitbybit.math.negate": "取反",
    "negate": "取反",
    "bitbybit.math.negate_description": "对数字取反",
    "bitbybit.math.ln": "自然对数",
    "ln": "自然对数",
    "bitbybit.math.ln_description": "获取自然对数",
    "bitbybit.math.log10": "常用对数",
    "log10": "常用对数",
    "bitbybit.math.log10_description": "获取以10为底的对数",
    "bitbybit.math.tenPow": "10的幂",
    "tenPow": "10的幂",
    "bitbybit.math.tenPow_description": "计算10的幂",
    "bitbybit.math.sin": "正弦",
    "sin": "正弦",
    "bitbybit.math.sin_description": "获取正弦值",
    "bitbybit.math.cos": "余弦",
    "cos": "余弦",
    "bitbybit.math.cos_description": "获取余弦值",
    "bitbybit.math.tan": "正切",
    "tan": "正切",
    "bitbybit.math.tan_description": "获取正切值",
    "bitbybit.math.asin": "反正弦",
    "asin": "反正弦",
    "bitbybit.math.asin_description": "获取反正弦值",
    "bitbybit.math.acos": "反余弦",
    "acos": "反余弦",
    "bitbybit.math.acos_description": "获取反余弦值",
    "bitbybit.math.atan": "反正切",
    "atan": "反正切",
    "bitbybit.math.atan_description": "获取反正切值",
    "bitbybit.math.exp": "指数",
    "exp": "指数",
    "bitbybit.math.exp_description": "获取自然指数",
    "bitbybit.math.degToRad": "角度转弧度",
    "degToRad": "角度转弧度",
    "bitbybit.math.degToRad_description": "将角度转换为弧度",
    "bitbybit.math.radToDeg": "弧度转角度",
    "radToDeg": "弧度转角度",
    "bitbybit.math.radToDeg_description": "将弧度转换为角度",
    "bitbybit.math.ease": "缓动",
    "bitbybit.math.ease_description": "使用范围缓动数字",
    "easeEnum": "缓动枚举",
    "bitbybit.lists.getItem": "获取项",
    "lists": "列表",
    "getItem": "获取项",
    "bitbybit.lists.getItem_description": "按索引从列表中获取项",
    "list": "列表",
    "bitbybit.lists.randomGetThreshold": "随机获取阈值",
    "randomGetThreshold": "随机获取阈值",
    "bitbybit.lists.randomGetThreshold_description": "按阈值随机获取项",
    "bitbybit.lists.getSubList": "获取子列表",
    "getSubList": "获取子列表",
    "bitbybit.lists.getSubList_description": "获取索引之间的子列表",
    "indexStart": "起始索引",
    "indexEnd": "结束索引",
    "bitbybit.lists.getNthItem": "获取第N项",
    "getNthItem": "获取第N项",
    "bitbybit.lists.getNthItem_description": "获取列表中的第N项",
    "nth": "第N个",
    "bitbybit.lists.getByPattern": "按模式获取",
    "getByPattern": "按模式获取",
    "bitbybit.lists.getByPattern_description": "按模式获取元素",
    "pattern": "模式",
    "bitbybit.lists.mergeElementsOfLists": "合并列表元素",
    "mergeElementsOfLists": "合并列表元素",
    "bitbybit.lists.mergeElementsOfLists_description": "按层级合并列表元素",
    "level": "层级",
    "bitbybit.lists.getLongestListLength": "获取最长列表长度",
    "getLongestListLength": "获取最长列表长度",
    "bitbybit.lists.getLongestListLength_description": "获取最长列表的长度",
    "bitbybit.lists.reverse": "反转",
    "bitbybit.lists.reverse_description": "反转列表",
    "bitbybit.lists.flipLists": "翻转列表",
    "flipLists": "翻转列表",
    "bitbybit.lists.flipLists_description": "翻转二维列表",
    "bitbybit.lists.groupNth": "按N分组",
    "groupNth": "按N分组",
    "bitbybit.lists.groupNth_description": "将列表按N个元素分组",
    "nrElements": "元素数量",
    "keepRemainder": "保留余数",
    "bitbybit.lists.getListDepth": "获取列表深度",
    "getListDepth": "获取列表深度",
    "bitbybit.lists.getListDepth_description": "获取列表的深度",
    "bitbybit.lists.listLength": "列表长度",
    "listLength": "列表长度",
    "bitbybit.lists.listLength_description": "获取列表的长度",
    "bitbybit.lists.addItemAtIndex": "在索引处添加项",
    "addItemAtIndex": "在索引处添加项",
    "bitbybit.lists.addItemAtIndex_description": "在指定索引处向列表添加项",
    "item": "项",
    "bitbybit.lists.addItemAtIndexes": "在多个索引处添加项",
    "addItemAtIndexes": "在多个索引处添加项",
    "bitbybit.lists.addItemAtIndexes_description": "在指定多个索引处向列表添加项",
    "bitbybit.lists.addItemsAtIndexes": "在多个索引处添加多个项",
    "addItemsAtIndexes": "在多个索引处添加多个项",
    "bitbybit.lists.addItemsAtIndexes_description": "在指定多个索引处向列表添加多个项",
    "items": "多个项",
    "bitbybit.lists.removeItemAtIndex": "移除索引处的项",
    "removeItemAtIndex": "移除索引处的项",
    "bitbybit.lists.removeItemAtIndex_description": "从列表指定索引处移除项",
    "bitbybit.lists.removeItemsAtIndexes": "移除多个索引处的项",
    "removeItemsAtIndexes": "移除多个索引处的项",
    "bitbybit.lists.removeItemsAtIndexes_description": "从列表指定多个索引处移除项",
    "bitbybit.lists.removeAllItems": "移除所有项",
    "removeAllItems": "移除所有项",
    "bitbybit.lists.removeAllItems_description": "从列表中移除所有项",
    "bitbybit.lists.removeNthItem": "移除第N项",
    "removeNthItem": "移除第N项",
    "bitbybit.lists.removeNthItem_description": "从列表中移除第N项",
    "bitbybit.lists.randomRemoveThreshold": "随机移除阈值",
    "randomRemoveThreshold": "随机移除阈值",
    "bitbybit.lists.randomRemoveThreshold_description": "按阈值随机移除项",
    "bitbybit.lists.removeDuplicateNumbers": "移除重复数字",
    "removeDuplicateNumbers": "移除重复数字",
    "bitbybit.lists.removeDuplicateNumbers_description": "从列表中移除重复的数字",
    "bitbybit.lists.removeDuplicateNumbersTolerance": "移除重复数字(带容差)",
    "removeDuplicateNumbersTolerance": "移除重复数字(带容差)",
    "bitbybit.lists.removeDuplicateNumbersTolerance_description": "带容差从列表中移除重复的数字",
    "bitbybit.lists.addItem": "添加项",
    "addItem": "添加项",
    "bitbybit.lists.addItem_description": "向列表末尾添加项",
    "bitbybit.lists.prependItem": "前置添加项",
    "prependItem": "前置添加项",
    "bitbybit.lists.prependItem_description": "向列表开头添加项",
    "bitbybit.lists.addItemFirstLast": "首尾添加项",
    "addItemFirstLast": "首尾添加项",
    "bitbybit.lists.addItemFirstLast_description": "向列表开头或末尾添加项",
    "firstLastEnum": "首尾枚举",
    "bitbybit.lists.createEmptyList": "空列表",
    "createEmptyList": "空列表",
    "bitbybit.lists.createEmptyList_description": "创建空列表",
    "bitbybit.lists.repeat": "重复",
    "repeat": "重复",
    "bitbybit.lists.repeat_description": "在新列表中重复项",
    "times": "次数",
    "bitbybit.lists.repeatInPattern": "按模式重复",
    "repeatInPattern": "按模式重复",
    "bitbybit.lists.repeatInPattern_description": "重复列表项直到达到长度限制",
    "lengthLimit": "长度限制",
    "bitbybit.lists.sortNumber": "排序数字",
    "sortNumber": "排序数字",
    "bitbybit.lists.sortNumber_description": "对数字列表进行排序",
    "sorting": "排序",
    "orderAsc": "升序",
    "bitbybit.lists.sortTexts": "排序文本",
    "sortTexts": "排序文本",
    "bitbybit.lists.sortTexts_description": "按字母顺序对文本列表进行排序",
    "bitbybit.lists.sortByPropValue": "按属性值排序",
    "sortByPropValue": "按属性值排序",
    "bitbybit.lists.sortByPropValue_description": "按数字JSON属性排序",
    "property": "属性",
    "bitbybit.color.hexColor": "十六进制颜色",
    "hexColor": "十六进制颜色",
    "bitbybit.color.hexColor_description": "创建十六进制颜色",
    "bitbybit.color.hexToRgb": "十六进制转RGB",
    "hexToRgb": "十六进制转RGB",
    "bitbybit.color.hexToRgb_description": "从十六进制创建RGB",
    "convert": "转换",
    "bitbybit.color.rgbToHex": "RGB转十六进制",
    "rgbToHex": "RGB转十六进制",
    "bitbybit.color.rgbToHex_description": "从RGB创建十六进制",
    "r": "红",
    "g": "绿",
    "b": "蓝",
    "bitbybit.color.rgbObjToHex": "RGB对象转十六进制",
    "rgbObjToHex": "RGB对象转十六进制",
    "bitbybit.color.rgbObjToHex_description": "从RGB对象创建十六进制",
    "rgb": "RGB",
    "Base.ColorRGB": "基础RGB颜色",
    "bitbybit.color.hexToRgbMapped": "映射十六进制转RGB",
    "hexToRgbMapped": "映射十六进制转RGB",
    "bitbybit.color.hexToRgbMapped_description": "通过范围映射从十六进制创建RGB",
    "bitbybit.color.getRedParam": "获取红色参数",
    "getRedParam": "获取红色参数",
    "bitbybit.color.getRedParam_description": "获取红色参数",
    "hex to": "十六进制转",
    "bitbybit.color.getGreenParam": "获取绿色参数",
    "getGreenParam": "获取绿色参数",
    "bitbybit.color.getGreenParam_description": "获取绿色参数",
    "bitbybit.color.getBlueParam": "获取蓝色参数",
    "getBlueParam": "获取蓝色参数",
    "bitbybit.color.getBlueParam_description": "获取蓝色参数",
    "bitbybit.color.rgbToRed": "RGB转红",
    "rgbToRed": "RGB转红",
    "bitbybit.color.rgbToRed_description": "从RGB获取红色",
    "rgb to": "RGB转",
    "bitbybit.color.rgbToGreen": "RGB转绿",
    "rgbToGreen": "RGB转绿",
    "bitbybit.color.rgbToGreen_description": "从RGB获取绿色",
    "bitbybit.color.rgbToBlue": "RGB转蓝",
    "rgbToBlue": "RGB转蓝",
    "bitbybit.color.rgbToBlue_description": "从RGB获取蓝色",
    "bitbybit.color.invert": "反色",
    "invert": "反色",
    "bitbybit.color.invert_description": "反转颜色",
    "blackAndWhite": "黑白",
    "bitbybit.text.create": "创建",
    "bitbybit.text.create_description": "创建文本",
    "bitbybit.text.split": "分割",
    "bitbybit.text.split_description": "按分隔符分割文本",
    "separator": "分隔符",
    "bitbybit.text.replaceAll": "全部替换",
    "replaceAll": "全部替换",
    "bitbybit.text.replaceAll_description": "替换所有出现的文本",
    "search": "搜索",
    "replaceWith": "替换为",
    "bitbybit.text.join": "连接",
    "join": "连接",
    "bitbybit.text.join_description": "使用分隔符将项连接成文本",
    "string[]": "字符串数组",
    "bitbybit.text.toString": "转为字符串",
    "toString": "转为字符串",
    "bitbybit.text.toString_description": "将项转换为文本",
    "bitbybit.text.toStringEach": "逐项转为字符串",
    "toStringEach": "逐项转为字符串",
    "bitbybit.text.toStringEach_description": "将列表中的每个项转换为文本",
    "bitbybit.text.format": "格式化",
    "format": "格式化",
    "bitbybit.text.format_description": "使用值格式化文本",
    "values": "值",
    "bitbybit.text.vectorChar": "向量字符",
    "vectorChar": "向量字符",
    "bitbybit.text.vectorChar_description": "为字符创建向量段，并包含宽度和高度信息。",
    "char": "字符",
    "bitbybit.text.vectorText": "向量文本",
    "vectorText": "向量文本",
    "bitbybit.text.vectorText_description": "为给定文本创建向量文本行，并包含宽度和高度信息。",
    "bitbybit.dates.toDateString": "转换为日期字符串",
    "dates": "日期",
    "toDateString": "转换为日期字符串",
    "bitbybit.dates.toDateString_description": "将日期作为字符串值返回。",
    "date": "日期",
    "Date": "日期",
    "bitbybit.dates.toISOString": "转换为 ISO 字符串",
    "toISOString": "转换为 ISO 字符串",
    "bitbybit.dates.toISOString_description": "将日期作为 ISO 格式的字符串值返回。",
    "bitbybit.dates.toJSON": "转换为 JSON",
    "toJSON": "转换为 JSON",
    "bitbybit.dates.toJSON_description": "将日期作为 JSON 格式的字符串值返回。",
    "bitbybit.dates.toString": "转换为字符串",
    "bitbybit.dates.toString_description": "返回日期的字符串表示形式。字符串的格式取决于区域设置。",
    "bitbybit.dates.toTimeString": "转换为时间字符串",
    "toTimeString": "转换为时间字符串",
    "bitbybit.dates.toTimeString_description": "将时间作为字符串值返回。",
    "bitbybit.dates.toUTCString": "转换为 UTC 字符串",
    "toUTCString": "转换为 UTC 字符串",
    "bitbybit.dates.toUTCString_description": "使用世界协调时间 (UTC) 将日期转换为字符串返回。",
    "bitbybit.dates.now": "现在",
    "now": "现在",
    "bitbybit.dates.now_description": "返回当前日期和时间。",
    "bitbybit.dates.createDate": "创建日期",
    "createDate": "创建日期",
    "bitbybit.dates.createDate_description": "使用提供的日期参数创建新的日期对象。",
    "year": "年",
    "month": "月",
    "day": "日",
    "hours": "小时",
    "minutes": "分钟",
    "seconds": "秒",
    "milliseconds": "毫秒",
    "bitbybit.dates.createDateUTC": "创建 UTC 日期",
    "createDateUTC": "创建 UTC 日期",
    "bitbybit.dates.createDateUTC_description": "返回指定日期与 1970 年 1 月 1 日午夜世界协调时间 (UTC)（或 GMT）之间相差的毫秒数。",
    "bitbybit.dates.createFromUnixTimeStamp": "从 Unix 时间戳创建",
    "createFromUnixTimeStamp": "从 Unix 时间戳创建",
    "bitbybit.dates.createFromUnixTimeStamp_description": "使用提供的 Unix 时间戳创建新的日期对象。",
    "unixTimeStamp": "Unix 时间戳",
    "bitbybit.dates.parseDate": "解析日期",
    "parseDate": "解析日期",
    "bitbybit.dates.parseDate_description": "解析包含日期的字符串，并返回该日期与 1970 年 1 月 1 日午夜之间相差的毫秒数。",
    "parse": "解析",
    "dateString": "日期字符串",
    "bitbybit.dates.getDayOfMonth": "获取月份中的日期",
    "getDayOfMonth": "获取月份中的日期",
    "bitbybit.dates.getDayOfMonth_description": "获取月份中的日期（使用本地时间）。",
    "bitbybit.dates.getWeekday": "获取星期几",
    "getWeekday": "获取星期几",
    "bitbybit.dates.getWeekday_description": "获取星期几（使用本地时间）。",
    "bitbybit.dates.getYear": "获取年份",
    "getYear": "获取年份",
    "bitbybit.dates.getYear_description": "获取年份（使用本地时间）。",
    "bitbybit.dates.getMonth": "获取月份",
    "getMonth": "获取月份",
    "bitbybit.dates.getMonth_description": "获取月份（使用本地时间）。",
    "bitbybit.dates.getHours": "获取小时",
    "getHours": "获取小时",
    "bitbybit.dates.getHours_description": "获取日期中的小时（使用本地时间）。",
    "bitbybit.dates.getMinutes": "获取分钟",
    "getMinutes": "获取分钟",
    "bitbybit.dates.getMinutes_description": "获取 Date 对象中的分钟（使用本地时间）。",
    "bitbybit.dates.getSeconds": "获取秒数",
    "getSeconds": "获取秒数",
    "bitbybit.dates.getSeconds_description": "获取 Date 对象中的秒数（使用本地时间）。",
    "bitbybit.dates.getMilliseconds": "获取毫秒",
    "getMilliseconds": "获取毫秒",
    "bitbybit.dates.getMilliseconds_description": "获取 Date 对象中的毫秒（使用本地时间）。",
    "bitbybit.dates.getTime": "获取时间",
    "getTime": "获取时间",
    "bitbybit.dates.getTime_description": "返回自 1970 年 1 月 1 日午夜 UTC 以来的存储时间值（以毫秒为单位）。",
    "bitbybit.dates.getUTCYear": "获取 UTC 年份",
    "getUTCYear": "获取 UTC 年份",
    "bitbybit.dates.getUTCYear_description": "获取年份（使用世界协调时间 UTC）。",
    "bitbybit.dates.getUTCMonth": "获取 UTC 月份",
    "getUTCMonth": "获取 UTC 月份",
    "bitbybit.dates.getUTCMonth_description": "获取 Date 对象的月份（使用世界协调时间 UTC）。",
    "bitbybit.dates.getUTCDay": "获取 UTC 日期",
    "getUTCDay": "获取 UTC 日期",
    "bitbybit.dates.getUTCDay_description": "获取月份中的日期（使用世界协调时间 UTC）。",
    "bitbybit.dates.getUTCHours": "获取 UTC 小时",
    "getUTCHours": "获取 UTC 小时",
    "bitbybit.dates.getUTCHours_description": "获取 Date 对象中的小时值（使用世界协调时间 UTC）。",
    "bitbybit.dates.getUTCMinutes": "获取 UTC 分钟",
    "getUTCMinutes": "获取 UTC 分钟",
    "bitbybit.dates.getUTCMinutes_description": "获取 Date 对象中的分钟（使用世界协调时间 UTC）。",
    "bitbybit.dates.getUTCSeconds": "获取 UTC 秒数",
    "getUTCSeconds": "获取 UTC 秒数",
    "bitbybit.dates.getUTCSeconds_description": "获取 Date 对象中的秒数（使用世界协调时间 UTC）。",
    "bitbybit.dates.getUTCMilliseconds": "获取 UTC 毫秒",
    "getUTCMilliseconds": "获取 UTC 毫秒",
    "bitbybit.dates.getUTCMilliseconds_description": "获取 Date 对象中的毫秒（使用世界协调时间 UTC）。",
    "bitbybit.dates.setYear": "设置年份",
    "setYear": "设置年份",
    "bitbybit.dates.setYear_description": "设置 Date 对象的年份（使用本地时间）。",
    "bitbybit.dates.setMonth": "设置月份",
    "setMonth": "设置月份",
    "bitbybit.dates.setMonth_description": "设置 Date 对象中的月份值（使用本地时间）。",
    "bitbybit.dates.setDayOfMonth": "设置月份中的日期",
    "setDayOfMonth": "设置月份中的日期",
    "bitbybit.dates.setDayOfMonth_description": "设置 Date 对象中月份的数值日期（使用本地时间）。",
    "bitbybit.dates.setHours": "设置小时",
    "setHours": "设置小时",
    "bitbybit.dates.setHours_description": "设置 Date 对象中的小时值（使用本地时间）。",
    "bitbybit.dates.setMinutes": "设置分钟",
    "setMinutes": "设置分钟",
    "bitbybit.dates.setMinutes_description": "设置 Date 对象中的分钟值（使用本地时间）。",
    "bitbybit.dates.setSeconds": "设置秒数",
    "setSeconds": "设置秒数",
    "bitbybit.dates.setSeconds_description": "设置 Date 对象中的秒数值（使用本地时间）。",
    "bitbybit.dates.setMilliseconds": "设置毫秒",
    "setMilliseconds": "设置毫秒",
    "bitbybit.dates.setMilliseconds_description": "设置 Date 对象中的毫秒值（使用本地时间）。",
    "bitbybit.dates.setTime": "设置时间",
    "setTime": "设置时间",
    "bitbybit.dates.setTime_description": "设置 Date 对象中的日期和时间值。",
    "time": "时间",
    "bitbybit.dates.setUTCYear": "设置 UTC 年份",
    "setUTCYear": "设置 UTC 年份",
    "bitbybit.dates.setUTCYear_description": "设置 Date 对象中的年份值（使用世界协调时间 UTC）。",
    "bitbybit.dates.setUTCMonth": "设置 UTC 月份",
    "setUTCMonth": "设置 UTC 月份",
    "bitbybit.dates.setUTCMonth_description": "设置 Date 对象中的月份值（使用世界协调时间 UTC）。",
    "bitbybit.dates.setUTCDay": "设置 UTC 日期",
    "setUTCDay": "设置 UTC 日期",
    "bitbybit.dates.setUTCDay_description": "设置 Date 对象中月份的数值日期（使用世界协调时间 UTC）。",
    "bitbybit.dates.setUTCHours": "设置 UTC 小时",
    "setUTCHours": "设置 UTC 小时",
    "bitbybit.dates.setUTCHours_description": "设置 Date 对象中的小时值（使用世界协调时间 UTC）。",
    "bitbybit.dates.setUTCMinutes": "设置 UTC 分钟",
    "setUTCMinutes": "设置 UTC 分钟",
    "bitbybit.dates.setUTCMinutes_description": "设置 Date 对象中的分钟值（使用世界协调时间 UTC）。",
    "bitbybit.dates.setUTCSeconds": "设置 UTC 秒数",
    "setUTCSeconds": "设置 UTC 秒数",
    "bitbybit.dates.setUTCSeconds_description": "设置 Date 对象中的秒数值（使用世界协调时间 UTC）。",
    "bitbybit.dates.setUTCMilliseconds": "设置 UTC 毫秒",
    "setUTCMilliseconds": "设置 UTC 毫秒",
    "bitbybit.dates.setUTCMilliseconds_description": "设置 Date 对象中的毫秒值（使用世界协调时间 UTC）。",
    "bitbybit.json.stringify": "字符串化",
    "json": "JSON",
    "stringify": "字符串化",
    "bitbybit.json.stringify_description": "将输入值字符串化",
    "bitbybit.json.parse": "解析",
    "bitbybit.json.parse_description": "解析输入值",
    "bitbybit.json.query": "查询",
    "query": "查询",
    "bitbybit.json.query_description": "查询输入值",
    "jsonpath": "JSON路径",
    "bitbybit.json.setValueOnProp": "设置属性值",
    "setValueOnProp": "设置属性值",
    "bitbybit.json.setValueOnProp_description": "在JSON属性上设置值",
    "props": "属性",
    "bitbybit.json.getJsonFromArrayByFirstPropMatch": "按首个属性匹配从数组获取JSON",
    "getJsonFromArrayByFirstPropMatch": "按首个属性匹配从数组获取JSON",
    "bitbybit.json.getJsonFromArrayByFirstPropMatch_description": "按首个属性匹配从数组获取JSON",
    "jsonArray": "JSON数组",
    "any[]": "任意类型数组",
    "match": "匹配项",
    "bitbybit.json.getValueOnProp": "获取属性值",
    "getValueOnProp": "获取属性值",
    "bitbybit.json.getValueOnProp_description": "获取JSON中属性的值",
    "bitbybit.json.setValue": "设置值",
    "bitbybit.json.setValue_description": "按路径设置JSON的值",
    "prop": "属性",
    "bitbybit.json.setValuesOnPaths": "在路径上设置值",
    "setValuesOnPaths": "在路径上设置值",
    "bitbybit.json.setValuesOnPaths_description": "按路径设置JSON的多个值",
    "paths": "路径",
    "bitbybit.json.paths": "路径",
    "bitbybit.json.paths_description": "查找对象中元素的路径",
    "bitbybit.json.createEmpty": "空对象",
    "bitbybit.json.createEmpty_description": "创建空的JavaScript对象",
    "bitbybit.json.previewAndSaveJson": "预览并保存JSON",
    "previewAndSaveJson": "预览并保存JSON",
    "bitbybit.json.previewAndSaveJson_description": "预览JSON并提供保存选项",
    "preview": "预览",
    "bitbybit.json.previewJson": "预览JSON",
    "previewJson": "预览JSON",
    "bitbybit.json.previewJson_description": "预览JSON",
    "bitbybit.verb.curve.createCurveByKnotsControlPointsWeights": "通过节点、控制点、权重创建曲线",
    "verb": "Verb库",
    "createCurveByKnotsControlPointsWeights": "通过节点、控制点、权重创建曲线",
    "bitbybit.verb.curve.createCurveByKnotsControlPointsWeights_description": "使用节点、控制点、权重创建NURBS曲线",
    "degree": "次数",
    "knots": "节点",
    "bitbybit.verb.curve.createCurveByPoints": "通过点创建曲线",
    "createCurveByPoints": "通过点创建曲线",
    "bitbybit.verb.curve.createCurveByPoints_description": "使用控制点创建NURBS曲线",
    "bitbybit.verb.curve.createBezierCurve": "贝塞尔曲线",
    "createBezierCurve": "贝塞尔曲线",
    "bitbybit.verb.curve.createBezierCurve_description": "使用控制点和权重创建贝塞尔NURBS曲线",
    "bitbybit.verb.curve.clone": "克隆",
    "bitbybit.verb.curve.clone_description": "克隆NURBS曲线",
    "bitbybit.verb.curve.closestParam": "最近参数",
    "closestParam": "最近参数",
    "bitbybit.verb.curve.closestParam_description": "从点查找NURBS曲线上最近的参数",
    "bitbybit.verb.curve.closestParams": "最近参数列表",
    "closestParams": "最近参数列表",
    "bitbybit.verb.curve.closestParams_description": "从点列表查找NURBS曲线上最近的参数列表",
    "bitbybit.verb.curve.closestPoint": "最近点",
    "closestPoint": "最近点",
    "bitbybit.verb.curve.closestPoint_description": "从点查找NURBS曲线上最近的点",
    "bitbybit.verb.curve.closestPoints": "最近点列表",
    "closestPoints": "最近点列表",
    "bitbybit.verb.curve.closestPoints_description": "从点列表查找NURBS曲线上最近的点列表",
    "bitbybit.verb.curve.controlPoints": "控制点",
    "controlPoints": "控制点",
    "bitbybit.verb.curve.controlPoints_description": "查找NURBS曲线的控制点",
    "bitbybit.verb.curve.degree": "次数",
    "bitbybit.verb.curve.degree_description": "查找NURBS曲线的次数",
    "bitbybit.verb.curve.derivatives": "导数",
    "derivatives": "导数",
    "bitbybit.verb.curve.derivatives_description": "查找NURBS曲线在参数处的导数",
    "numDerivatives": "导数阶数",
    "parameter": "参数",
    "bitbybit.verb.curve.divideByEqualArcLengthToParams": "按等弧长分割为参数",
    "divideByEqualArcLengthToParams": "按等弧长分割为参数",
    "bitbybit.verb.curve.divideByEqualArcLengthToParams_description": "将曲线按等弧长分割为参数",
    "subdivision": "细分",
    "bitbybit.verb.curve.divideByEqualArcLengthToPoints": "按等弧长分割为点",
    "divideByEqualArcLengthToPoints": "按等弧长分割为点",
    "bitbybit.verb.curve.divideByEqualArcLengthToPoints_description": "将曲线按等弧长分割为点",
    "bitbybit.verb.curve.divideByArcLengthToParams": "按弧长分割为参数",
    "divideByArcLengthToParams": "按弧长分割为参数",
    "bitbybit.verb.curve.divideByArcLengthToParams_description": "将曲线按弧长分割为参数",
    "bitbybit.verb.curve.divideByArcLengthToPoints": "按弧长分割为点",
    "divideByArcLengthToPoints": "按弧长分割为点",
    "bitbybit.verb.curve.divideByArcLengthToPoints_description": "将曲线按弧长分割为点",
    "bitbybit.verb.curve.divideCurvesByEqualArcLengthToPoints": "多曲线按等弧长分割为点",
    "divideCurvesByEqualArcLengthToPoints": "多曲线按等弧长分割为点",
    "bitbybit.verb.curve.divideCurvesByEqualArcLengthToPoints_description": "将多条曲线按等弧长分割为点",
    "bitbybit.verb.curve.divideCurvesByArcLengthToPoints": "多曲线按弧长分割为点",
    "divideCurvesByArcLengthToPoints": "多曲线按弧长分割为点",
    "bitbybit.verb.curve.divideCurvesByArcLengthToPoints_description": "将多条曲线按弧长分割为点",
    "bitbybit.verb.curve.domain": "定义域",
    "bitbybit.verb.curve.domain_description": "查找曲线参数的定义域区间",
    "bitbybit.verb.curve.startPoint": "起点",
    "bitbybit.verb.curve.startPoint_description": "曲线的起点",
    "bitbybit.verb.curve.endPoint": "终点",
    "bitbybit.verb.curve.endPoint_description": "曲线的终点",
    "bitbybit.verb.curve.startPoints": "起点列表",
    "bitbybit.verb.curve.startPoints_description": "曲线的起点列表",
    "bitbybit.verb.curve.endPoints": "终点列表",
    "bitbybit.verb.curve.endPoints_description": "曲线的终点列表",
    "bitbybit.verb.curve.knots": "节点",
    "bitbybit.verb.curve.knots_description": "查找NURBS曲线的节点",
    "bitbybit.verb.curve.lengthAtParam": "参数处长度",
    "lengthAtParam": "参数处长度",
    "bitbybit.verb.curve.lengthAtParam_description": "获取NURBS曲线在参数处的长度",
    "bitbybit.verb.curve.length": "长度",
    "bitbybit.verb.curve.length_description": "获取NURBS曲线的长度",
    "bitbybit.verb.curve.paramAtLength": "长度处参数",
    "paramAtLength": "长度处参数",
    "bitbybit.verb.curve.paramAtLength_description": "获取NURBS曲线上长度处的参数",
    "bitbybit.verb.curve.pointAtParam": "参数处点",
    "pointAtParam": "参数处点",
    "bitbybit.verb.curve.pointAtParam_description": "获取NURBS曲线上参数处的点",
    "bitbybit.verb.curve.pointsAtParam": "参数处点列表",
    "pointsAtParam": "参数处点列表",
    "bitbybit.verb.curve.pointsAtParam_description": "获取NURBS曲线上参数处的点列表",
    "bitbybit.verb.curve.reverse": "反转",
    "bitbybit.verb.curve.reverse_description": "反转NURBS曲线",
    "bitbybit.verb.curve.split": "分割",
    "bitbybit.verb.curve.split_description": "在参数处分割NURBS曲线",
    "bitbybit.verb.curve.tangent": "切线",
    "bitbybit.verb.curve.tangent_description": "NURBS曲线在参数处的切线",
    "bitbybit.verb.curve.tessellate": "细分曲面",
    "tessellate": "细分曲面",
    "bitbybit.verb.curve.tessellate_description": "将NURBS曲线细分为点",
    "bitbybit.verb.curve.transform": "变换",
    "bitbybit.verb.curve.transform_description": "变换NURBS曲线",
    "bitbybit.verb.curve.transformCurves": "变换多条曲线",
    "transformCurves": "变换多条曲线",
    "bitbybit.verb.curve.transformCurves_description": "变换NURBS曲线",
    "bitbybit.verb.curve.weights": "权重",
    "bitbybit.verb.curve.weights_description": "NURBS曲线的权重",
    "bitbybit.verb.curve.circle.createCircle": "圆",
    "createCircle": "圆",
    "bitbybit.verb.curve.circle.createCircle_description": "创建圆形NURBS曲线",
    "xAxis": "X轴",
    "yAxis": "Y轴",
    "bitbybit.verb.curve.circle.createArc": "圆弧",
    "createArc": "圆弧",
    "bitbybit.verb.curve.circle.createArc_description": "创建圆弧NURBS曲线",
    "minAngle": "最小角度",
    "maxAngle": "最大角度",
    "bitbybit.verb.curve.circle.center": "圆心",
    "bitbybit.verb.curve.circle.center_description": "获取圆或圆弧的圆心",
    "bitbybit.verb.curve.circle.radius": "半径",
    "bitbybit.verb.curve.circle.radius_description": "获取圆或圆弧的半径",
    "bitbybit.verb.curve.circle.maxAngle": "最大角度",
    "bitbybit.verb.curve.circle.maxAngle_description": "获取圆弧的最大角度（度）",
    "bitbybit.verb.curve.circle.minAngle": "最小角度",
    "bitbybit.verb.curve.circle.minAngle_description": "获取圆弧的最小角度（度）",
    "bitbybit.verb.curve.circle.xAxis": "X轴",
    "bitbybit.verb.curve.circle.xAxis_description": "获取圆弧的X轴",
    "bitbybit.verb.curve.circle.yAxis": "Y轴",
    "bitbybit.verb.curve.circle.yAxis_description": "获取圆弧的Y轴",
    "bitbybit.verb.curve.ellipse.createEllipse": "椭圆",
    "createEllipse": "椭圆",
    "bitbybit.verb.curve.ellipse.createEllipse_description": "创建椭圆NURBS曲线",
    "bitbybit.verb.curve.ellipse.createArc": "椭圆弧",
    "bitbybit.verb.curve.ellipse.createArc_description": "创建椭圆弧NURBS曲线",
    "bitbybit.verb.curve.ellipse.center": "中心",
    "bitbybit.verb.curve.ellipse.center_description": "获取椭圆或椭圆弧的中心",
    "bitbybit.verb.curve.ellipse.maxAngle": "最大角度",
    "bitbybit.verb.curve.ellipse.maxAngle_description": "获取椭圆弧的最大角度（度）",
    "bitbybit.verb.curve.ellipse.minAngle": "最小角度",
    "bitbybit.verb.curve.ellipse.minAngle_description": "获取椭圆弧的最小角度（度）",
    "bitbybit.verb.curve.ellipse.xAxis": "X轴",
    "bitbybit.verb.curve.ellipse.xAxis_description": "获取椭圆弧或椭圆的X轴",
    "bitbybit.verb.curve.ellipse.yAxis": "Y轴",
    "bitbybit.verb.curve.ellipse.yAxis_description": "获取椭圆弧或椭圆的Y轴",
    "bitbybit.verb.surface.boundaries": "边界",
    "boundaries": "边界",
    "bitbybit.verb.surface.boundaries_description": "获取曲面的边界边NURBS曲线",
    "bitbybit.verb.surface.createSurfaceByCorners": "通过角点创建曲面",
    "createSurfaceByCorners": "通过角点创建曲面",
    "bitbybit.verb.surface.createSurfaceByCorners_description": "使用4个角点创建曲面",
    "point3": "点3",
    "point4": "点4",
    "bitbybit.verb.surface.createSurfaceByKnotsControlPointsWeights": "通过节点、控制点、权重创建曲面",
    "createSurfaceByKnotsControlPointsWeights": "通过节点、控制点、权重创建曲面",
    "bitbybit.verb.surface.createSurfaceByKnotsControlPointsWeights_description": "使用UV节点、次数、点、权重创建NURBS曲面",
    "degreeU": "U次数",
    "degreeV": "V次数",
    "knotsU": "U节点",
    "knotsV": "V节点",
    "bitbybit.verb.surface.createSurfaceByLoftingCurves": "通过放样曲线创建曲面",
    "createSurfaceByLoftingCurves": "通过放样曲线创建曲面",
    "bitbybit.verb.surface.createSurfaceByLoftingCurves_description": "通过放样曲线创建NURBS曲面",
    "bitbybit.verb.surface.clone": "克隆",
    "bitbybit.verb.surface.clone_description": "克隆NURBS曲面",
    "bitbybit.verb.surface.closestParam": "最近参数",
    "bitbybit.verb.surface.closestParam_description": "从点查找曲面上最近的参数",
    "bitbybit.verb.surface.closestPoint": "最近点",
    "bitbybit.verb.surface.closestPoint_description": "从点查找曲面上最近的点",
    "bitbybit.verb.surface.controlPoints": "控制点",
    "bitbybit.verb.surface.controlPoints_description": "获取曲面上的控制点",
    "bitbybit.verb.surface.degreeU": "U次数",
    "bitbybit.verb.surface.degreeU_description": "获取曲面的U次数",
    "bitbybit.verb.surface.degreeV": "V次数",
    "bitbybit.verb.surface.degreeV_description": "获取曲面的V次数",
    "bitbybit.verb.surface.derivatives": "导数",
    "bitbybit.verb.surface.derivatives_description": "获取曲面在UV处的导数",
    "u": "U",
    "v": "V",
    "bitbybit.verb.surface.domainU": "U定义域",
    "domainU": "U定义域",
    "bitbybit.verb.surface.domainU_description": "获取曲面的U定义域",
    "bitbybit.verb.surface.domainV": "V定义域",
    "domainV": "V定义域",
    "bitbybit.verb.surface.domainV_description": "获取曲面的V定义域",
    "bitbybit.verb.surface.isocurve": "等参数曲线",
    "isocurve": "等参数曲线",
    "bitbybit.verb.surface.isocurve_description": "获取曲面上的NURBS等参数曲线",
    "useV": "使用V方向",
    "bitbybit.verb.surface.isocurvesSubdivision": "等参数曲线细分",
    "isocurvesSubdivision": "等参数曲线细分",
    "bitbybit.verb.surface.isocurvesSubdivision_description": "将曲面细分为等参数曲线",
    "isocurveSegments": "等参数曲线段数",
    "bitbybit.verb.surface.isocurvesAtParams": "参数处等参数曲线",
    "isocurvesAtParams": "参数处等参数曲线",
    "bitbybit.verb.surface.isocurvesAtParams_description": "在参数处将曲面细分为等参数曲线",
    "parameters": "参数",
    "bitbybit.verb.surface.knotsU": "U节点",
    "bitbybit.verb.surface.knotsU_description": "获取曲面的U节点",
    "bitbybit.verb.surface.knotsV": "V节点",
    "bitbybit.verb.surface.knotsV_description": "获取曲面的V节点",
    "bitbybit.verb.surface.normal": "法线",
    "bitbybit.verb.surface.normal_description": "获取曲面在UV处的法线",
    "bitbybit.verb.surface.point": "点",
    "bitbybit.verb.surface.point_description": "获取曲面在UV处的点",
    "bitbybit.verb.surface.reverse": "反转",
    "bitbybit.verb.surface.reverse_description": "反转NURBS曲面的UV和等参数曲线",
    "bitbybit.verb.surface.split": "分割",
    "bitbybit.verb.surface.split_description": "将NURBS曲面分割为两部分",
    "bitbybit.verb.surface.transformSurface": "变换曲面",
    "transformSurface": "变换曲面",
    "bitbybit.verb.surface.transformSurface_description": "使用变换矩阵变换NURBS曲面",
    "bitbybit.verb.surface.weights": "权重",
    "bitbybit.verb.surface.weights_description": "获取曲面的权重",
    "bitbybit.verb.surface.cone.create": "创建",
    "cone": "圆锥",
    "bitbybit.verb.surface.cone.create_description": "创建圆锥NURBS曲面",
    "bitbybit.verb.surface.cone.axis": "轴",
    "bitbybit.verb.surface.cone.axis_description": "获取圆锥轴",
    "bitbybit.verb.surface.cone.base": "基底",
    "bitbybit.verb.surface.cone.base_description": "获取圆锥基底",
    "bitbybit.verb.surface.cone.height": "高度",
    "bitbybit.verb.surface.cone.height_description": "获取圆锥高度",
    "bitbybit.verb.surface.cone.radius": "半径",
    "bitbybit.verb.surface.cone.radius_description": "获取圆锥半径",
    "bitbybit.verb.surface.cone.xAxis": "X轴",
    "bitbybit.verb.surface.cone.xAxis_description": "获取圆锥X轴",
    "bitbybit.verb.surface.cylinder.create": "创建",
    "bitbybit.verb.surface.cylinder.create_description": "创建圆柱NURBS曲面",
    "bitbybit.verb.surface.cylinder.axis": "轴",
    "bitbybit.verb.surface.cylinder.axis_description": "获取圆柱轴",
    "bitbybit.verb.surface.cylinder.base": "基底",
    "bitbybit.verb.surface.cylinder.base_description": "获取圆柱基底",
    "bitbybit.verb.surface.cylinder.height": "高度",
    "bitbybit.verb.surface.cylinder.height_description": "获取圆柱高度",
    "bitbybit.verb.surface.cylinder.radius": "半径",
    "bitbybit.verb.surface.cylinder.radius_description": "获取圆柱半径",
    "bitbybit.verb.surface.cylinder.xAxis": "X轴",
    "bitbybit.verb.surface.cylinder.xAxis_description": "获取圆柱X轴",
    "bitbybit.verb.surface.extrusion.create": "创建",
    "extrusion": "拉伸",
    "bitbybit.verb.surface.extrusion.create_description": "从曲线创建NURBS曲面拉伸",
    "profile": "轮廓",
    "bitbybit.verb.surface.extrusion.direction": "方向",
    "bitbybit.verb.surface.extrusion.direction_description": "获取拉伸的方向向量",
    "bitbybit.verb.surface.extrusion.profile": "轮廓",
    "bitbybit.verb.surface.extrusion.profile_description": "获取拉伸的轮廓NURBS曲线",
    "bitbybit.verb.surface.sphere.create": "创建",
    "bitbybit.verb.surface.sphere.create_description": "创建球面NURBS曲面",
    "bitbybit.verb.surface.sphere.radius": "半径",
    "bitbybit.verb.surface.sphere.radius_description": "获取球面NURBS曲面的半径",
    "bitbybit.verb.surface.sphere.center": "中心",
    "bitbybit.verb.surface.sphere.center_description": "获取球面NURBS曲面的中心",
    "bitbybit.verb.surface.revolved.create": "创建",
    "revolved": "旋转体",
    "bitbybit.verb.surface.revolved.create_description": "创建旋转NURBS曲面",
    "bitbybit.verb.surface.revolved.profile": "轮廓",
    "bitbybit.verb.surface.revolved.profile_description": "获取旋转曲面的轮廓NURBS曲线",
    "revolution": "旋转",
    "bitbybit.verb.surface.revolved.center": "中心",
    "bitbybit.verb.surface.revolved.center_description": "获取旋转曲面的中心NURBS曲线",
    "bitbybit.verb.surface.revolved.axis": "轴",
    "bitbybit.verb.surface.revolved.axis_description": "获取旋转曲面的旋转轴",
    "bitbybit.verb.surface.revolved.angle": "角度",
    "bitbybit.verb.surface.revolved.angle_description": "获取旋转曲面的旋转角度",
    "bitbybit.verb.surface.sweep.create": "创建",
    "sweep": "扫掠",
    "bitbybit.verb.surface.sweep.create_description": "创建扫掠NURBS曲面",
    "rail": "路径",
    "bitbybit.verb.surface.sweep.profile": "轮廓",
    "bitbybit.verb.surface.sweep.profile_description": "获取扫掠曲面的轮廓NURBS曲线",
    "bitbybit.verb.surface.sweep.rail": "路径",
    "bitbybit.verb.surface.sweep.rail_description": "获取扫掠曲面的路径NURBS曲线",
    "bitbybit.verb.intersect.curves": "曲线",
    "bitbybit.verb.intersect.curves_description": "求两个Verb NURBS曲线的交点",
    "firstCurve": "第一条曲线",
    "secondCurve": "第二条曲线",
    "bitbybit.verb.intersect.curveAndSurface": "曲线与曲面",
    "curveAndSurface": "曲线与曲面",
    "bitbybit.verb.intersect.curveAndSurface_description": "求曲线与曲面的交点",
    "bitbybit.verb.intersect.surfaces": "曲面",
    "bitbybit.verb.intersect.surfaces_description": "求两个曲面的交线",
    "firstSurface": "第一个曲面",
    "secondSurface": "第二个曲面",
    "bitbybit.verb.intersect.curveCurveFirstParams": "曲线曲线第一参数",
    "curveCurveFirstParams": "曲线曲线第一参数",
    "bitbybit.verb.intersect.curveCurveFirstParams_description": "获取第一条曲线上的交点参数",
    "intersections": "交点/交线",
    "BaseTypes.CurveCurveIntersection[]": "基础类型曲线曲线交点数组",
    "bitbybit.verb.intersect.curveCurveSecondParams": "曲线曲线第二参数",
    "curveCurveSecondParams": "曲线曲线第二参数",
    "bitbybit.verb.intersect.curveCurveSecondParams_description": "获取第二条曲线上的交点参数",
    "bitbybit.verb.intersect.curveCurveFirstPoints": "曲线曲线第一点",
    "curveCurveFirstPoints": "曲线曲线第一点",
    "bitbybit.verb.intersect.curveCurveFirstPoints_description": "获取第一条曲线上的交点",
    "bitbybit.verb.intersect.curveCurveSecondPoints": "曲线曲线第二点",
    "curveCurveSecondPoints": "曲线曲线第二点",
    "bitbybit.verb.intersect.curveCurveSecondPoints_description": "获取第二条曲线上的交点",
    "bitbybit.verb.intersect.curveSurfaceCurveParams": "曲线曲面曲线参数",
    "curveSurfaceCurveParams": "曲线曲面曲线参数",
    "bitbybit.verb.intersect.curveSurfaceCurveParams_description": "获取曲线上的交点参数",
    "BaseTypes.CurveSurfaceIntersection[]": "基础类型曲线曲面交点数组",
    "bitbybit.verb.intersect.curveSurfaceSurfaceParams": "曲线曲面曲面参数",
    "curveSurfaceSurfaceParams": "曲线曲面曲面参数",
    "bitbybit.verb.intersect.curveSurfaceSurfaceParams_description": "获取曲面上的交点参数",
    "bitbybit.verb.intersect.curveSurfaceCurvePoints": "曲线曲面曲线上点",
    "curveSurfaceCurvePoints": "曲线曲面曲线上点",
    "bitbybit.verb.intersect.curveSurfaceCurvePoints_description": "获取曲线上的交点",
    "bitbybit.verb.intersect.curveSurfaceSurfacePoints": "曲线曲面曲面上点",
    "curveSurfaceSurfacePoints": "曲线曲面曲面上点",
    "bitbybit.verb.intersect.curveSurfaceSurfacePoints_description": "获取曲面上的交点",
    "bitbybit.tag.create": "创建",
    "tag": "标签",
    "bitbybit.tag.create_description": "创建标签数据传输对象",
    "adaptDepth": "适应深度",
    "needsUpdate": "需要更新",
    "bitbybit.time.registerRenderFunction": "注册渲染函数",
    "registerRenderFunction": "注册渲染函数",
    "bitbybit.time.registerRenderFunction_description": "将函数注册到渲染循环",
    "bitbybit.asset.getFile": "获取文件",
    "asset": "资产",
    "getFile": "获取文件",
    "bitbybit.asset.getFile_description": "获取资产文件",
    "bitbybit.asset.getLocalFile": "获取本地文件",
    "getLocalFile": "获取本地文件",
    "bitbybit.asset.getLocalFile_description": "从浏览器获取本地资产文件",
    "bitbybit.asset.fetchBlob": "获取Blob",
    "fetchBlob": "获取Blob",
    "bitbybit.asset.fetchBlob_description": "从CORS URL获取Blob",
    "fetch": "获取",
    "bitbybit.asset.fetchFile": "获取文件",
    "fetchFile": "获取文件",
    "bitbybit.asset.fetchFile_description": "从CORS URL获取文件",
    "bitbybit.asset.fetchJSON": "获取JSON",
    "fetchJSON": "获取JSON",
    "bitbybit.asset.fetchJSON_description": "从CORS URL获取JSON",
    "bitbybit.asset.fetchText": "获取文本",
    "fetchText": "获取文本",
    "bitbybit.asset.fetchText_description": "从CORS URL获取文本",
    "bitbybit.asset.createObjectURL": "对象URL",
    "createObjectURL": "对象URL",
    "bitbybit.asset.createObjectURL_description": "创建指向内存中文件的URL",
    "file": "文件",
    "File | Blob": "文件或Blob",
    "bitbybit.asset.createObjectURLs": "对象URL列表",
    "createObjectURLs": "对象URL列表",
    "bitbybit.asset.createObjectURLs_description": "创建指向内存中文件的URL列表",
    "files": "文件列表",
    "(File | Blob)[]": "文件或Blob数组",
    "exec": "执行",
    "Visible": "可见",
    "Hidden": "隐藏",
    "flatten": "扁平化",
    "force exec": "强制执行",
    "console log": "控制台日志",
    "preview data": "预览数据",
    "flow": "流程",
    "code": "代码",
    "runner": "运行器",
    "counters": "计数器",
    "actions": "动作",
    "loops": "循环",
    "interval": "间隔",
    "delay": "延迟",
    "expire": "过期",
    "timeout": "超时",
    "counter min max": "计数器(最小/最大)",
    "counter steps": "计数器(步进)",
    "reset": "重置",
    "trigger": "触发器",
    "mouse": "鼠标",
    "mouse click": "鼠标点击",
    "key": "键",
    "pointer": "指针",
    "pick info": "拾取信息",
    "down": "按下",
    "wheel": "滚轮",
    "tap": "轻触",
    "double tap": "双击",
    "render": "渲染",
    "passed ms": "经过毫秒数",
    "babylon observable listener": "Babylon可观察对象监听器",
    "object": "对象",
    "observable selector": "可观察对象选择器",
    "get event data": "获取事件数据",
    "exec click": "执行点击",
    "exec down": "执行按下",
    "toggle": "切换",
    "flip flop": "触发器翻转",
    "boolean gate": "布尔门",
    "boolean gate silent": "静默布尔门",
    "is undefined": "是否未定义",
    "for loop": "For循环",
    "last": "最后",
    "for each loop": "For Each循环",
    "element": "元素",
    "body": "循环体",
    "complete": "完成",
    "editors": "编辑器",
    "inputs": "输入",
    "outputs": "输出",
    "recent": "最近",
    "Clear": "清除",
    "Run": "运行",
    "Swap Canvas": "切换画布",
    "Local Assets": "本地资产",
    "Import": "导入",
    "Copy to Clipboard": "复制到剪贴板",
    "Paste from Clipboard": "从剪贴板粘贴",
    "Export": "导出",
    "Export to runner": "导出到运行器",
    "Clean Cache": "清理缓存",
    "Community": "社区",
    "Sponsors and Partners": "赞助商与合作伙伴",
    "API Documentation": "API文档",
    "About": "关于",
    "Toolbox": "工具箱",
    "More": "更多",
    "bitbybit.code.typeScriptEditor": "TypeScript编辑器",
    "bitbybit.code.typeScriptEditor_description": "允许在一个函数中编写带有完整bitbybit智能提示的TypeScript代码。start函数的返回值将作为组件的输出。",
    "bitbybit.code.javaScriptEditor": "JavaScript编辑器",
    "bitbybit.code.javaScriptEditor_description": "允许在一个函数中编写JavaScript代码。start函数的返回值将作为组件的输出。",
    "bitbybit.code.jsonEditor": "JSON编辑器",
    "bitbybit.code.jsonEditor_description": "允许编写JSON代码。start函数的返回值将作为组件的输出。",
    "bitbybit.flow.actions.keyboard": "键盘",
    "bitbybit.flow.actions.keyboard_description": "点击按钮时，将在键盘事件上执行。",
    "bitbybit.flow.actions.mouseClick": "鼠标点击",
    "bitbybit.flow.actions.mouseClick_description": "点击按钮时，将在鼠标事件上执行。",
    "bitbybit.flow.actions.start": "开始",
    "bitbybit.flow.actions.start_description": "启动控制流并触发执行。",
    "bitbybit.flow.actions.trigger": "触发器",
    "bitbybit.flow.actions.trigger_description": "点击按钮触发执行。",
    "bitbybit.flow.babylon.gui.button": "按钮",
    "bitbybit.flow.babylon.gui.button_description": "在Babylon.js画布上单击鼠标左键时，将在各种指针事件上执行。",
    "bitbybit.flow.babylon.scene.pointerEvents": "指针",
    "bitbybit.flow.babylon.scene.pointerEvents_description": "在Babylon.js画布上单击鼠标左键时，将在各种指针事件上执行。",
    "bitbybit.flow.babylon.getEventDataFromObservedResult": "获取事件数据",
    "bitbybit.flow.babylon.getEventDataFromObservedResult_description": "从可观察对象监听器的观察结果中获取事件数据。",
    "bitbybit.flow.babylon.observableListener": "Babylon可观察对象监听器",
    "bitbybit.flow.babylon.observableListener_description": "将订阅并监听任何Babylon.js可观察对象。",
    "bitbybit.flow.babylon.render": "渲染",
    "bitbybit.flow.babylon.render_description": "在每个Babylon.js渲染帧上执行。",
    "bitbybit.flow.counters.counterMinMax": "计数器(最小/最大)",
    "bitbybit.flow.counters.counterMinMax_description": "在最小值和最大值之间计算流程执行次数。达到最大值时重置。",
    "bitbybit.flow.counters.counterSteps": "计数器(步进)",
    "bitbybit.flow.counters.counterSteps_description": "从给定的计数值开始，每次执行按列表中的给定步长增加，计算流程执行次数，直到步长完成。达到结束时重置。",
    "bitbybit.flow.counters.counter": "计数器",
    "bitbybit.flow.counters.counter_description": "计算流程执行次数。",
    "bitbybit.flow.logic.booleanGateSilent": "静默布尔门",
    "bitbybit.flow.logic.booleanGateSilent_description": "根据提供的布尔值触发不同的执行事件，但仅在布尔值改变时执行，这可以防止即使没有变化也持续触发多个事件。",
    "bitbybit.flow.logic.booleanGate": "布尔门",
    "bitbybit.flow.logic.booleanGate_description": "根据提供的布尔值触发不同的执行事件。",
    "bitbybit.flow.logic.flipFlop": "触发器翻转",
    "bitbybit.flow.logic.flipFlop_description": "每次执行事件时，将触发不同的事件，实质上创建了切换功能。",
    "bitbybit.flow.logic.isUndefined": "是否未定义",
    "bitbybit.flow.logic.isUndefined_description": "检查提供的值是否未定义，并触发真或假事件。",
    "bitbybit.flow.loops.forEach": "For Each循环",
    "bitbybit.flow.loops.forEach_description": "遍历列表中所有元素的For Each循环。",
    "bitbybit.flow.loops.for": "For循环",
    "bitbybit.flow.loops.for_description": "在两个值之间执行循环体的For循环。",
    "bitbybit.flow.time.delay": "延迟",
    "bitbybit.flow.time.delay_description": "按给定的超时时间（毫秒）延迟执行。",
    "bitbybit.flow.time.interval": "间隔",
    "bitbybit.flow.time.interval_description": "每隔给定的间隔时间（毫秒）执行流程。",
    "bitbybit.lists.createList": "创建列表",
    "bitbybit.lists.createList_description": "从给定元素创建列表。",
    "bitbybit.lists.flatten": "扁平化",
    "bitbybit.lists.flatten_description": "将列表的列表扁平化为单个列表。",
    "bitbybit.lists.passThrough": "传递",
    "bitbybit.lists.passThrough_description": "将值转换为'any'类型，并将输入传递到输出，不做任何更改。",
    "bitbybit.math.numberSlider": "数字滑块",
    "bitbybit.math.numberSlider_description": "创建带有滑块的数字。可以设置最小值、最大值和步长。",
    "bitbybit.consoleLog": "控制台日志",
    "bitbybit.consoleLog_description": "将输入记录到浏览器控制台。",
    "bitbybit.previewData": "预览数据",
    "bitbybit.previewData_description": "在预览区域显示输入数据。可以是文本、数字、JSON对象、数组等。不允许循环JavaScript对象。",
    "bitbybit.runner.getRunnerInputValue": "获取运行器输入值",
    "bitbybit.runner.getRunnerInputValue_description": "从输入JSON获取运行器输入值。此组件在编辑器上下文中始终返回未定义的值。",
    "bitbybit.runner.getRunnerInputs": "获取运行器输入",
    "bitbybit.runner.getRunnerInputs_description": "获取JSON格式的运行器输入。此组件在编辑器上下文中始终返回空对象。",
    "bitbybit.runner.run": "运行",
    "bitbybit.runner.run_description": "运行运行器的JavaScript代码。",
    "bitbybit.runner.setRunnerResult": "设置运行器结果",
    "bitbybit.runner.setRunnerResult_description": "为运行器设置完整的JSON结果。请注意，设置值更安全，因为此方法将使用提供的值覆盖整个结果对象。",
    "bitbybit.runner.setRunnerResultArrayValue": "设置运行器结果数组值",
    "bitbybit.runner.setRunnerResultArrayValue_description": "在JSON对象的属性上设置运行器结果值。每个值都将添加到一个数组中，该数组是该属性的值。",
    "bitbybit.runner.setRunnerResultValue": "设置运行器结果值",
    "bitbybit.runner.setRunnerResultValue_description": "在JSON对象的属性上设置运行器结果值。",
    "bitbybit.text.areaCreate": "文本区域",
    "bitbybit.text.areaCreate_description": "在编辑器中创建文本区域。可以设置区域的文本、宽度和高度。",
    "update on drag": "拖动时更新",
    "paste": "粘贴",
    "duplicate": "复制",
    "delete": "删除",
    "keyboard": "键盘",
    "data": "数据",
    "observables": "可观察对象",
    "buttons": "按钮",
    "variables": "变量",
    "functions": "函数",
    "loop": "循环",
    "apply": "应用",
    "async context": "异步上下文",
    "async context description": "创建可以使用await组件的异步上下文，简化异步代码执行和可读性。",
    "then": "然后",
    "await": "等待",
    "await description": "等待Promise解析并返回值。",
    "when the": "当",
    "error": "错误",
    "happens in the promise": "在Promise中发生",
    "catch": "捕获",
    "catch description": "捕获运行异步代码时可能发生的错误。用户可以选择适当地处理错误。",
    "cancel the interval execution": "取消间隔执行",
    "cancel the interval description": "通过提供句柄取消间隔执行。",
    "cancel the timeout execution": "取消超时执行",
    "cancel the timeout description": "通过提供句柄取消超时执行。",
    "key down": "按键按下",
    "key down descritpion": "按键按下事件发生时触发代码。",
    "key up": "按键抬起",
    "key up description": "按键抬起事件发生时触发代码。",
    "key press": "按键按下（持续）",
    "key press description": "按键按下（持续）事件发生时触发代码。",
    "is key pressed": "按键是否按下",
    "block_validation_required": "必须提供",
    "block_validation_of_length": "必须包含项目数量为",
    "block_validation_higher_or_equal": "必须大于或等于",
    "block_validation_lower_or_equal": "必须小于或等于",
    "block_validation_range": "必须在范围内",
    "block_validation_smaller_than": "必须小于",
    "block_validation_smaller_or_equal_than": "必须小于或等于",
    "block_validation_larger_than": "必须大于",
    "block_validation_larger_or_equal_than": "必须大于或等于",
    "save text to file": "保存文本到文件",
    "save text to file description": "将文本保存到文件，并允许您选择名称和扩展名。此组件不预览文本，可用于文本可能过大而无法在文本区域字段中编辑的情况。",
    "print text on screen": "在屏幕上打印文本",
    "print text on screen description": "在屏幕上打印文本。此组件对调试很有用。",
    "preview text and save to file": "预览文本并保存到文件",
    "preview text and save to file description": "在屏幕上打印文本并允许您将其保存到文件。此组件对调试很有用。",
    "register render loop listener": "注册渲染循环监听器",
    "and update": "并更新",
    "register render loop listener description": "在渲染循环中运行语句，并在 timeElapsedFromPreviousFrame 变量中指示自上一帧以来经过的时间。",
    "timeElapsedFromPreviousFrame_var": "timeElapsedFromPreviousFrame",
    "computing": "计算中",
    "result": "结果",
    "of promise is returned": "Promise的结果返回",
    "on pointer up": "指针抬起时",
    "on pointer move": "指针移动时",
    "on pointer down": "指针按下时",
    "of babylonjs observable object": "Babylon.js可观察对象的",
    "observable name": "可观察对象名称",
    "is key pressed description": "检查按键是否按下，并返回真或假。",
    "execute code after": "在之后执行代码",
    "execute code after description": "在给定的超时时间（秒）后执行代码。",
    "execute code every": "每隔...执行代码",
    "second(s)": "秒",
    "execute code every description": "每隔给定的间隔时间（秒）执行代码。",
    "handler": "句柄",
    "workers initialising": "工作线程初始化中",
    "Assets": "资产",
    "Local assets stored in browser cache:": "存储在浏览器缓存中的本地资产：",
    "Asset Name": "资产名称",
    "Name is required": "名称是必需的",
    "Asset with this name already exists, choose a different one": "具有此名称的资产已存在，请选择其他名称",
    "Allowed file formats:": "允许的文件格式：",
    "You must select an asset file": "您必须选择一个资产文件",
    "Upload Local Asset": "上传本地资产",
    "File Name": "文件名",
    "File Size": "文件大小",
    "Your browser does not support indexDB and you can't upload local asset files.": "您的浏览器不支持IndexDB，无法上传本地资产文件。",
    "Upload": "上传",
    "elements": "元素",
    "bitbybit.vector.vectorsTheSame": "向量相同",
    "vectorsTheSame": "向量相同",
    "bitbybit.vector.vectorsTheSame_description": "检查两个向量在给定公差内是否相同",
    "vec1": "向量 1",
    "vec2": "向量 2",
    "bitbybit.point.boundingBoxOfPoints": "点的边界框",
    "boundingBoxOfPoints": "点的边界框",
    "bitbybit.point.boundingBoxOfPoints_description": "获取点的边界框",
    "bitbybit.point.normalFromThreePoints": "由三点确定的法线",
    "normalFromThreePoints": "由三点确定的法线",
    "bitbybit.point.normalFromThreePoints_description": "从 3 个点创建法向量",
    "reverseNormal": "反转法线",
    "bitbybit.occt.shapes.wire.createLineWireWithExtensions": "带延伸的线框",
    "createLineWireWithExtensions": "带延伸的线框",
    "bitbybit.occt.shapes.wire.createLineWireWithExtensions_description": "创建带延伸的 OpenCascade 线框",
    "extensionStart": "延伸起点",
    "extensionEnd": "延伸终点",
    "bitbybit.occt.shapes.wire.midPointOnWire": "线框中点",
    "midPointOnWire": "线框中点",
    "bitbybit.occt.shapes.wire.midPointOnWire_description": "计算参数为 0.5 时线框上的中点",
    "centerOnOrigin": "在原点居中",
    "bitbybit.occt.shapes.wire.textWiresWithData": "带数据的文本线框",
    "textWiresWithData": "带数据的文本线框",
    "bitbybit.occt.shapes.wire.textWiresWithData_description": "从文本线框创建 OpenCascade 复合体，并根据 A. V. Hershey 博士创建的 simplex 字体返回附加信息",
    "bitbybit.occt.transforms.alignNormAndAxis": "对齐法线和轴",
    "alignNormAndAxis": "对齐法线和轴",
    "bitbybit.occt.transforms.alignNormAndAxis_description": "将形状与法线和轴对齐",
    "fromNorm": "从法线",
    "fromAx": "从轴",
    "toNorm": "到法线",
    "toAx": "到轴",
    "bitbybit.occt.dimensions.simpleLinearLengthDimension": "简单线性长度标注",
    "simpleLinearLengthDimension": "简单线性长度标注",
    "bitbybit.occt.dimensions.simpleLinearLengthDimension_description": "在两点之间创建简单线性长度标注 - 测量单位",
    "offsetFromPoints": "距点的偏移量",
    "crossingSize": "交叉大小",
    "labelSuffix": "标签后缀",
    "labelSize": "标签大小",
    "labelOffset": "标签偏移量",
    "bitbybit.occt.dimensions.simpleAngularDimension": "简单角度尺寸",
    "simpleAngularDimension": "简单角度尺寸",
    "bitbybit.occt.dimensions.simpleAngularDimension_description": "创建简单角度尺寸。默认输出度数，但您可以选择使用弧度。",
    "direction1": "方向 1",
    "direction2": "方向 2",
    "offsetFromCenter": "距中心偏移",
    "extraSize": "额外尺寸",
    "radians": "弧度",
    "bitbybit.occt.dimensions.pinWithLabel": "带标签的图钉",
    "pinWithLabel": "带标签的图钉",
    "bitbybit.occt.dimensions.pinWithLabel_description": "创建带标签的图钉。可用于解释模型相关信息或在 3D 场景中标记重要内容。",
    "offsetFromStart": "距起点偏移",
    "bitbybit.vector.lengthSq": "长度平方",
    "lengthSq": "长度平方",
    "bitbybit.vector.lengthSq_description": "计算向量的长度平方",
    "bitbybit.point.twoPointsAlmostEqual": "两点相等",
    "twoPointsAlmostEqual": "两点相等",
    "bitbybit.point.twoPointsAlmostEqual_description": "检查两个点是否几乎相等",
    "bitbybit.line.lineToSegment": "直线到线段",
    "lineToSegment": "直线到线段",
    "bitbybit.line.lineToSegment_description": "将直线转换为线段",
    "bitbybit.line.linesToSegments": "多条直线到线段",
    "linesToSegments": "多条直线到线段",
    "bitbybit.line.linesToSegments_description": "将多条直线转换为线段",
    "bitbybit.line.segmentToLine": "线段到直线",
    "segmentToLine": "线段到直线",
    "bitbybit.line.segmentToLine_description": "将线段转换为直线",
    "segment": "线段",
    "Base.Segment3": "Base.Segment3",
    "bitbybit.line.segmentsToLines": "多条线段到直线",
    "segmentsToLines": "多条线段到直线",
    "bitbybit.line.segmentsToLines_description": "将多条线段转换为直线",
    "Base.Segment3[]": "Base.Segment3[]",
    "bitbybit.polyline.sortSegmentsIntoPolylines": "将线段排序为多段线",
    "sortSegmentsIntoPolylines": "将线段排序为多段线",
    "bitbybit.polyline.sortSegmentsIntoPolylines_description": "从可能连接但随机打乱的线段创建多段线",
    "sort": "排序",
    "bitbybit.mesh.signedDistanceToPlane": "到平面的有符号距离",
    "signedDistanceToPlane": "到平面的有符号距离",
    "bitbybit.mesh.signedDistanceToPlane_description": "计算点到平面的有符号距离。",
    "plane": "平面",
    "Base.TrianglePlane3": "Base.TrianglePlane3",
    "bitbybit.mesh.calculateTrianglePlane": "计算三角形平面",
    "calculateTrianglePlane": "计算三角形平面",
    "bitbybit.mesh.calculateTrianglePlane_description": "从三角形计算其所在的平面。",
    "triangle": "三角形",
    "Base.Triangle3": "Base.Triangle3",
    "bitbybit.mesh.triangleTriangleIntersection": "三角形与三角形相交",
    "triangleTriangleIntersection": "三角形与三角形相交",
    "bitbybit.mesh.triangleTriangleIntersection_description": "计算两个三角形的交集。",
    "triangle1": "三角形 1",
    "triangle2": "三角形 2",
    "bitbybit.mesh.meshMeshIntersectionSegments": "网格与网格相交线段",
    "meshMeshIntersectionSegments": "网格与网格相交线段",
    "bitbybit.mesh.meshMeshIntersectionSegments_description": "计算两个网格的相交线段。",
    "mesh1": "网格 1",
    "Base.Mesh3": "Base.Mesh3",
    "mesh2": "网格 2",
    "bitbybit.mesh.meshMeshIntersectionPolylines": "网格与网格相交多段线",
    "meshMeshIntersectionPolylines": "网格与网格相交多段线",
    "bitbybit.mesh.meshMeshIntersectionPolylines_description": "计算两个网格的相交多段线。",
    "bitbybit.occt.shapeFacesToPolygonPoints": "形状面转换为多边形点",
    "shapeFacesToPolygonPoints": "形状面转换为多边形点",
    "bitbybit.occt.shapeFacesToPolygonPoints_description": "从形状面创建多边形点",
    "reversedPoints": "反转点",
    "bitbybit.occt.shapeToMesh": "形状到网格",
    "shapeToMesh": "形状到网格",
    "bitbybit.occt.shapeToMesh_description": "从形状创建网格",
    "bitbybit.occt.shapesToMeshes": "多个形状到网格",
    "shapesToMeshes": "多个形状到网格",
    "bitbybit.occt.shapesToMeshes_description": "从形状创建网格",
    "bitbybit.manifold.manifold.shapes.fromPolygonPoints": "从多边形点",
    "bitbybit.manifold.manifold.shapes.fromPolygonPoints_description": "从描述三角形的一组多边形点创建流形(Manifold)。",
    "traingle": "三角形",
    "bitbybit.point.stretchPointsDirFromCenter": "从中心沿方向拉伸点",
    "stretchPointsDirFromCenter": "从中心沿方向拉伸点",
    "bitbybit.point.stretchPointsDirFromCenter_description": "通过提供中心点、方向和统一缩放因子来拉伸多个点",
    "bitbybit.point.hexGridScaledToFit": "缩放以适应的六边形网格",
    "hexGridScaledToFit": "缩放以适应的六边形网格",
    "bitbybit.point.hexGridScaledToFit_description": "创建一个尖顶六边形网格，缩放六边形以精确适应指定的尺寸。返回每个（可能已缩放的）六边形的中心点和顶点。六边形按先列后行的顺序排列。",
    "nrHexagonsU": "六边形数 U",
    "nrHexagonsV": "六边形数 V",
    "extendTop": "延伸上",
    "extendBottom": "延伸下",
    "extendLeft": "延伸左",
    "extendRight": "延伸右",
    "centerGrid": "居中网格",
    "bitbybit.point.sortPoints": "排序点",
    "sortPoints": "排序点",
    "bitbybit.point.sortPoints_description": "按字典序（先 X，再 Y，后 Z）排序点",
    "bitbybit.line.lineLineIntersection": "线线交点",
    "lineLineIntersection": "线线交点",
    "bitbybit.line.lineLineIntersection_description": "如果两条线相交，则返回交点",
    "line1": "线 1",
    "line2": "线 2",
    "checkSegmentsOnly": "仅检查线段",
    "bitbybit.polyline.polylineToLines": "多段线转直线",
    "polylineToLines": "多段线转直线",
    "bitbybit.polyline.polylineToLines_description": "从多段线创建直线",
    "bitbybit.polyline.polylineToSegments": "多段线转线段",
    "polylineToSegments": "多段线转线段",
    "bitbybit.polyline.polylineToSegments_description": "从多段线创建线段",
    "bitbybit.polyline.polylineSelfIntersection": "多段线自相交",
    "polylineSelfIntersection": "多段线自相交",
    "bitbybit.polyline.polylineSelfIntersection_description": "查找多段线的自相交点",
    "bitbybit.polyline.twoPolylineIntersection": "两条多段线相交",
    "twoPolylineIntersection": "两条多段线相交",
    "bitbybit.polyline.twoPolylineIntersection_description": "查找两条多段线之间的交点。",
    "polyline1": "多段线 1",
    "polyline2": "多段线 2",
    "bitbybit.occt.shapes.face.subdivideToHexagonWires": "细分为六边形线框",
    "subdivideToHexagonWires": "细分为六边形线框",
    "bitbybit.occt.shapes.face.subdivideToHexagonWires_description": "将面细分为六边形线框",
    "extendUUp": "延伸 U 上",
    "extendUBottom": "延伸 U 下",
    "extendVUp": "延伸 V 上",
    "extendVBottom": "延伸 V 下",
    "nrHexagonsInHeight": "高方向六边形数",
    "nrHexagonsInWidth": "宽方向六边形数",
    "bitbybit.vector.length": "向量长度",
    "bitbybit.vector.length_description": "计算向量的长度",
    "bitbybit.point.maxFilletRadius": "最大圆角半径",
    "maxFilletRadius": "最大圆角半径",
    "bitbybit.point.maxFilletRadius_description": "计算由共享端点 (C) 的两条线段形成的角点的最大可能圆角半径，使得圆角弧与两条线段相切并完全位于其内部。",
    "bitbybit.point.maxFilletRadiusHalfLine": "最大圆角半径（半线约束）",
    "maxFilletRadiusHalfLine": "最大圆角半径（半线约束）",
    "bitbybit.point.maxFilletRadiusHalfLine_description": "计算角点 C 处的最大可能圆角半径，使得圆角弧与两条线段 (P1-C, P2-C) 相切，并且切点位于每条线段的前半部分（从 C 点测量）。",
    "bitbybit.point.maxFilletsHalfLine": "最大圆角（半线约束）",
    "maxFilletsHalfLine": "最大圆角（半线约束）",
    "bitbybit.point.maxFilletsHalfLine_description": "计算由一系列点形成的多段线每个角点的最大可能圆角半径。为每个内部角点计算圆角半径，如果多段线是闭合的，则可选地为闭合角点计算。",
    "checkLastWithFirst": "检查首尾连接",
    "bitbybit.point.safestPointsMaxFilletHalfLine": "最安全点最大圆角（半线约束）",
    "safestPointsMaxFilletHalfLine": "最安全点最大圆角（半线约束）",
    "bitbybit.point.safestPointsMaxFilletHalfLine_description": "基于“半线”约束，计算可统一应用于点集合所有角点的单一最安全最大圆角半径。这通过查找为每个单独角点计算的最大可能圆角半径的最小值来确定。",
    "bitbybit.polyline.maxFilletsHalfLine": "最大圆角（半线约束）",
    "bitbybit.polyline.maxFilletsHalfLine_description": "计算给定多段线每个角点的最大可能半线圆角半径。对于闭合多段线，它包括连接最后一段到第一段的角点。计算使用“半线”约束，这意味着圆角的切点必须位于连接到角点的每个线段的前半部分内。",
    "bitbybit.polyline.safestFilletRadius": "最安全圆角半径",
    "safestFilletRadius": "最安全圆角半径",
    "bitbybit.polyline.safestFilletRadius_description": "基于“半线”约束，计算可统一应用于多段线所有角点的单一最安全最大圆角半径。这通过查找为每个单独角点计算的最大可能圆角半径的最小值来确定。",
    "flatTop": "平顶",
    "bitbybit.mesh.meshMeshIntersectionPoints": "网格与网格交点",
    "meshMeshIntersectionPoints": "网格与网格交点",
    "bitbybit.mesh.meshMeshIntersectionPoints_description": "计算两个网格的交点。",
    "bitbybit.occt.shapes.wire.hexagonsInGrid": "网格中的六边形",
    "hexagonsInGrid": "网格中的六边形",
    "bitbybit.occt.shapes.wire.hexagonsInGrid_description": "在网格中创建 OpenCascade 六边形线框",
    "scalePatternWidth": "缩放图案宽",
    "scalePatternHeight": "缩放图案高",
    "bitbybit.occt.booleans.meshMeshIntersectionWires": "网格与网格相交线框",
    "meshMeshIntersectionWires": "网格与网格相交线框",
    "bitbybit.occt.booleans.meshMeshIntersectionWires_description": "在两个形状之间执行网格与网格求交操作 - 两个形状都可以有自己的网格划分精度。此算法对网格进行求交，并返回相交部分的线框，这些线框是多段线或多边形。",
    "mesh based": "基于网格",
    "precision1": "精度 1",
    "precision2": "精度 2",
    "bitbybit.occt.booleans.meshMeshIntersectionPoints": "网格与网格交点",
    "bitbybit.occt.booleans.meshMeshIntersectionPoints_description": "在两个形状之间执行网格与网格求交操作 - 两个形状都可以有自己的网格划分精度。此算法对网格进行求交，并返回交点。",
    "bitbybit.occt.booleans.meshMeshIntersectionOfShapesWires": "网格与网格相交转线框",
    "meshMeshIntersectionOfShapesWires": "网格与网格相交转线框",
    "bitbybit.occt.booleans.meshMeshIntersectionOfShapesWires_description": "在一个形状与多个其他形状之间执行网格与网格求交操作 - 所有形状都可以有自己的网格划分精度。此算法对网格进行求交，并返回相交部分的线框，这些线框是多段线或多边形。",
    "precisionShapes": "形状精度",
    "bitbybit.occt.booleans.meshMeshIntersectionOfShapesPoints": "网格与网格相交转点",
    "meshMeshIntersectionOfShapesPoints": "网格与网格相交转点",
    "bitbybit.occt.booleans.meshMeshIntersectionOfShapesPoints_description": "在一个形状与多个其他形状之间执行网格与网格求交操作 - 所有形状都可以有自己的网格划分精度。此算法对网格进行求交，并返回交点。",
    "bitbybit.occt.shapes.face.hexagonsInGrid": "网格中的六边形",
    "bitbybit.occt.shapes.face.hexagonsInGrid_description": "在网格中创建 OpenCascade 六边形面",
    "bitbybit.jscad.toPolygonPoints": "转为多边形点",
    "toPolygonPoints": "转为多边形点",
    "bitbybit.jscad.toPolygonPoints_description": "将 jscad 形状转换为表示网格的多边形点集合",
    "conversions": "转换",
    "bitbybit.manifold.toPolygonPoints": "转为多边形点",
    "bitbybit.manifold.toPolygonPoints_description": "将 manifold 形状转换为表示网格的多边形点集合。",
    "flatU": "平坦 U",
    "bitbybit.occt.shapes.face.subdivideToHexagonHoles": "细分为六边形孔洞",
    "subdivideToHexagonHoles": "细分为六边形孔洞",
    "bitbybit.occt.shapes.face.subdivideToHexagonHoles_description": "将面细分为六边形孔洞",
    "bitbybit.verb.curve.convertLinesToNurbsCurves": "将直线转换为 NURBS 曲线",
    "bitbybit.verb.curve.convertLinesToNurbsCurves_description": "将直线转换为 NURBS 曲线。返回 verbnurbs Line 对象的数组。",
    "bitbybit.verb.curve.convertLineToNurbsCurve": "将直线转换为 NURBS 曲线",
    "convertLineToNurbsCurve": "将直线转换为 NURBS 曲线",
    "bitbybit.verb.curve.convertLineToNurbsCurve_description": "将直线转换为 NURBS 曲线。返回 verbnurbs Line 对象。",
    "Base.Line3": "Base.Line3",
    "bitbybit.verb.curve.convertPolylineToNurbsCurve": "将多段线转换为 NURBS 曲线",
    "convertPolylineToNurbsCurve": "将多段线转换为 NURBS 曲线",
    "bitbybit.verb.curve.convertPolylineToNurbsCurve_description": "将多段线转换为 NURBS 曲线。返回 verbnurbs NurbsCurve 对象。",
    "Base.Polyline3": "Base.Polyline3",
    "bitbybit.verb.curve.convertPolylinesToNurbsCurves": "将多段线转换为 NURBS 曲线",
    "convertPolylinesToNurbsCurves": "将多段线转换为 NURBS 曲线",
    "bitbybit.verb.curve.convertPolylinesToNurbsCurves_description": "将多段线转换为 NURBS 曲线。返回 verbnurbs NurbsCurve 对象。",
    "Base.Polyline3[]": "Base.Polyline3[]",
    "bitbybit.line.createSegment": "线段",
    "createSegment": "线段",
    "bitbybit.line.createSegment_description": "创建线段",
    "bitbybit.occt.shapes.edge.fromBaseLine": "从基线创建边",
    "fromBaseLine": "从基线",
    "bitbybit.occt.shapes.edge.fromBaseLine_description": "从基线格式 {start: Point3, end: Point3} 创建线性边",
    "from base": "从基础",
    "bitbybit.occt.shapes.edge.fromBaseLines": "从基线创建边",
    "fromBaseLines": "从基线",
    "bitbybit.occt.shapes.edge.fromBaseLines_description": "从基线格式 {start: Point3, end: Point3}[] 创建线性边",
    "bitbybit.occt.shapes.edge.fromBaseSegment": "从基础线段创建边",
    "fromBaseSegment": "从基础线段",
    "bitbybit.occt.shapes.edge.fromBaseSegment_description": "从基础线段格式 [Point3, Point3] 创建线性边",
    "bitbybit.occt.shapes.edge.fromBaseSegments": "从基础线段创建多条边",
    "fromBaseSegments": "从基础线段",
    "bitbybit.occt.shapes.edge.fromBaseSegments_description": "从基础线段格式 [Point3, Point3][] 创建线性边",
    "bitbybit.occt.shapes.edge.fromPoints": "从点创建多条边",
    "fromPoints": "从点",
    "bitbybit.occt.shapes.edge.fromPoints_description": "从点集合创建线性边",
    "bitbybit.occt.shapes.edge.fromBasePolyline": "从基础多段线创建多条边",
    "fromBasePolyline": "从基础多段线",
    "bitbybit.occt.shapes.edge.fromBasePolyline_description": "从多段线定义创建线性边",
    "bitbybit.occt.shapes.edge.fromBaseTriangle": "从基础三角形创建多条边",
    "fromBaseTriangle": "从基础三角形",
    "bitbybit.occt.shapes.edge.fromBaseTriangle_description": "从三角形定义创建线性边",
    "bitbybit.occt.shapes.edge.fromBaseMesh": "从基础网格创建多条边",
    "fromBaseMesh": "从基础网格",
    "bitbybit.occt.shapes.edge.fromBaseMesh_description": "从网格定义创建线性边",
    "bitbybit.occt.shapes.wire.fromBaseLine": "从基线创建线框",
    "bitbybit.occt.shapes.wire.fromBaseLine_description": "从基线格式 {start: Point3, end: Point3} 创建线性线框",
    "bitbybit.occt.shapes.wire.fromBaseLines": "从多条基线创建多个线框",
    "bitbybit.occt.shapes.wire.fromBaseLines_description": "从基线格式 {start: Point3, end: Point3}[] 创建线性线框",
    "bitbybit.occt.shapes.wire.fromBaseSegment": "从基础线段创建线框",
    "bitbybit.occt.shapes.wire.fromBaseSegment_description": "从基础线段格式 [Point3, Point3] 创建线性线框",
    "bitbybit.occt.shapes.wire.fromBaseSegments": "从多个基础线段创建多个线框",
    "bitbybit.occt.shapes.wire.fromBaseSegments_description": "从基础线段格式 [Point3, Point3][] 创建线性线框",
    "bitbybit.occt.shapes.wire.fromPoints": "从点创建线框",
    "bitbybit.occt.shapes.wire.fromPoints_description": "从点集合创建线框",
    "bitbybit.occt.shapes.wire.fromBasePolyline": "从基础多段线创建线框",
    "bitbybit.occt.shapes.wire.fromBasePolyline_description": "从多段线定义创建线框",
    "bitbybit.occt.shapes.wire.fromBaseTriangle": "从基础三角形创建线框",
    "bitbybit.occt.shapes.wire.fromBaseTriangle_description": "从三角形定义创建线框",
    "bitbybit.occt.shapes.wire.fromBaseMesh": "从基础网格创建多个线框",
    "bitbybit.occt.shapes.wire.fromBaseMesh_description": "从网格定义创建线框",
    "bitbybit.occt.shapes.face.fromBaseTriangle": "从基础三角形创建面",
    "bitbybit.occt.shapes.face.fromBaseTriangle_description": "从三角形定义创建面",
    "bitbybit.occt.shapes.face.fromBaseMesh": "从基础网格创建多个面",
    "bitbybit.occt.shapes.face.fromBaseMesh_description": "从网格定义创建面",
    "fromRightHanded": "从右手坐标系",
    "bitbybit.advanced.text3d.createWithUrl": "带url的文本",
    "createWithUrl": "带url的文本",
    "bitbybit.advanced.text3d.createWithUrl_description": "使用字体URL创建一个3D文本。当您想使用库中未包含的自定义字体时，这很有用。字体将从提供的URL加载，并用于生成3D文本。确保字体不包含自相交和其他错误字符——这是自定义字体的常见问题。支持的字体格式有：ttf、otf、woff。请注意，opentype.js不支持Woff2，因为它是一种压缩格式。",
    "fontUrl": "字体url",
    "bitbybit.advanced.text3d.createTextOnFaceUrl": "面上的文本url",
    "createTextOnFaceUrl": "面上的文本url",
    "bitbybit.advanced.text3d.createTextOnFaceUrl_description": "使用字体URL在面上创建一个3D文本。当您想使用库中未包含的自定义字体时，这很有用。字体将从提供的URL加载，并用于生成3D文本。确保字体不包含自相交和其他错误字符——这是自定义字体的常见问题。支持的字体格式有：ttf、otf、woff。请注意，opentype.js不支持Woff2，因为它是一种压缩格式。",
    "bitbybit.advanced.text3d.createTextsOnFaceUrl": "面上的多个文本url",
    "createTextsOnFaceUrl": "面上的多个文本url",
    "bitbybit.advanced.text3d.createTextsOnFaceUrl_description": "从多个url定义在面上创建3D文本。当您想使用库中未包含的自定义字体时，这很有用。字体将从提供的URL加载，并用于生成3D文本。确保字体不包含自相交和其他错误字符——这是自定义字体的常见问题。支持的字体格式有：ttf、otf、woff。请注意，opentype.js不支持Woff2，因为它是一种压缩格式。",
    "Text3DFaceDefinitionUrlDto[]": "Text3DFaceDefinitionUrlDto[]",
    "bitbybit.advanced.text3d.definition3dTextOnFaceUrl": "面上3d文本的定义url",
    "definition3dTextOnFaceUrl": "面上3d文本的定义url",
    "bitbybit.advanced.text3d.definition3dTextOnFaceUrl_description": "创建将用于面上url定义的3D文本。当您想使用库中未包含的自定义字体时，这很有用。字体将从提供的URL加载，并用于生成3D文本。确保字体不包含自相交和其他错误字符——这是自定义字体的常见问题。支持的字体格式有：ttf、otf、woff。请注意，opentype.js不支持Woff2，因为它是一种压缩格式。",
     "bitbybit.advanced.navigation.pointOfInterest": "兴趣点",
    "navigation": "导航",
    "pointOfInterest": "兴趣点",
    "bitbybit.advanced.navigation.pointOfInterest_description": "飞越节点",
    "cameraTarget": "相机目标",
    "cameraPosition": "相机位置",
    "bitbybit.advanced.navigation.pointsOfInterestSystem": "兴趣点系统",
    "pointsOfInterestSystem": "兴趣点系统",
    "bitbybit.advanced.navigation.pointsOfInterestSystem_description": "",
    "pointsOfInterest": "兴趣点",
    "PointOfInterestDto[]": "PointOfInterestDto[]",
    "point of interest": "兴趣点",
    "style": "样式",
    "PointOfInterestStyleDto": "PointOfInterestStyleDto",
    "bitbybit.advanced.navigation.pointOfInterestStyle": "兴趣点样式",
    "pointOfInterestStyle": "兴趣点样式",
    "bitbybit.advanced.navigation.pointOfInterestStyle_description": "创建兴趣点样式 - 用于设置三维空间中兴趣点指示器的样式。您可以自定义点的大小、颜色、悬停颜色、脉冲效果、文本标签的颜色和大小。",
    "pointSize": "点大小",
    "pointColor": "点颜色",
    "hoverPointColor": "悬停点颜色",
    "pulseColor": "脉冲颜色",
    "hoverPulseColor": "悬停脉冲颜色",
    "pulseMinSize": "脉冲最小尺寸",
    "pulseMaxSize": "脉冲最大尺寸",
    "pulseThickness": "脉冲厚度",
    "pulseSpeed": "脉冲速度",
    "textColor": "文本颜色",
    "hoverTextColor": "悬停文本颜色",
    "textSize": "文本大小",
    "hideSkybox": "隐藏天空盒",
    "textureUrl": "纹理URL",
    "hdrTexture": "HDR纹理",
    "textureSize": "纹理大小",
    "bitbybit.babylon.scene.enableSkyboxCustomTexture": "启用天空盒自定义纹理",
    "enableSkyboxCustomTexture": "启用天空盒自定义纹理",
    "bitbybit.babylon.scene.enableSkyboxCustomTexture_description": "启用带有自定义纹理的天空盒",
    "bitbybit.babylon.scene.canvasCSSBackgroundImage": "画布CSS背景图像",
    "canvasCSSBackgroundImage": "画布CSS背景图像",
    "bitbybit.babylon.scene.canvasCSSBackgroundImage_description": "将场景背景更改为3D空间的CSS背景图像",
    "cssBackgroundImage": "CSS背景图像",
    "bitbybit.babylon.scene.twoColorLinearGradient": "双色线性渐变",
    "twoColorLinearGradient": "双色线性渐变",
    "bitbybit.babylon.scene.twoColorLinearGradient_description": "为3D空间创建双色线性渐变背景",
    "colorFrom": "起始颜色",
    "colorTo": "结束颜色",
    "Base.gradientDirectionEnum": "Base.gradientDirectionEnum",
    "stopFrom": "起始停止点",
    "stopTo": "结束停止点",
    "bitbybit.babylon.scene.twoColorRadialGradient": "双色径向渐变",
    "twoColorRadialGradient": "双色径向渐变",
    "bitbybit.babylon.scene.twoColorRadialGradient_description": "为3D空间创建双色径向渐变背景",
    "Base.gradientPositionEnum": "Base.gradientPositionEnum",
    "Base.gradientShapeEnum": "Base.gradientShapeEnum",
    "bitbybit.babylon.scene.multiColorLinearGradient": "多色线性渐变",
    "multiColorLinearGradient": "多色线性渐变",
    "bitbybit.babylon.scene.multiColorLinearGradient_description": "为3D空间创建多色线性渐变背景",
    "Base.Color[]": "Base.Color[]",
    "stops": "停止点",
    "bitbybit.babylon.scene.multiColorRadialGradient": "多色径向渐变",
    "multiColorRadialGradient": "多色径向渐变",
    "bitbybit.babylon.scene.multiColorRadialGradient_description": "为3D空间创建多色径向渐变背景",
    "bitbybit.babylon.scene.canvasBackgroundImage": "画布背景图像",
    "canvasBackgroundImage": "画布背景图像",
    "bitbybit.babylon.scene.canvasBackgroundImage_description": "为3D空间设置具有各种自定义选项的背景图像",
    "imageUrl": "图像URL",
    "Base.backgroundRepeatEnum": "Base.backgroundRepeatEnum",
    "Base.backgroundSizeEnum": "Base.backgroundSizeEnum",
    "attachment": "附件",
    "Base.backgroundAttachmentEnum": "Base.backgroundAttachmentEnum",
    "Base.backgroundOriginClipEnum": "Base.backgroundOriginClipEnum",
    "clip": "裁剪",
    "labelRotation": "标签旋转",
    "bitbybit.advanced.dimensions.linearDimension": "线性尺寸",
    "linearDimension": "线性尺寸",
    "bitbybit.advanced.dimensions.linearDimension_description": "创建线性尺寸 - 两点之间带有延伸线和文本标签的测量线。尺寸显示点之间的距离，可以使用DimensionStyleDto进行样式设置。",
    "linear dimension": "线性尺寸",
    "DimensionStyleDto": "DimensionStyleDto",
    "bitbybit.advanced.dimensions.angularDimension": "角度尺寸",
    "angularDimension": "角度尺寸",
    "bitbybit.advanced.dimensions.angularDimension_description": "创建角度尺寸 - 两个方向向量之间带有延伸线和文本标签的测量弧。尺寸显示方向之间的角度，可以使用DimensionStyleDto进行样式设置。",
    "angular dimension": "角度尺寸",
    "centerPoint": "中心点",
    "bitbybit.advanced.dimensions.dimensionStyle": "尺寸样式",
    "dimensionStyle": "尺寸样式",
    "bitbybit.advanced.dimensions.dimensionStyle_description": "创建尺寸样式 - 用于在3D空间中设置尺寸线、箭头和文本的样式。您可以自定义线条颜色、厚度、文本大小、箭头大小和背景颜色。",
    "dimension style": "尺寸样式",
    "lineColor": "线条颜色",
    "lineThickness": "线条厚度",
    "extensionLineLength": "延伸线长度",
    "textBackgroundColor": "文本背景颜色",
    "textBackgroundOpacity": "文本背景不透明度",
    "arrowSize": "箭头大小",
    "arrowColor": "箭头颜色",
    "textRenderMode": "文本渲染模式",
    "textRenderModeEnum": "textRenderModeEnum",
    "textBillboard": "文本广告牌",
    "occlusionCheckInterval": "遮挡检查间隔",
    "arrowTailLength": "箭头尾长度",
    "showArrows": "显示箭头",
    "labelOverwrite": "标签覆盖",
    "bitbybit.advanced.dimensions.radialDimension": "径向尺寸",
    "radialDimension": "径向尺寸",
    "bitbybit.advanced.dimensions.radialDimension_description": "创建径向尺寸 - 从中心到周边显示半径或直径的测量线。显示半径的'R'前缀或直径的'⌀'前缀，可选中心标记。",
    "radial dimension": "径向尺寸",
    "radiusPoint": "半径点",
    "showDiameter": "显示直径",
    "showCenterMark": "显示中心标记",
    "bitbybit.advanced.dimensions.diametralDimension": "直径尺寸",
    "diametralDimension": "直径尺寸",
    "bitbybit.advanced.dimensions.diametralDimension_description": "创建直径尺寸 - 跨越圆形特征完整直径的测量线。显示'⌀'前缀，可选中心标记和两端箭头。",
    "diametral dimension": "直径尺寸",
    "bitbybit.advanced.dimensions.ordinateDimension": "坐标尺寸",
    "ordinateDimension": "坐标尺寸",
    "bitbybit.advanced.dimensions.ordinateDimension_description": "创建坐标尺寸 - 显示从参考点带引线的X、Y或Z坐标。在技术图纸中用于坐标注释和基准参考。",
    "ordinate dimension": "坐标尺寸",
    "measurementPoint": "测量点",
    "referencePoint": "参考点",
    "ordinateAxisEnum": "ordinateAxisEnum",
    "showLeaderLine": "显示引线",
    "viewMode": "查看模式",
    "schema": "架构",
    "json schema": "JSON架构",
    "metadata": "元数据",
    "bitbybit.babylon.scene.twoColorLinearGradientBackground": "双色线性渐变背景",
    "twoColorLinearGradientBackground": "双色线性渐变背景",
    "bitbybit.babylon.scene.twoColorLinearGradientBackground_description": "为3D空间创建双色线性渐变背景",
    "bitbybit.babylon.scene.twoColorRadialGradientBackground": "双色径向渐变背景",
    "twoColorRadialGradientBackground": "双色径向渐变背景",
    "bitbybit.babylon.scene.twoColorRadialGradientBackground_description": "为3D空间创建双色径向渐变背景",
    "bitbybit.babylon.scene.multiColorLinearGradientBackground": "多色线性渐变背景",
    "multiColorLinearGradientBackground": "多色线性渐变背景",
    "bitbybit.babylon.scene.multiColorLinearGradientBackground_description": "为3D空间创建多色线性渐变背景",
    "bitbybit.babylon.scene.multiColorRadialGradientBackground": "多色径向渐变背景",
    "multiColorRadialGradientBackground": "多色径向渐变背景",
    "bitbybit.babylon.scene.multiColorRadialGradientBackground_description": "为3D空间创建多色径向渐变背景",
    "textBackgroundStroke": "文本背景描边",
    "textBackgroundRadius": "文本背景半径",
    "stableSize": "稳定大小",
    "alwaysOnTop": "总在顶部",
    "textStableSize": "稳定文本大小",
    "bitbybit.occt.io.shapeToDxfPaths": "形状转DXF路径",
    "shapeToDxfPaths": "形状转DXF路径",
    "bitbybit.occt.io.shapeToDxfPaths_description": "从OCCT形状创建DXF路径。重要 - 包含线框的形状必须位于XZ平面（Y=0）上才能正确导出2D DXF。",
    "dxf": "DXF",
    "bitbybit.occt.io.dxfPathsWithLayer": "带图层的DXF路径",
    "dxfPathsWithLayer": "带图层的DXF路径",
    "bitbybit.occt.io.dxfPathsWithLayer_description": "向DXF路径添加图层和颜色信息",
    "IO.DxfPathDto[]": "IO.DxfPathDto[]",
    "layer": "图层",
    "bitbybit.occt.io.dxfCreate": "创建DXF",
    "dxfCreate": "创建DXF",
    "bitbybit.occt.io.dxfCreate_description": "将多个路径部分组装成完整的DXF文件",
    "pathsParts": "路径部分",
    "IO.DxfPathsPartDto[]": "IO.DxfPathsPartDto[]",
    "textFontWeight": "文本字体粗细",
    "textPosition": "文本位置",
    "textBackgroundStrokeThickness": "描边粗细",
    "Inputs.Base.topBottomEnum": "Inputs.Base.topBottomEnum"
}